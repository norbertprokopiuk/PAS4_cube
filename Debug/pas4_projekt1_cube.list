
pas4_projekt1_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080060a8  080060a8  000160a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080064d0  080064d0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064d0  080064d0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080064d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000070  08006544  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08006544  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f07c  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002190  00000000  00000000  0002f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000312a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000180fe  00000000  00000000  00032170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f827  00000000  00000000  0004a26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00091438  00000000  00000000  00059a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000eaecd  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000db8  00000000  00000000  000eaf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004160  00000000  00000000  000ebcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800608c 	.word	0x0800608c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800608c 	.word	0x0800608c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <lcd_cmd>:
static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

SPI_HandleTypeDef hspi2;

void lcd_cmd(uint8_t cmd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2106      	movs	r1, #6
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <lcd_cmd+0x34>)
 8000a5c:	f002 f9cb 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000a60:	1df9      	adds	r1, r7, #7
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2201      	movs	r2, #1
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <lcd_cmd+0x38>)
 8000a6a:	f002 ff53 	bl	8003914 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2106      	movs	r1, #6
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <lcd_cmd+0x34>)
 8000a74:	f002 f9bf 	bl	8002df6 <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40011000 	.word	0x40011000
 8000a84:	200002a4 	.word	0x200002a4

08000a88 <lcd_setup>:

void lcd_setup(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2108      	movs	r1, #8
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <lcd_setup+0x3c>)
 8000a92:	f002 f9b0 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2108      	movs	r1, #8
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <lcd_setup+0x3c>)
 8000a9c:	f002 f9ab 	bl	8002df6 <HAL_GPIO_WritePin>

	lcd_cmd(PCD8544_FUNCTION_SET | 1);
 8000aa0:	2021      	movs	r0, #33	; 0x21
 8000aa2:	f7ff ffd3 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_H_BIAS | 4);
 8000aa6:	2014      	movs	r0, #20
 8000aa8:	f7ff ffd0 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_H_VOP | 0x3f);
 8000aac:	20bf      	movs	r0, #191	; 0xbf
 8000aae:	f7ff ffcd 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_FUNCTION_SET);
 8000ab2:	2020      	movs	r0, #32
 8000ab4:	f7ff ffca 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_DISP_NORMAL);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f7ff ffc7 	bl	8000a4c <lcd_cmd>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000

08000ac8 <lcd_clear>:

void lcd_clear(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
 8000acc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4802      	ldr	r0, [pc, #8]	; (8000adc <lcd_clear+0x14>)
 8000ad4:	f004 fa8e 	bl	8004ff4 <memset>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <lcd_draw_text>:
{
	memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
}

void lcd_draw_text(int row, int col, const char* text)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t* pbuf = &lcd_buffer[row * 84 + col];
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2254      	movs	r2, #84	; 0x54
 8000af0:	fb02 f203 	mul.w	r2, r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <lcd_draw_text+0x84>)
 8000afa:	4413      	add	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 8000afe:	e023      	b.n	8000b48 <lcd_draw_text+0x68>
		int ch = *text++;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	f1a3 0220 	sub.w	r2, r3, #32
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <lcd_draw_text+0x88>)
 8000b18:	4413      	add	r3, r2
 8000b1a:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	e00a      	b.n	8000b38 <lcd_draw_text+0x58>
			*pbuf++ = *font++;
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	1c53      	adds	r3, r2, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	1c59      	adds	r1, r3, #1
 8000b2c:	61b9      	str	r1, [r7, #24]
 8000b2e:	7812      	ldrb	r2, [r2, #0]
 8000b30:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	ddf1      	ble.n	8000b22 <lcd_draw_text+0x42>
		}
		*pbuf++ = 0;
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	61ba      	str	r2, [r7, #24]
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <lcd_draw_text+0x78>
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <lcd_draw_text+0x8c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d3d3      	bcc.n	8000b00 <lcd_draw_text+0x20>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3724      	adds	r7, #36	; 0x24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	080060fc 	.word	0x080060fc
 8000b6c:	2000027e 	.word	0x2000027e

08000b70 <lcd_copy>:

void lcd_copy(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <lcd_copy+0x38>)
 8000b7a:	f002 f93c 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2104      	movs	r1, #4
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <lcd_copy+0x38>)
 8000b84:	f002 f937 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <lcd_copy+0x3c>)
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <lcd_copy+0x40>)
 8000b94:	f002 febe 	bl	8003914 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <lcd_copy+0x38>)
 8000b9e:	f002 f92a 	bl	8002df6 <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	200002a4 	.word	0x200002a4
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM2_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) { // Jeżeli przerwanie pochodzi od timera nr. 3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x6c>
		time++; //zliczam czas z dokładnośćia do 0.1 s
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bd2:	6013      	str	r3, [r2, #0]
		angular_velocity = delta_rot / 0.1;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bda:	a315      	add	r3, pc, #84	; (adr r3, 8000c30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fd9c 	bl	800071c <__aeabi_ddiv>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4916      	ldr	r1, [pc, #88]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bea:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = delta_D / 0.1;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bf4:	a30e      	add	r3, pc, #56	; (adr r3, 8000c30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f7ff fd8f 	bl	800071c <__aeabi_ddiv>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4912      	ldr	r1, [pc, #72]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c04:	e9c1 2300 	strd	r2, r3, [r1]
		delta_rot = 0;
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	e9c1 2300 	strd	r2, r3, [r1]
		delta_D = 0;
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e9c1 2300 	strd	r2, r3, [r1]
	}

}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	f3af 8000 	nop.w
 8000c30:	9999999a 	.word	0x9999999a
 8000c34:	3fb99999 	.word	0x3fb99999
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	20000284 	.word	0x20000284
 8000c40:	200004c0 	.word	0x200004c0
 8000c44:	20000298 	.word	0x20000298
 8000c48:	200004c8 	.word	0x200004c8
 8000c4c:	20000290 	.word	0x20000290

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 faae 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 fdf2 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f001 f802 	bl	8001c64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 ffd6 	bl	8001c10 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c64:	f000 feb0 	bl	80019c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c68:	f000 ff06 	bl	8001a78 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000c6c:	f000 fe76 	bl	800195c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000c70:	f000 ff56 	bl	8001b20 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000c74:	f000 fe34 	bl	80018e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000c78:	213c      	movs	r1, #60	; 0x3c
 8000c7a:	483c      	ldr	r0, [pc, #240]	; (8000d6c <main+0x11c>)
 8000c7c:	f003 fa6a 	bl	8004154 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	483b      	ldr	r0, [pc, #236]	; (8000d70 <main+0x120>)
 8000c84:	f003 fa66 	bl	8004154 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	210c      	movs	r1, #12
 8000c8c:	4839      	ldr	r0, [pc, #228]	; (8000d74 <main+0x124>)
 8000c8e:	f002 f8b2 	bl	8002df6 <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi2);
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <main+0x128>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <main+0x128>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ca0:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4835      	ldr	r0, [pc, #212]	; (8000d7c <main+0x12c>)
 8000ca6:	f003 f911 	bl	8003ecc <HAL_TIM_PWM_Start>

	HAL_ADC_Start(&hadc1);
 8000caa:	4835      	ldr	r0, [pc, #212]	; (8000d80 <main+0x130>)
 8000cac:	f001 fbbc 	bl	8002428 <HAL_ADC_Start>
	lcd_setup();
 8000cb0:	f7ff feea 	bl	8000a88 <lcd_setup>
	lcd_draw_text(0, 0, "PAS 4");
 8000cb4:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <main+0x134>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff11 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(1, 0, "Projekt nr 1");
 8000cbe:	4a32      	ldr	r2, [pc, #200]	; (8000d88 <main+0x138>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff ff0c 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(2, 0, "Obs. enkoderow");
 8000cc8:	4a30      	ldr	r2, [pc, #192]	; (8000d8c <main+0x13c>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff ff07 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(3, 0, "Norbert");
 8000cd2:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <main+0x140>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f7ff ff02 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(4, 0, "Prokopiuk");
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <main+0x144>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2004      	movs	r0, #4
 8000ce2:	f7ff fefd 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(5, 0, "299024");
 8000ce6:	4a2c      	ldr	r2, [pc, #176]	; (8000d98 <main+0x148>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2005      	movs	r0, #5
 8000cec:	f7ff fef8 	bl	8000ae0 <lcd_draw_text>
	lcd_copy();
 8000cf0:	f7ff ff3e 	bl	8000b70 <lcd_copy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf8:	481e      	ldr	r0, [pc, #120]	; (8000d74 <main+0x124>)
 8000cfa:	f002 f865 	bl	8002dc8 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d114      	bne.n	8000d2e <main+0xde>
			i++;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <main+0x14c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <main+0x14c>)
 8000d0e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 8000d10:	481a      	ldr	r0, [pc, #104]	; (8000d7c <main+0x12c>)
 8000d12:	f003 f831 	bl	8003d78 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4821      	ldr	r0, [pc, #132]	; (8000da0 <main+0x150>)
 8000d1c:	f002 f86b 	bl	8002df6 <HAL_GPIO_WritePin>
			if (i > 1)
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <main+0x14c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d902      	bls.n	8000d2e <main+0xde>
				i = 0;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <main+0x14c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
		}
		if (i >= 1) {
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <main+0x14c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0de      	beq.n	8000cf4 <main+0xa4>
			pulse_count_1 = TIM1->CNT;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <main+0x154>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <main+0x158>)
 8000d3e:	801a      	strh	r2, [r3, #0]
			pulse_count_2 = TIM2->CNT;
 8000d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <main+0x15c>)
 8000d4a:	801a      	strh	r2, [r3, #0]
			napiecie1 = HAL_ADC_GetValue(&hadc1);
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <main+0x130>)
 8000d4e:	f001 fc19 	bl	8002584 <HAL_ADC_GetValue>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <main+0x160>)
 8000d56:	6013      	str	r3, [r2, #0]
			if (napiecie1 <= 280)
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <main+0x160>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8000d60:	d82a      	bhi.n	8000db8 <main+0x168>
				TIM3->CCR2 = 999;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <main+0x164>)
 8000d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
 8000d6a:	e028      	b.n	8000dbe <main+0x16e>
 8000d6c:	200003d8 	.word	0x200003d8
 8000d70:	20000424 	.word	0x20000424
 8000d74:	40011000 	.word	0x40011000
 8000d78:	200002a4 	.word	0x200002a4
 8000d7c:	20000328 	.word	0x20000328
 8000d80:	20000378 	.word	0x20000378
 8000d84:	080060a8 	.word	0x080060a8
 8000d88:	080060b0 	.word	0x080060b0
 8000d8c:	080060c0 	.word	0x080060c0
 8000d90:	080060d0 	.word	0x080060d0
 8000d94:	080060d8 	.word	0x080060d8
 8000d98:	080060e4 	.word	0x080060e4
 8000d9c:	200003a8 	.word	0x200003a8
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40012c00 	.word	0x40012c00
 8000da8:	20000420 	.word	0x20000420
 8000dac:	200004b8 	.word	0x200004b8
 8000db0:	20000374 	.word	0x20000374
 8000db4:	40000400 	.word	0x40000400
			else
				TIM3->CCR2 = 0;
 8000db8:	4bb1      	ldr	r3, [pc, #708]	; (8001080 <main+0x430>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38

			if ((pulse_count_1 != last_state_1 || pulse_count_2 != last_state_2)) {
 8000dbe:	4bb1      	ldr	r3, [pc, #708]	; (8001084 <main+0x434>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4bb0      	ldr	r3, [pc, #704]	; (8001088 <main+0x438>)
 8000dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d109      	bne.n	8000de4 <main+0x194>
 8000dd0:	4bae      	ldr	r3, [pc, #696]	; (800108c <main+0x43c>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4bad      	ldr	r3, [pc, #692]	; (8001090 <main+0x440>)
 8000dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f000 810d 	beq.w	8000ffe <main+0x3ae>
				Dl = (3.1415 * pulse_count_1) * d_kola / 1200;
 8000de4:	4ba7      	ldr	r3, [pc, #668]	; (8001084 <main+0x434>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb02 	bl	80003f4 <__aeabi_i2d>
 8000df0:	a39f      	add	r3, pc, #636	; (adr r3, 8001070 <main+0x420>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fb67 	bl	80004c8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	4ba4      	ldr	r3, [pc, #656]	; (8001094 <main+0x444>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff fb5e 	bl	80004c8 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	4b9f      	ldr	r3, [pc, #636]	; (8001098 <main+0x448>)
 8000e1a:	f7ff fc7f 	bl	800071c <__aeabi_ddiv>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	499e      	ldr	r1, [pc, #632]	; (800109c <main+0x44c>)
 8000e24:	e9c1 2300 	strd	r2, r3, [r1]
				Dp = (3.1415 * pulse_count_2) * d_kola / 1200;
 8000e28:	4b98      	ldr	r3, [pc, #608]	; (800108c <main+0x43c>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fae0 	bl	80003f4 <__aeabi_i2d>
 8000e34:	a38e      	add	r3, pc, #568	; (adr r3, 8001070 <main+0x420>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff fb45 	bl	80004c8 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	4b93      	ldr	r3, [pc, #588]	; (8001094 <main+0x444>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb3c 	bl	80004c8 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b8e      	ldr	r3, [pc, #568]	; (8001098 <main+0x448>)
 8000e5e:	f7ff fc5d 	bl	800071c <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	498e      	ldr	r1, [pc, #568]	; (80010a0 <main+0x450>)
 8000e68:	e9c1 2300 	strd	r2, r3, [r1]

				D = (Dl + Dp) / 2;
 8000e6c:	4b8b      	ldr	r3, [pc, #556]	; (800109c <main+0x44c>)
 8000e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e72:	4b8b      	ldr	r3, [pc, #556]	; (80010a0 <main+0x450>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff f970 	bl	800015c <__adddf3>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8c:	f7ff fc46 	bl	800071c <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4983      	ldr	r1, [pc, #524]	; (80010a4 <main+0x454>)
 8000e96:	e9c1 2300 	strd	r2, r3, [r1]
				rot = (Dp - Dl) / rozstaw;
 8000e9a:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <main+0x450>)
 8000e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea0:	4b7e      	ldr	r3, [pc, #504]	; (800109c <main+0x44c>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff f957 	bl	8000158 <__aeabi_dsub>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <main+0x458>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fc30 	bl	800071c <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	497a      	ldr	r1, [pc, #488]	; (80010ac <main+0x45c>)
 8000ec2:	e9c1 2300 	strd	r2, r3, [r1]
				delta_rot = rot - last_rot;
 8000ec6:	4b79      	ldr	r3, [pc, #484]	; (80010ac <main+0x45c>)
 8000ec8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ecc:	4b78      	ldr	r3, [pc, #480]	; (80010b0 <main+0x460>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff f941 	bl	8000158 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4976      	ldr	r1, [pc, #472]	; (80010b4 <main+0x464>)
 8000edc:	e9c1 2300 	strd	r2, r3, [r1]
				if (rot >= 2 * 3.1415) {
 8000ee0:	4b72      	ldr	r3, [pc, #456]	; (80010ac <main+0x45c>)
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	a364      	add	r3, pc, #400	; (adr r3, 8001078 <main+0x428>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fd72 	bl	80009d4 <__aeabi_dcmpge>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00c      	beq.n	8000f10 <main+0x2c0>
					rot = rot - 2 * 3.1415;
 8000ef6:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <main+0x45c>)
 8000ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000efc:	a35e      	add	r3, pc, #376	; (adr r3, 8001078 <main+0x428>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff f929 	bl	8000158 <__aeabi_dsub>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4968      	ldr	r1, [pc, #416]	; (80010ac <main+0x45c>)
 8000f0c:	e9c1 2300 	strd	r2, r3, [r1]
				}
				rot_d = rot * 180 / 3.1415;
 8000f10:	4b66      	ldr	r3, [pc, #408]	; (80010ac <main+0x45c>)
 8000f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <main+0x468>)
 8000f1c:	f7ff fad4 	bl	80004c8 <__aeabi_dmul>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	a351      	add	r3, pc, #324	; (adr r3, 8001070 <main+0x420>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff fbf5 	bl	800071c <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4961      	ldr	r1, [pc, #388]	; (80010bc <main+0x46c>)
 8000f38:	e9c1 2300 	strd	r2, r3, [r1]
				delta_D = D - D_last;
 8000f3c:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <main+0x454>)
 8000f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f42:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <main+0x470>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff f906 	bl	8000158 <__aeabi_dsub>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	495c      	ldr	r1, [pc, #368]	; (80010c4 <main+0x474>)
 8000f52:	e9c1 2300 	strd	r2, r3, [r1]
				x_n = x_n + (D - D_last) * cos(rot);
 8000f56:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <main+0x454>)
 8000f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f5c:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <main+0x470>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff f8f9 	bl	8000158 <__aeabi_dsub>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4614      	mov	r4, r2
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <main+0x45c>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f004 f844 	bl	8005004 <cos>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4620      	mov	r0, r4
 8000f82:	4629      	mov	r1, r5
 8000f84:	f7ff faa0 	bl	80004c8 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <main+0x478>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff f8e1 	bl	800015c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	494a      	ldr	r1, [pc, #296]	; (80010c8 <main+0x478>)
 8000fa0:	e9c1 2300 	strd	r2, r3, [r1]
				y_n = y_n + (D - D_last) * sin(rot);
 8000fa4:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <main+0x454>)
 8000fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <main+0x470>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff f8d2 	bl	8000158 <__aeabi_dsub>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4614      	mov	r4, r2
 8000fba:	461d      	mov	r5, r3
 8000fbc:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <main+0x45c>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f004 f85f 	bl	8005088 <sin>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4620      	mov	r0, r4
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	f7ff fa79 	bl	80004c8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <main+0x47c>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff f8ba 	bl	800015c <__adddf3>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4937      	ldr	r1, [pc, #220]	; (80010cc <main+0x47c>)
 8000fee:	e9c1 2300 	strd	r2, r3, [r1]
				last_rot = rot;
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <main+0x45c>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	492d      	ldr	r1, [pc, #180]	; (80010b0 <main+0x460>)
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]
			}

			//obliczanie czasu i innych zmiennych do aktualizacji napisów
			//pozycja
			x_e = (int) x_n;
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <main+0x478>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fcf8 	bl	80009fc <__aeabi_d2iz>
 800100c:	4603      	mov	r3, r0
 800100e:	b21a      	sxth	r2, r3
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <main+0x480>)
 8001012:	801a      	strh	r2, [r3, #0]
			y_e = (int) y_n;
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <main+0x47c>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fced 	bl	80009fc <__aeabi_d2iz>
 8001022:	4603      	mov	r3, r0
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <main+0x484>)
 8001028:	801a      	strh	r2, [r3, #0]

			//predkosc

			v_e = (int) velocity * 10;
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <main+0x488>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fce2 	bl	80009fc <__aeabi_d2iz>
 8001038:	4603      	mov	r3, r0
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <main+0x48c>)
 800104a:	801a      	strh	r2, [r3, #0]

			//czas
			milsec = time % 10;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <main+0x490>)
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <main+0x494>)
 8001052:	fba3 2301 	umull	r2, r3, r3, r1
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	1aca      	subs	r2, r1, r3
 8001062:	b292      	uxth	r2, r2
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <main+0x498>)
 8001066:	801a      	strh	r2, [r3, #0]
 8001068:	e040      	b.n	80010ec <main+0x49c>
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	c083126f 	.word	0xc083126f
 8001074:	400921ca 	.word	0x400921ca
 8001078:	c083126f 	.word	0xc083126f
 800107c:	401921ca 	.word	0x401921ca
 8001080:	40000400 	.word	0x40000400
 8001084:	20000420 	.word	0x20000420
 8001088:	200002a0 	.word	0x200002a0
 800108c:	200004b8 	.word	0x200004b8
 8001090:	200002a2 	.word	0x200002a2
 8001094:	20000050 	.word	0x20000050
 8001098:	4092c000 	.word	0x4092c000
 800109c:	200004b0 	.word	0x200004b0
 80010a0:	200003c0 	.word	0x200003c0
 80010a4:	20000300 	.word	0x20000300
 80010a8:	20000058 	.word	0x20000058
 80010ac:	20000308 	.word	0x20000308
 80010b0:	200003c8 	.word	0x200003c8
 80010b4:	200004c0 	.word	0x200004c0
 80010b8:	40668000 	.word	0x40668000
 80010bc:	20000318 	.word	0x20000318
 80010c0:	200003b0 	.word	0x200003b0
 80010c4:	200004c8 	.word	0x200004c8
 80010c8:	20000320 	.word	0x20000320
 80010cc:	200003d0 	.word	0x200003d0
 80010d0:	20000370 	.word	0x20000370
 80010d4:	20000312 	.word	0x20000312
 80010d8:	20000290 	.word	0x20000290
 80010dc:	20000310 	.word	0x20000310
 80010e0:	20000284 	.word	0x20000284
 80010e4:	cccccccd 	.word	0xcccccccd
 80010e8:	2000028e 	.word	0x2000028e
			sec = (time - milsec) / 10;
 80010ec:	4ba9      	ldr	r3, [pc, #676]	; (8001394 <main+0x744>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4aa9      	ldr	r2, [pc, #676]	; (8001398 <main+0x748>)
 80010f2:	8812      	ldrh	r2, [r2, #0]
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	4aa9      	ldr	r2, [pc, #676]	; (800139c <main+0x74c>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4ba7      	ldr	r3, [pc, #668]	; (80013a0 <main+0x750>)
 8001102:	801a      	strh	r2, [r3, #0]

			//rotacja
			rot_e = (int) 10 * rot_d;
 8001104:	4ba7      	ldr	r3, [pc, #668]	; (80013a4 <main+0x754>)
 8001106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4ba6      	ldr	r3, [pc, #664]	; (80013a8 <main+0x758>)
 8001110:	f7ff f9da 	bl	80004c8 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fc6e 	bl	80009fc <__aeabi_d2iz>
 8001120:	4603      	mov	r3, r0
 8001122:	b21a      	sxth	r2, r3
 8001124:	4ba1      	ldr	r3, [pc, #644]	; (80013ac <main+0x75c>)
 8001126:	801a      	strh	r2, [r3, #0]

			if (rot_e >= 1800)
 8001128:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <main+0x75c>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001132:	db0a      	blt.n	800114a <main+0x4fa>
				rot_e = rot_e - 3600;
 8001134:	4b9d      	ldr	r3, [pc, #628]	; (80013ac <main+0x75c>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	b29b      	uxth	r3, r3
 800113c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <main+0x75c>)
 8001146:	801a      	strh	r2, [r3, #0]
 8001148:	e00f      	b.n	800116a <main+0x51a>
			else if (rot_e <= -1800)
 800114a:	4b98      	ldr	r3, [pc, #608]	; (80013ac <main+0x75c>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 8001154:	dc09      	bgt.n	800116a <main+0x51a>
				rot_e = rot_e + 3600;
 8001156:	4b95      	ldr	r3, [pc, #596]	; (80013ac <main+0x75c>)
 8001158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115c:	b29b      	uxth	r3, r3
 800115e:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8001162:	b29b      	uxth	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b91      	ldr	r3, [pc, #580]	; (80013ac <main+0x75c>)
 8001168:	801a      	strh	r2, [r3, #0]

			if (rot_e >= 0)
 800116a:	4b90      	ldr	r3, [pc, #576]	; (80013ac <main+0x75c>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db03      	blt.n	800117c <main+0x52c>
				napis2[4] = '+';
 8001174:	4b8e      	ldr	r3, [pc, #568]	; (80013b0 <main+0x760>)
 8001176:	222b      	movs	r2, #43	; 0x2b
 8001178:	711a      	strb	r2, [r3, #4]
 800117a:	e002      	b.n	8001182 <main+0x532>
			else
				napis2[4] = '-';
 800117c:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <main+0x760>)
 800117e:	222d      	movs	r2, #45	; 0x2d
 8001180:	711a      	strb	r2, [r3, #4]

			rot_e = abs(rot_e);
 8001182:	4b8a      	ldr	r3, [pc, #552]	; (80013ac <main+0x75c>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	2b00      	cmp	r3, #0
 800118a:	bfb8      	it	lt
 800118c:	425b      	neglt	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b86      	ldr	r3, [pc, #536]	; (80013ac <main+0x75c>)
 8001194:	801a      	strh	r2, [r3, #0]
			//predkosc katowa

			ang_e = (int) 1000 * angular_velocity;
 8001196:	4b87      	ldr	r3, [pc, #540]	; (80013b4 <main+0x764>)
 8001198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <main+0x768>)
 80011a2:	f7ff f991 	bl	80004c8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc25 	bl	80009fc <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b81      	ldr	r3, [pc, #516]	; (80013bc <main+0x76c>)
 80011b8:	801a      	strh	r2, [r3, #0]

			//aktualizacja opisow
			//pozycja
			if (x_e >= 0)
 80011ba:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <main+0x770>)
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db03      	blt.n	80011cc <main+0x57c>
				napis1[4] = '+';
 80011c4:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <main+0x774>)
 80011c6:	222b      	movs	r2, #43	; 0x2b
 80011c8:	711a      	strb	r2, [r3, #4]
 80011ca:	e002      	b.n	80011d2 <main+0x582>
			else
				napis1[4] = '-';
 80011cc:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <main+0x774>)
 80011ce:	222d      	movs	r2, #45	; 0x2d
 80011d0:	711a      	strb	r2, [r3, #4]
			if (y_e >= 0)
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <main+0x778>)
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db03      	blt.n	80011e4 <main+0x594>
				napis1[9] = '+';
 80011dc:	4b79      	ldr	r3, [pc, #484]	; (80013c4 <main+0x774>)
 80011de:	222b      	movs	r2, #43	; 0x2b
 80011e0:	725a      	strb	r2, [r3, #9]
 80011e2:	e002      	b.n	80011ea <main+0x59a>
			else
				napis1[9] = '-';
 80011e4:	4b77      	ldr	r3, [pc, #476]	; (80013c4 <main+0x774>)
 80011e6:	222d      	movs	r2, #45	; 0x2d
 80011e8:	725a      	strb	r2, [r3, #9]
			x_e = abs(x_e);
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <main+0x770>)
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfb8      	it	lt
 80011f4:	425b      	neglt	r3, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <main+0x770>)
 80011fc:	801a      	strh	r2, [r3, #0]
			y_e = abs(y_e);
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <main+0x778>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	2b00      	cmp	r3, #0
 8001206:	bfb8      	it	lt
 8001208:	425b      	neglt	r3, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <main+0x778>)
 8001210:	801a      	strh	r2, [r3, #0]
			//x
			napis1[5] = '0' + (x_e - x_e % 100) / 100;
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <main+0x770>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	4618      	mov	r0, r3
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <main+0x770>)
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <main+0x77c>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1151      	asrs	r1, r2, #5
 8001228:	17da      	asrs	r2, r3, #31
 800122a:	1a8a      	subs	r2, r1, r2
 800122c:	2164      	movs	r1, #100	; 0x64
 800122e:	fb01 f202 	mul.w	r2, r1, r2
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	b21b      	sxth	r3, r3
 8001236:	1ac3      	subs	r3, r0, r3
 8001238:	4a64      	ldr	r2, [pc, #400]	; (80013cc <main+0x77c>)
 800123a:	fb82 1203 	smull	r1, r2, r2, r3
 800123e:	1152      	asrs	r2, r2, #5
 8001240:	17db      	asrs	r3, r3, #31
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3330      	adds	r3, #48	; 0x30
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <main+0x774>)
 800124c:	715a      	strb	r2, [r3, #5]
			napis1[6] = '0' + (x_e % 100 - x_e % 10) / 10;
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <main+0x770>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <main+0x77c>)
 8001256:	fb82 1203 	smull	r1, r2, r2, r3
 800125a:	1151      	asrs	r1, r2, #5
 800125c:	17da      	asrs	r2, r3, #31
 800125e:	1a8a      	subs	r2, r1, r2
 8001260:	2164      	movs	r1, #100	; 0x64
 8001262:	fb01 f202 	mul.w	r2, r1, r2
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <main+0x770>)
 800126e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001272:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <main+0x780>)
 8001274:	fb83 1302 	smull	r1, r3, r3, r2
 8001278:	1099      	asrs	r1, r3, #2
 800127a:	17d3      	asrs	r3, r2, #31
 800127c:	1ac9      	subs	r1, r1, r3
 800127e:	460b      	mov	r3, r1
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	b21b      	sxth	r3, r3
 800128a:	1ac3      	subs	r3, r0, r3
 800128c:	4a50      	ldr	r2, [pc, #320]	; (80013d0 <main+0x780>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	1092      	asrs	r2, r2, #2
 8001294:	17db      	asrs	r3, r3, #31
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3330      	adds	r3, #48	; 0x30
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <main+0x774>)
 80012a0:	719a      	strb	r2, [r3, #6]
			napis1[7] = '0' + x_e % 10;
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <main+0x770>)
 80012a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <main+0x780>)
 80012aa:	fb83 1302 	smull	r1, r3, r3, r2
 80012ae:	1099      	asrs	r1, r3, #2
 80012b0:	17d3      	asrs	r3, r2, #31
 80012b2:	1ac9      	subs	r1, r1, r3
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3330      	adds	r3, #48	; 0x30
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <main+0x774>)
 80012c8:	71da      	strb	r2, [r3, #7]
			//y
			napis1[10] = '0' + (y_e - y_e % 100) / 100;
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <main+0x778>)
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <main+0x778>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <main+0x77c>)
 80012da:	fb82 1203 	smull	r1, r2, r2, r3
 80012de:	1151      	asrs	r1, r2, #5
 80012e0:	17da      	asrs	r2, r3, #31
 80012e2:	1a8a      	subs	r2, r1, r2
 80012e4:	2164      	movs	r1, #100	; 0x64
 80012e6:	fb01 f202 	mul.w	r2, r1, r2
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	1ac3      	subs	r3, r0, r3
 80012f0:	4a36      	ldr	r2, [pc, #216]	; (80013cc <main+0x77c>)
 80012f2:	fb82 1203 	smull	r1, r2, r2, r3
 80012f6:	1152      	asrs	r2, r2, #5
 80012f8:	17db      	asrs	r3, r3, #31
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <main+0x774>)
 8001304:	729a      	strb	r2, [r3, #10]
			napis1[11] = '0' + (y_e % 100 - y_e % 10) / 10;
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <main+0x778>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <main+0x77c>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	1151      	asrs	r1, r2, #5
 8001314:	17da      	asrs	r2, r3, #31
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	2164      	movs	r1, #100	; 0x64
 800131a:	fb01 f202 	mul.w	r2, r1, r2
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <main+0x778>)
 8001326:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <main+0x780>)
 800132c:	fb83 1302 	smull	r1, r3, r3, r2
 8001330:	1099      	asrs	r1, r3, #2
 8001332:	17d3      	asrs	r3, r2, #31
 8001334:	1ac9      	subs	r1, r1, r3
 8001336:	460b      	mov	r3, r1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b21b      	sxth	r3, r3
 8001342:	1ac3      	subs	r3, r0, r3
 8001344:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <main+0x780>)
 8001346:	fb82 1203 	smull	r1, r2, r2, r3
 800134a:	1092      	asrs	r2, r2, #2
 800134c:	17db      	asrs	r3, r3, #31
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3330      	adds	r3, #48	; 0x30
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <main+0x774>)
 8001358:	72da      	strb	r2, [r3, #11]
			napis1[12] = '0' + y_e % 10;
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <main+0x778>)
 800135c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <main+0x780>)
 8001362:	fb83 1302 	smull	r1, r3, r3, r2
 8001366:	1099      	asrs	r1, r3, #2
 8001368:	17d3      	asrs	r3, r2, #31
 800136a:	1ac9      	subs	r1, r1, r3
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b21b      	sxth	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	3330      	adds	r3, #48	; 0x30
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <main+0x774>)
 8001380:	731a      	strb	r2, [r3, #12]

			//predkosc
			if (v_e >= 0)
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <main+0x784>)
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db27      	blt.n	80013dc <main+0x78c>
				napis3[4] = '+';
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <main+0x788>)
 800138e:	222b      	movs	r2, #43	; 0x2b
 8001390:	711a      	strb	r2, [r3, #4]
 8001392:	e026      	b.n	80013e2 <main+0x792>
 8001394:	20000284 	.word	0x20000284
 8001398:	2000028e 	.word	0x2000028e
 800139c:	cccccccd 	.word	0xcccccccd
 80013a0:	20000288 	.word	0x20000288
 80013a4:	20000318 	.word	0x20000318
 80013a8:	40240000 	.word	0x40240000
 80013ac:	2000028a 	.word	0x2000028a
 80013b0:	20000010 	.word	0x20000010
 80013b4:	20000298 	.word	0x20000298
 80013b8:	408f4000 	.word	0x408f4000
 80013bc:	2000028c 	.word	0x2000028c
 80013c0:	20000370 	.word	0x20000370
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000312 	.word	0x20000312
 80013cc:	51eb851f 	.word	0x51eb851f
 80013d0:	66666667 	.word	0x66666667
 80013d4:	20000310 	.word	0x20000310
 80013d8:	20000020 	.word	0x20000020
			else
				napis3[4] = '-';
 80013dc:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <main+0x9a8>)
 80013de:	222d      	movs	r2, #45	; 0x2d
 80013e0:	711a      	strb	r2, [r3, #4]
			v_e = abs(v_e);
 80013e2:	4b86      	ldr	r3, [pc, #536]	; (80015fc <main+0x9ac>)
 80013e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bfb8      	it	lt
 80013ec:	425b      	neglt	r3, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <main+0x9ac>)
 80013f4:	801a      	strh	r2, [r3, #0]
			napis3[5] = '0' + (v_e - v_e % 100) / 100;
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <main+0x9ac>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	4618      	mov	r0, r3
 80013fe:	4b7f      	ldr	r3, [pc, #508]	; (80015fc <main+0x9ac>)
 8001400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001404:	4a7e      	ldr	r2, [pc, #504]	; (8001600 <main+0x9b0>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1151      	asrs	r1, r2, #5
 800140c:	17da      	asrs	r2, r3, #31
 800140e:	1a8a      	subs	r2, r1, r2
 8001410:	2164      	movs	r1, #100	; 0x64
 8001412:	fb01 f202 	mul.w	r2, r1, r2
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	1ac3      	subs	r3, r0, r3
 800141c:	4a78      	ldr	r2, [pc, #480]	; (8001600 <main+0x9b0>)
 800141e:	fb82 1203 	smull	r1, r2, r2, r3
 8001422:	1152      	asrs	r2, r2, #5
 8001424:	17db      	asrs	r3, r3, #31
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3330      	adds	r3, #48	; 0x30
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <main+0x9a8>)
 8001430:	715a      	strb	r2, [r3, #5]
			napis3[6] = '0' + (v_e % 100 - v_e % 10) / 10;
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <main+0x9ac>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	4a71      	ldr	r2, [pc, #452]	; (8001600 <main+0x9b0>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	1151      	asrs	r1, r2, #5
 8001440:	17da      	asrs	r2, r3, #31
 8001442:	1a8a      	subs	r2, r1, r2
 8001444:	2164      	movs	r1, #100	; 0x64
 8001446:	fb01 f202 	mul.w	r2, r1, r2
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	b21b      	sxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <main+0x9ac>)
 8001452:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001456:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <main+0x9b4>)
 8001458:	fb83 1302 	smull	r1, r3, r3, r2
 800145c:	1099      	asrs	r1, r3, #2
 800145e:	17d3      	asrs	r3, r2, #31
 8001460:	1ac9      	subs	r1, r1, r3
 8001462:	460b      	mov	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b21b      	sxth	r3, r3
 800146e:	1ac3      	subs	r3, r0, r3
 8001470:	4a64      	ldr	r2, [pc, #400]	; (8001604 <main+0x9b4>)
 8001472:	fb82 1203 	smull	r1, r2, r2, r3
 8001476:	1092      	asrs	r2, r2, #2
 8001478:	17db      	asrs	r3, r3, #31
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	3330      	adds	r3, #48	; 0x30
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <main+0x9a8>)
 8001484:	719a      	strb	r2, [r3, #6]
			napis3[8] = '0' + v_e % 10;
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <main+0x9ac>)
 8001488:	f9b3 2000 	ldrsh.w	r2, [r3]
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <main+0x9b4>)
 800148e:	fb83 1302 	smull	r1, r3, r3, r2
 8001492:	1099      	asrs	r1, r3, #2
 8001494:	17d3      	asrs	r3, r2, #31
 8001496:	1ac9      	subs	r1, r1, r3
 8001498:	460b      	mov	r3, r1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3330      	adds	r3, #48	; 0x30
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <main+0x9a8>)
 80014ac:	721a      	strb	r2, [r3, #8]

			//rotacja
			napis2[5] = '0' + (rot_e - rot_e % 1000) / 1000;
 80014ae:	4b56      	ldr	r3, [pc, #344]	; (8001608 <main+0x9b8>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	4618      	mov	r0, r3
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <main+0x9b8>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	4a53      	ldr	r2, [pc, #332]	; (800160c <main+0x9bc>)
 80014be:	fb82 1203 	smull	r1, r2, r2, r3
 80014c2:	1191      	asrs	r1, r2, #6
 80014c4:	17da      	asrs	r2, r3, #31
 80014c6:	1a8a      	subs	r2, r1, r2
 80014c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014cc:	fb01 f202 	mul.w	r2, r1, r2
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	1ac3      	subs	r3, r0, r3
 80014d6:	4a4d      	ldr	r2, [pc, #308]	; (800160c <main+0x9bc>)
 80014d8:	fb82 1203 	smull	r1, r2, r2, r3
 80014dc:	1192      	asrs	r2, r2, #6
 80014de:	17db      	asrs	r3, r3, #31
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3330      	adds	r3, #48	; 0x30
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b49      	ldr	r3, [pc, #292]	; (8001610 <main+0x9c0>)
 80014ea:	715a      	strb	r2, [r3, #5]
			napis2[6] = '0' + (rot_e % 1000 - rot_e % 100) / 100;
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <main+0x9b8>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	4a46      	ldr	r2, [pc, #280]	; (800160c <main+0x9bc>)
 80014f4:	fb82 1203 	smull	r1, r2, r2, r3
 80014f8:	1191      	asrs	r1, r2, #6
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	1a8a      	subs	r2, r1, r2
 80014fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001502:	fb01 f202 	mul.w	r2, r1, r2
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <main+0x9b8>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <main+0x9b0>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	1151      	asrs	r1, r2, #5
 800151a:	17da      	asrs	r2, r3, #31
 800151c:	1a8a      	subs	r2, r1, r2
 800151e:	2164      	movs	r1, #100	; 0x64
 8001520:	fb01 f202 	mul.w	r2, r1, r2
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	1ac3      	subs	r3, r0, r3
 800152a:	4a35      	ldr	r2, [pc, #212]	; (8001600 <main+0x9b0>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1152      	asrs	r2, r2, #5
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3330      	adds	r3, #48	; 0x30
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b34      	ldr	r3, [pc, #208]	; (8001610 <main+0x9c0>)
 800153e:	719a      	strb	r2, [r3, #6]
			napis2[7] = '0' + (rot_e % 100 - rot_e % 10) / 10;
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <main+0x9b8>)
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <main+0x9b0>)
 8001548:	fb82 1203 	smull	r1, r2, r2, r3
 800154c:	1151      	asrs	r1, r2, #5
 800154e:	17da      	asrs	r2, r3, #31
 8001550:	1a8a      	subs	r2, r1, r2
 8001552:	2164      	movs	r1, #100	; 0x64
 8001554:	fb01 f202 	mul.w	r2, r1, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b21b      	sxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <main+0x9b8>)
 8001560:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <main+0x9b4>)
 8001566:	fb83 1302 	smull	r1, r3, r3, r2
 800156a:	1099      	asrs	r1, r3, #2
 800156c:	17d3      	asrs	r3, r2, #31
 800156e:	1ac9      	subs	r1, r1, r3
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b21b      	sxth	r3, r3
 800157c:	1ac3      	subs	r3, r0, r3
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <main+0x9b4>)
 8001580:	fb82 1203 	smull	r1, r2, r2, r3
 8001584:	1092      	asrs	r2, r2, #2
 8001586:	17db      	asrs	r3, r3, #31
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	3330      	adds	r3, #48	; 0x30
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <main+0x9c0>)
 8001592:	71da      	strb	r2, [r3, #7]
			napis2[9] = '0' + rot_e % 10;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <main+0x9b8>)
 8001596:	f9b3 2000 	ldrsh.w	r2, [r3]
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <main+0x9b4>)
 800159c:	fb83 1302 	smull	r1, r3, r3, r2
 80015a0:	1099      	asrs	r1, r3, #2
 80015a2:	17d3      	asrs	r3, r2, #31
 80015a4:	1ac9      	subs	r1, r1, r3
 80015a6:	460b      	mov	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3330      	adds	r3, #48	; 0x30
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <main+0x9c0>)
 80015ba:	725a      	strb	r2, [r3, #9]

			//predkosc katowa
			if (ang_e == 0) {
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <main+0x9c4>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <main+0x996>
				napis4[3] = '+';
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <main+0x9c8>)
 80015c8:	222b      	movs	r2, #43	; 0x2b
 80015ca:	70da      	strb	r2, [r3, #3]
				napis4[4] = '0';
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <main+0x9c8>)
 80015ce:	2230      	movs	r2, #48	; 0x30
 80015d0:	711a      	strb	r2, [r3, #4]
				napis4[6] = '0';
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <main+0x9c8>)
 80015d4:	2230      	movs	r2, #48	; 0x30
 80015d6:	719a      	strb	r2, [r3, #6]
				napis4[7] = '0';
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <main+0x9c8>)
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	71da      	strb	r2, [r3, #7]
				napis4[8] = '0';
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <main+0x9c8>)
 80015e0:	2230      	movs	r2, #48	; 0x30
 80015e2:	721a      	strb	r2, [r3, #8]
 80015e4:	e083      	b.n	80016ee <main+0xa9e>
			} else {
				if (ang_e >= 0)
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <main+0x9c4>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db15      	blt.n	800161c <main+0x9cc>
					napis4[3] = '+';
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <main+0x9c8>)
 80015f2:	222b      	movs	r2, #43	; 0x2b
 80015f4:	70da      	strb	r2, [r3, #3]
 80015f6:	e014      	b.n	8001622 <main+0x9d2>
 80015f8:	20000020 	.word	0x20000020
 80015fc:	20000310 	.word	0x20000310
 8001600:	51eb851f 	.word	0x51eb851f
 8001604:	66666667 	.word	0x66666667
 8001608:	2000028a 	.word	0x2000028a
 800160c:	10624dd3 	.word	0x10624dd3
 8001610:	20000010 	.word	0x20000010
 8001614:	2000028c 	.word	0x2000028c
 8001618:	20000030 	.word	0x20000030
				else
					napis4[3] = '-';
 800161c:	4b77      	ldr	r3, [pc, #476]	; (80017fc <main+0xbac>)
 800161e:	222d      	movs	r2, #45	; 0x2d
 8001620:	70da      	strb	r2, [r3, #3]
				ang_e = abs(ang_e);
 8001622:	4b77      	ldr	r3, [pc, #476]	; (8001800 <main+0xbb0>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	bfb8      	it	lt
 800162c:	425b      	neglt	r3, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b73      	ldr	r3, [pc, #460]	; (8001800 <main+0xbb0>)
 8001634:	801a      	strh	r2, [r3, #0]
				napis4[6] = '0' + (ang_e - ang_e % 100) / 100;
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <main+0xbb0>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	4618      	mov	r0, r3
 800163e:	4b70      	ldr	r3, [pc, #448]	; (8001800 <main+0xbb0>)
 8001640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001644:	4a6f      	ldr	r2, [pc, #444]	; (8001804 <main+0xbb4>)
 8001646:	fb82 1203 	smull	r1, r2, r2, r3
 800164a:	1151      	asrs	r1, r2, #5
 800164c:	17da      	asrs	r2, r3, #31
 800164e:	1a8a      	subs	r2, r1, r2
 8001650:	2164      	movs	r1, #100	; 0x64
 8001652:	fb01 f202 	mul.w	r2, r1, r2
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	1ac3      	subs	r3, r0, r3
 800165c:	4a69      	ldr	r2, [pc, #420]	; (8001804 <main+0xbb4>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1152      	asrs	r2, r2, #5
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3330      	adds	r3, #48	; 0x30
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <main+0xbac>)
 8001670:	719a      	strb	r2, [r3, #6]
				napis4[7] = '0' + (ang_e % 100 - ang_e % 10) / 10;
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <main+0xbb0>)
 8001674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001678:	4a62      	ldr	r2, [pc, #392]	; (8001804 <main+0xbb4>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1151      	asrs	r1, r2, #5
 8001680:	17da      	asrs	r2, r3, #31
 8001682:	1a8a      	subs	r2, r1, r2
 8001684:	2164      	movs	r1, #100	; 0x64
 8001686:	fb01 f202 	mul.w	r2, r1, r2
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <main+0xbb0>)
 8001692:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <main+0xbb8>)
 8001698:	fb83 1302 	smull	r1, r3, r3, r2
 800169c:	1099      	asrs	r1, r3, #2
 800169e:	17d3      	asrs	r3, r2, #31
 80016a0:	1ac9      	subs	r1, r1, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	1ac3      	subs	r3, r0, r3
 80016b0:	4a55      	ldr	r2, [pc, #340]	; (8001808 <main+0xbb8>)
 80016b2:	fb82 1203 	smull	r1, r2, r2, r3
 80016b6:	1092      	asrs	r2, r2, #2
 80016b8:	17db      	asrs	r3, r3, #31
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3330      	adds	r3, #48	; 0x30
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <main+0xbac>)
 80016c4:	71da      	strb	r2, [r3, #7]
				napis4[8] = '0' + ang_e % 10;
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <main+0xbb0>)
 80016c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016cc:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <main+0xbb8>)
 80016ce:	fb83 1302 	smull	r1, r3, r3, r2
 80016d2:	1099      	asrs	r1, r3, #2
 80016d4:	17d3      	asrs	r3, r2, #31
 80016d6:	1ac9      	subs	r1, r1, r3
 80016d8:	460b      	mov	r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3330      	adds	r3, #48	; 0x30
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <main+0xbac>)
 80016ec:	721a      	strb	r2, [r3, #8]
			}
			//czas
			napis5[8] = '0' + sec % 10;
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <main+0xbbc>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <main+0xbc0>)
 80016f4:	fba3 1302 	umull	r1, r3, r3, r2
 80016f8:	08d9      	lsrs	r1, r3, #3
 80016fa:	460b      	mov	r3, r1
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	b29b      	uxth	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3330      	adds	r3, #48	; 0x30
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b41      	ldr	r3, [pc, #260]	; (8001814 <main+0xbc4>)
 800170e:	721a      	strb	r2, [r3, #8]
			napis5[7] = '0' + (sec % 100 - sec % 10) / 10;
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <main+0xbbc>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <main+0xbb4>)
 8001716:	fba2 1203 	umull	r1, r2, r2, r3
 800171a:	0952      	lsrs	r2, r2, #5
 800171c:	2164      	movs	r1, #100	; 0x64
 800171e:	fb01 f202 	mul.w	r2, r1, r2
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <main+0xbbc>)
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	4b38      	ldr	r3, [pc, #224]	; (8001810 <main+0xbc0>)
 800172e:	fba3 1302 	umull	r1, r3, r3, r2
 8001732:	08d9      	lsrs	r1, r3, #3
 8001734:	460b      	mov	r3, r1
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	1ac3      	subs	r3, r0, r3
 8001742:	4a31      	ldr	r2, [pc, #196]	; (8001808 <main+0xbb8>)
 8001744:	fb82 1203 	smull	r1, r2, r2, r3
 8001748:	1092      	asrs	r2, r2, #2
 800174a:	17db      	asrs	r3, r3, #31
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3330      	adds	r3, #48	; 0x30
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <main+0xbc4>)
 8001756:	71da      	strb	r2, [r3, #7]
			napis5[6] = '0' + (sec - sec % 100) / 100;
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <main+0xbbc>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <main+0xbbc>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <main+0xbb4>)
 8001764:	fba2 1203 	umull	r1, r2, r2, r3
 8001768:	0952      	lsrs	r2, r2, #5
 800176a:	2164      	movs	r1, #100	; 0x64
 800176c:	fb01 f202 	mul.w	r2, r1, r2
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	1ac3      	subs	r3, r0, r3
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <main+0xbb4>)
 8001778:	fb82 1203 	smull	r1, r2, r2, r3
 800177c:	1152      	asrs	r2, r2, #5
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3330      	adds	r3, #48	; 0x30
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <main+0xbc4>)
 800178a:	719a      	strb	r2, [r3, #6]
			napis5[10] = '0' + milsec;
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <main+0xbc8>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3330      	adds	r3, #48	; 0x30
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <main+0xbc4>)
 8001798:	729a      	strb	r2, [r3, #10]

			lcd_clear();
 800179a:	f7ff f995 	bl	8000ac8 <lcd_clear>
			lcd_draw_text(0, 0, napis1);
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <main+0xbcc>)
 80017a0:	2100      	movs	r1, #0
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff f99c 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(1, 0, napis2);
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <main+0xbd0>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff f997 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(2, 0, napis3);
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <main+0xbd4>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff f992 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(3, 0, napis4);
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <main+0xbac>)
 80017be:	2100      	movs	r1, #0
 80017c0:	2003      	movs	r0, #3
 80017c2:	f7ff f98d 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(4, 0, napis5);
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <main+0xbc4>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	2004      	movs	r0, #4
 80017cc:	f7ff f988 	bl	8000ae0 <lcd_draw_text>
			lcd_copy();
 80017d0:	f7ff f9ce 	bl	8000b70 <lcd_copy>
			last_state_1 = pulse_count_1;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <main+0xbd8>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <main+0xbdc>)
 80017de:	801a      	strh	r2, [r3, #0]
			last_state_2 = pulse_count_2;
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <main+0xbe0>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <main+0xbe4>)
 80017ea:	801a      	strh	r2, [r3, #0]
			D_last = D;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <main+0xbe8>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	4912      	ldr	r1, [pc, #72]	; (800183c <main+0xbec>)
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80017f8:	f7ff ba7c 	b.w	8000cf4 <main+0xa4>
 80017fc:	20000030 	.word	0x20000030
 8001800:	2000028c 	.word	0x2000028c
 8001804:	51eb851f 	.word	0x51eb851f
 8001808:	66666667 	.word	0x66666667
 800180c:	20000288 	.word	0x20000288
 8001810:	cccccccd 	.word	0xcccccccd
 8001814:	20000040 	.word	0x20000040
 8001818:	2000028e 	.word	0x2000028e
 800181c:	20000000 	.word	0x20000000
 8001820:	20000010 	.word	0x20000010
 8001824:	20000020 	.word	0x20000020
 8001828:	20000420 	.word	0x20000420
 800182c:	200002a0 	.word	0x200002a0
 8001830:	200004b8 	.word	0x200004b8
 8001834:	200002a2 	.word	0x200002a2
 8001838:	20000300 	.word	0x20000300
 800183c:	200003b0 	.word	0x200003b0

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	2228      	movs	r2, #40	; 0x28
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fbd0 	bl	8004ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001870:	2302      	movs	r3, #2
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001874:	2301      	movs	r3, #1
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	2310      	movs	r3, #16
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800187c:	2300      	movs	r3, #0
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001884:	4618      	mov	r0, r3
 8001886:	f001 faf1 	bl	8002e6c <HAL_RCC_OscConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001890:	f000 fa6a 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001894:	230f      	movs	r3, #15
 8001896:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fd5c 	bl	800336c <HAL_RCC_ClockConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80018ba:	f000 fa55 	bl	8001d68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018be:	2302      	movs	r3, #2
 80018c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fee9 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018d4:	f000 fa48 	bl	8001d68 <Error_Handler>
  }
}
 80018d8:	bf00      	nop
 80018da:	3750      	adds	r7, #80	; 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_ADC1_Init+0x74>)
 80018f2:	4a19      	ldr	r2, [pc, #100]	; (8001958 <MX_ADC1_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_ADC1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_ADC1_Init+0x74>)
 80018fe:	2201      	movs	r2, #1
 8001900:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_ADC1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_ADC1_Init+0x74>)
 800190a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800190e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_ADC1_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_ADC1_Init+0x74>)
 8001918:	2201      	movs	r2, #1
 800191a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_ADC1_Init+0x74>)
 800191e:	f000 fcab 	bl	8002278 <HAL_ADC_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 fa1e 	bl	8001d68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800192c:	2304      	movs	r3, #4
 800192e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001930:	2301      	movs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001934:	2302      	movs	r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_ADC1_Init+0x74>)
 800193e:	f000 fe2d 	bl	800259c <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001948:	f000 fa0e 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000378 	.word	0x20000378
 8001958:	40012400 	.word	0x40012400

0800195c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <MX_SPI2_Init+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800196c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_SPI2_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001990:	2210      	movs	r2, #16
 8001992:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SPI2_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_SPI2_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SPI2_Init+0x64>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_SPI2_Init+0x64>)
 80019ae:	f001 ff2d 	bl	800380c <HAL_SPI_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019b8:	f000 f9d6 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200002a4 	.word	0x200002a4
 80019c4:	40003800 	.word	0x40003800

080019c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fb0c 	bl	8004ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <MX_TIM1_Init+0xa8>)
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <MX_TIM1_Init+0xac>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <MX_TIM1_Init+0xa8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <MX_TIM1_Init+0xa8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <MX_TIM1_Init+0xa8>)
 80019f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <MX_TIM1_Init+0xa8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_TIM1_Init+0xa8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_TIM1_Init+0xa8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a10:	2303      	movs	r3, #3
 8001a12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a20:	230f      	movs	r3, #15
 8001a22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a30:	230f      	movs	r3, #15
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480d      	ldr	r0, [pc, #52]	; (8001a70 <MX_TIM1_Init+0xa8>)
 8001a3c:	f002 fae8 	bl	8004010 <HAL_TIM_Encoder_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a46:	f000 f98f 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_TIM1_Init+0xa8>)
 8001a58:	f003 f95c 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a62:	f000 f981 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3730      	adds	r7, #48	; 0x30
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003d8 	.word	0x200003d8
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fab4 	bl	8004ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001abc:	2303      	movs	r3, #3
 8001abe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001acc:	230f      	movs	r3, #15
 8001ace:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001adc:	230f      	movs	r3, #15
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001ae8:	f002 fa92 	bl	8004010 <HAL_TIM_Encoder_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001af2:	f000 f939 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001b04:	f003 f906 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b0e:	f000 f92b 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000424 	.word	0x20000424

08001b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b52:	4a2e      	ldr	r2, [pc, #184]	; (8001c0c <MX_TIM3_Init+0xec>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001b56:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b58:	f240 321f 	movw	r2, #799	; 0x31f
 8001b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b78:	4823      	ldr	r0, [pc, #140]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b7a:	f002 f8ad 	bl	8003cd8 <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b84:	f000 f8f0 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	4619      	mov	r1, r3
 8001b94:	481c      	ldr	r0, [pc, #112]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b96:	f002 fd31 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ba0:	f000 f8e2 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ba4:	4818      	ldr	r0, [pc, #96]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001ba6:	f002 f939 	bl	8003e1c <HAL_TIM_PWM_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001bb0:	f000 f8da 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4811      	ldr	r0, [pc, #68]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001bc4:	f003 f8a6 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bce:	f000 f8cb 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd2:	2360      	movs	r3, #96	; 0x60
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2204      	movs	r2, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001bea:	f002 fc49 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bf4:	f000 f8b8 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001bfa:	f000 fa05 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8001bfe:	bf00      	nop
 8001c00:	3738      	adds	r7, #56	; 0x38
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000328 	.word	0x20000328
 8001c0c:	40000400 	.word	0x40000400

08001c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <MX_USART2_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c48:	f003 f8d4 	bl	8004df4 <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c52:	f000 f889 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000046c 	.word	0x2000046c
 8001c60:	40004400 	.word	0x40004400

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001c7e:	f043 0310 	orr.w	r3, r3, #16
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001c96:	f043 0320 	orr.w	r3, r3, #32
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MX_GPIO_Init+0xf4>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	214e      	movs	r1, #78	; 0x4e
 8001cdc:	481f      	ldr	r0, [pc, #124]	; (8001d5c <MX_GPIO_Init+0xf8>)
 8001cde:	f001 f88a 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	481e      	ldr	r0, [pc, #120]	; (8001d60 <MX_GPIO_Init+0xfc>)
 8001ce8:	f001 f885 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_GPIO_Init+0x100>)
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4816      	ldr	r0, [pc, #88]	; (8001d5c <MX_GPIO_Init+0xf8>)
 8001d02:	f000 fedd 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8001d06:	234e      	movs	r3, #78	; 0x4e
 8001d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480f      	ldr	r0, [pc, #60]	; (8001d5c <MX_GPIO_Init+0xf8>)
 8001d1e:	f000 fecf 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d22:	2320      	movs	r3, #32
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4619      	mov	r1, r3
 8001d38:	4809      	ldr	r0, [pc, #36]	; (8001d60 <MX_GPIO_Init+0xfc>)
 8001d3a:	f000 fec1 	bl	8002ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2028      	movs	r0, #40	; 0x28
 8001d44:	f000 fe85 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d48:	2028      	movs	r0, #40	; 0x28
 8001d4a:	f000 fe9e 	bl	8002a8a <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	10110000 	.word	0x10110000

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d70:	e7fe      	b.n	8001d70 <Error_Handler+0x8>
	...

08001d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_MspInit+0x5c>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <HAL_MspInit+0x5c>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6193      	str	r3, [r2, #24]
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_MspInit+0x5c>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_MspInit+0x5c>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_MspInit+0x5c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_MspInit+0x5c>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_MspInit+0x60>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_MspInit+0x60>)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_ADC_MspInit+0x6c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d121      	bne.n	8001e3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_ADC_MspInit+0x70>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_ADC_MspInit+0x70>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_ADC_MspInit+0x70>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_ADC_MspInit+0x70>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <HAL_ADC_MspInit+0x70>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_ADC_MspInit+0x70>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e28:	2310      	movs	r3, #16
 8001e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <HAL_ADC_MspInit+0x74>)
 8001e38:	f000 fe42 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40012400 	.word	0x40012400
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010800 	.word	0x40010800

08001e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_SPI_MspInit+0x8c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d131      	bne.n	8001ed4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_SPI_MspInit+0x90>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_SPI_MspInit+0x90>)
 8001e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7a:	61d3      	str	r3, [r2, #28]
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_SPI_MspInit+0x90>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_SPI_MspInit+0x90>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_SPI_MspInit+0x90>)
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_SPI_MspInit+0x90>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ea0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <HAL_SPI_MspInit+0x94>)
 8001eb6:	f000 fe03 	bl	8002ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <HAL_SPI_MspInit+0x94>)
 8001ed0:	f000 fdf6 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40003800 	.word	0x40003800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010c00 	.word	0x40010c00

08001ee8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d125      	bne.n	8001f54 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0318 	add.w	r3, r7, #24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481a      	ldr	r0, [pc, #104]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001f4e:	f000 fdb7 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f52:	e028      	b.n	8001fa6 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d123      	bne.n	8001fa6 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0318 	add.w	r3, r7, #24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001fa2:	f000 fd8d 	bl	8002ac0 <HAL_GPIO_Init>
}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010800 	.word	0x40010800

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_TIM_Base_MspInit+0x44>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_TIM_Base_MspInit+0x48>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <HAL_TIM_Base_MspInit+0x48>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0x48>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	201d      	movs	r0, #29
 8001fec:	f000 fd31 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ff0:	201d      	movs	r0, #29
 8001ff2:	f000 fd4a 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40000400 	.word	0x40000400
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_TIM_MspPostInit+0x58>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d117      	bne.n	8002058 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_TIM_MspPostInit+0x5c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_TIM_MspPostInit+0x5c>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_TIM_MspPostInit+0x5c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2302      	movs	r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_TIM_MspPostInit+0x60>)
 8002054:	f000 fd34 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40000400 	.word	0x40000400
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x70>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d123      	bne.n	80020d4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_UART_MspInit+0x74>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_UART_MspInit+0x74>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002096:	61d3      	str	r3, [r2, #28]
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_UART_MspInit+0x74>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_UART_MspInit+0x74>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_UART_MspInit+0x74>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_UART_MspInit+0x74>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020bc:	230c      	movs	r3, #12
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <HAL_UART_MspInit+0x78>)
 80020d0:	f000 fcf6 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40004400 	.word	0x40004400
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010800 	.word	0x40010800

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <NMI_Handler+0x4>

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler+0x4>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <MemManage_Handler+0x4>

080020fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <UsageFault_Handler+0x4>

08002106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212e:	f000 f887 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM3_IRQHandler+0x10>)
 800213e:	f002 f897 	bl	8004270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000328 	.word	0x20000328

0800214c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002150:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002154:	f000 fe68 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002168:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800216a:	e003      	b.n	8002174 <LoopCopyDataInit>

0800216c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800216e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002170:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002172:	3104      	adds	r1, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002174:	480a      	ldr	r0, [pc, #40]	; (80021a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002178:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800217c:	d3f6      	bcc.n	800216c <CopyDataInit>
  ldr r2, =_sbss
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002180:	e002      	b.n	8002188 <LoopFillZerobss>

08002182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002184:	f842 3b04 	str.w	r3, [r2], #4

08002188 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800218a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800218c:	d3f9      	bcc.n	8002182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800218e:	f7ff ffe5 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f002 ff0b 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002196:	f7fe fd5b 	bl	8000c50 <main>
  bx lr
 800219a:	4770      	bx	lr
  ldr r3, =_sidata
 800219c:	080064d8 	.word	0x080064d8
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80021a8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80021ac:	200004d4 	.word	0x200004d4

080021b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_Init+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_Init+0x28>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 fc39 	bl	8002a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fdd0 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fc51 	bl	8002aa6 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 fc19 	bl	8002a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000060 	.word	0x20000060
 8002238:	20000068 	.word	0x20000068
 800223c:	20000064 	.word	0x20000064

08002240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_IncTick+0x1c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_IncTick+0x20>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_IncTick+0x20>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000068 	.word	0x20000068
 8002260:	200004d0 	.word	0x200004d0

08002264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <HAL_GetTick+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	200004d0 	.word	0x200004d0

08002278 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0be      	b.n	8002418 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fd8e 	bl	8001dd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fab7 	bl	8002830 <ADC_ConversionStop_Disable>
 80022c2:	4603      	mov	r3, r0
 80022c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8099 	bne.w	8002406 <HAL_ADC_Init+0x18e>
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 8095 	bne.w	8002406 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e4:	f023 0302 	bic.w	r3, r3, #2
 80022e8:	f043 0202 	orr.w	r2, r3, #2
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7b1b      	ldrb	r3, [r3, #12]
 80022fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002300:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4313      	orrs	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002310:	d003      	beq.n	800231a <HAL_ADC_Init+0xa2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_ADC_Init+0xa8>
 800231a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231e:	e000      	b.n	8002322 <HAL_ADC_Init+0xaa>
 8002320:	2300      	movs	r3, #0
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7d1b      	ldrb	r3, [r3, #20]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d119      	bne.n	8002364 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7b1b      	ldrb	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	3b01      	subs	r3, #1
 800233e:	035a      	lsls	r2, r3, #13
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e00b      	b.n	8002364 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_ADC_Init+0x1a8>)
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	430b      	orrs	r3, r1
 800238a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	d003      	beq.n	800239e <HAL_ADC_Init+0x126>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d104      	bne.n	80023a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_ADC_Init+0x1ac>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10b      	bne.n	80023e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023e2:	e018      	b.n	8002416 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f023 0312 	bic.w	r3, r3, #18
 80023ec:	f043 0210 	orr.w	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002404:	e007      	b.n	8002416 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	ffe1f7fd 	.word	0xffe1f7fd
 8002424:	ff1f0efe 	.word	0xff1f0efe

08002428 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Start+0x1a>
 800243e:	2302      	movs	r3, #2
 8002440:	e098      	b.n	8002574 <HAL_ADC_Start+0x14c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f99e 	bl	800278c <ADC_Enable>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 8087 	bne.w	800256a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a41      	ldr	r2, [pc, #260]	; (800257c <HAL_ADC_Start+0x154>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d105      	bne.n	8002486 <HAL_ADC_Start+0x5e>
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_ADC_Start+0x158>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d026      	beq.n	80024ee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024b0:	e01d      	b.n	80024ee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_ADC_Start+0x158>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_ADC_Start+0xaa>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_ADC_Start+0x154>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10d      	bne.n	80024ee <HAL_ADC_Start+0xc6>
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_ADC_Start+0x158>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f023 0206 	bic.w	r2, r3, #6
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
 8002506:	e002      	b.n	800250e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f06f 0202 	mvn.w	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800252a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800252e:	d113      	bne.n	8002558 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002534:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_ADC_Start+0x154>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d105      	bne.n	8002546 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_ADC_Start+0x158>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	e00c      	b.n	8002572 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	e003      	b.n	8002572 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40012800 	.word	0x40012800
 8002580:	40012400 	.word	0x40012400

08002584 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0dc      	b.n	8002776 <HAL_ADC_ConfigChannel+0x1da>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d81c      	bhi.n	8002606 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b05      	subs	r3, #5
 80025de:	221f      	movs	r2, #31
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4019      	ands	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b05      	subs	r3, #5
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
 8002604:	e03c      	b.n	8002680 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d81c      	bhi.n	8002648 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b23      	subs	r3, #35	; 0x23
 8002620:	221f      	movs	r2, #31
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	4019      	ands	r1, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b23      	subs	r3, #35	; 0x23
 800263a:	fa00 f203 	lsl.w	r2, r0, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
 8002646:	e01b      	b.n	8002680 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b41      	subs	r3, #65	; 0x41
 800265a:	221f      	movs	r2, #31
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b41      	subs	r3, #65	; 0x41
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d91c      	bls.n	80026c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	3b1e      	subs	r3, #30
 800269a:	2207      	movs	r2, #7
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4019      	ands	r1, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6898      	ldr	r0, [r3, #8]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	3b1e      	subs	r3, #30
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	e019      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	2207      	movs	r2, #7
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	4019      	ands	r1, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6898      	ldr	r0, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	fa00 f203 	lsl.w	r2, r0, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d003      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002702:	2b11      	cmp	r3, #17
 8002704:	d132      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_ADC_ConfigChannel+0x1e4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d125      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d126      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800272c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b10      	cmp	r3, #16
 8002734:	d11a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_ADC_ConfigChannel+0x1e8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_ADC_ConfigChannel+0x1ec>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0c9a      	lsrs	r2, r3, #18
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800274c:	e002      	b.n	8002754 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f9      	bne.n	800274e <HAL_ADC_ConfigChannel+0x1b2>
 800275a:	e007      	b.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012400 	.word	0x40012400
 8002784:	20000060 	.word	0x20000060
 8002788:	431bde83 	.word	0x431bde83

0800278c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d039      	beq.n	800281e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <ADC_Enable+0x9c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1b      	ldr	r2, [pc, #108]	; (800282c <ADC_Enable+0xa0>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	0c9b      	lsrs	r3, r3, #18
 80027c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027c8:	e002      	b.n	80027d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f9      	bne.n	80027ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027d6:	f7ff fd45 	bl	8002264 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027dc:	e018      	b.n	8002810 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027de:	f7ff fd41 	bl	8002264 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d911      	bls.n	8002810 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e007      	b.n	8002820 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d1df      	bne.n	80027de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000060 	.word	0x20000060
 800282c:	431bde83 	.word	0x431bde83

08002830 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d127      	bne.n	800289a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800285a:	f7ff fd03 	bl	8002264 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002860:	e014      	b.n	800288c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002862:	f7ff fcff 	bl	8002264 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d90d      	bls.n	800288c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f043 0210 	orr.w	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d0e3      	beq.n	8002862 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4906      	ldr	r1, [pc, #24]	; (800293c <__NVIC_EnableIRQ+0x34>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	; (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
         );
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a08:	d301      	bcc.n	8002a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00f      	b.n	8002a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <SysTick_Config+0x40>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a16:	210f      	movs	r1, #15
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7ff ff90 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <SysTick_Config+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <SysTick_Config+0x40>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff2d 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a64:	f7ff ff42 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f7ff ff90 	bl	8002994 <NVIC_EncodePriority>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff5f 	bl	8002940 <__NVIC_SetPriority>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff35 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffa2 	bl	80029f8 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b08b      	sub	sp, #44	; 0x2c
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	e169      	b.n	8002da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8158 	bne.w	8002da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a9a      	ldr	r2, [pc, #616]	; (8002d60 <HAL_GPIO_Init+0x2a0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d05e      	beq.n	8002bba <HAL_GPIO_Init+0xfa>
 8002afc:	4a98      	ldr	r2, [pc, #608]	; (8002d60 <HAL_GPIO_Init+0x2a0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d875      	bhi.n	8002bee <HAL_GPIO_Init+0x12e>
 8002b02:	4a98      	ldr	r2, [pc, #608]	; (8002d64 <HAL_GPIO_Init+0x2a4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d058      	beq.n	8002bba <HAL_GPIO_Init+0xfa>
 8002b08:	4a96      	ldr	r2, [pc, #600]	; (8002d64 <HAL_GPIO_Init+0x2a4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d86f      	bhi.n	8002bee <HAL_GPIO_Init+0x12e>
 8002b0e:	4a96      	ldr	r2, [pc, #600]	; (8002d68 <HAL_GPIO_Init+0x2a8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d052      	beq.n	8002bba <HAL_GPIO_Init+0xfa>
 8002b14:	4a94      	ldr	r2, [pc, #592]	; (8002d68 <HAL_GPIO_Init+0x2a8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d869      	bhi.n	8002bee <HAL_GPIO_Init+0x12e>
 8002b1a:	4a94      	ldr	r2, [pc, #592]	; (8002d6c <HAL_GPIO_Init+0x2ac>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d04c      	beq.n	8002bba <HAL_GPIO_Init+0xfa>
 8002b20:	4a92      	ldr	r2, [pc, #584]	; (8002d6c <HAL_GPIO_Init+0x2ac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d863      	bhi.n	8002bee <HAL_GPIO_Init+0x12e>
 8002b26:	4a92      	ldr	r2, [pc, #584]	; (8002d70 <HAL_GPIO_Init+0x2b0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d046      	beq.n	8002bba <HAL_GPIO_Init+0xfa>
 8002b2c:	4a90      	ldr	r2, [pc, #576]	; (8002d70 <HAL_GPIO_Init+0x2b0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d85d      	bhi.n	8002bee <HAL_GPIO_Init+0x12e>
 8002b32:	2b12      	cmp	r3, #18
 8002b34:	d82a      	bhi.n	8002b8c <HAL_GPIO_Init+0xcc>
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d859      	bhi.n	8002bee <HAL_GPIO_Init+0x12e>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <HAL_GPIO_Init+0x80>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002bbb 	.word	0x08002bbb
 8002b44:	08002b95 	.word	0x08002b95
 8002b48:	08002ba7 	.word	0x08002ba7
 8002b4c:	08002be9 	.word	0x08002be9
 8002b50:	08002bef 	.word	0x08002bef
 8002b54:	08002bef 	.word	0x08002bef
 8002b58:	08002bef 	.word	0x08002bef
 8002b5c:	08002bef 	.word	0x08002bef
 8002b60:	08002bef 	.word	0x08002bef
 8002b64:	08002bef 	.word	0x08002bef
 8002b68:	08002bef 	.word	0x08002bef
 8002b6c:	08002bef 	.word	0x08002bef
 8002b70:	08002bef 	.word	0x08002bef
 8002b74:	08002bef 	.word	0x08002bef
 8002b78:	08002bef 	.word	0x08002bef
 8002b7c:	08002bef 	.word	0x08002bef
 8002b80:	08002bef 	.word	0x08002bef
 8002b84:	08002b9d 	.word	0x08002b9d
 8002b88:	08002bb1 	.word	0x08002bb1
 8002b8c:	4a79      	ldr	r2, [pc, #484]	; (8002d74 <HAL_GPIO_Init+0x2b4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b92:	e02c      	b.n	8002bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	623b      	str	r3, [r7, #32]
          break;
 8002b9a:	e029      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	623b      	str	r3, [r7, #32]
          break;
 8002ba4:	e024      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	3308      	adds	r3, #8
 8002bac:	623b      	str	r3, [r7, #32]
          break;
 8002bae:	e01f      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	623b      	str	r3, [r7, #32]
          break;
 8002bb8:	e01a      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	623b      	str	r3, [r7, #32]
          break;
 8002bc6:	e013      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	611a      	str	r2, [r3, #16]
          break;
 8002bda:	e009      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bdc:	2308      	movs	r3, #8
 8002bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	615a      	str	r2, [r3, #20]
          break;
 8002be6:	e003      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002be8:	2300      	movs	r3, #0
 8002bea:	623b      	str	r3, [r7, #32]
          break;
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x130>
          break;
 8002bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	d801      	bhi.n	8002bfa <HAL_GPIO_Init+0x13a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	e001      	b.n	8002bfe <HAL_GPIO_Init+0x13e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d802      	bhi.n	8002c0c <HAL_GPIO_Init+0x14c>
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	e002      	b.n	8002c12 <HAL_GPIO_Init+0x152>
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	3b08      	subs	r3, #8
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	210f      	movs	r1, #15
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	6a39      	ldr	r1, [r7, #32]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80b1 	beq.w	8002da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <HAL_GPIO_Init+0x2b8>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	4a4c      	ldr	r2, [pc, #304]	; (8002d78 <HAL_GPIO_Init+0x2b8>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6193      	str	r3, [r2, #24]
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_GPIO_Init+0x2b8>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c58:	4a48      	ldr	r2, [pc, #288]	; (8002d7c <HAL_GPIO_Init+0x2bc>)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a40      	ldr	r2, [pc, #256]	; (8002d80 <HAL_GPIO_Init+0x2c0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_GPIO_Init+0x1ec>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3f      	ldr	r2, [pc, #252]	; (8002d84 <HAL_GPIO_Init+0x2c4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_GPIO_Init+0x1e8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3e      	ldr	r2, [pc, #248]	; (8002d88 <HAL_GPIO_Init+0x2c8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <HAL_GPIO_Init+0x1e4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3d      	ldr	r2, [pc, #244]	; (8002d8c <HAL_GPIO_Init+0x2cc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <HAL_GPIO_Init+0x1e0>
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_Init+0x1ee>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	e004      	b.n	8002cae <HAL_GPIO_Init+0x1ee>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e002      	b.n	8002cae <HAL_GPIO_Init+0x1ee>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_GPIO_Init+0x1ee>
 8002cac:	2300      	movs	r3, #0
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	f002 0203 	and.w	r2, r2, #3
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cbe:	492f      	ldr	r1, [pc, #188]	; (8002d7c <HAL_GPIO_Init+0x2bc>)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	492c      	ldr	r1, [pc, #176]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	4928      	ldr	r1, [pc, #160]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4922      	ldr	r1, [pc, #136]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	491e      	ldr	r1, [pc, #120]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4918      	ldr	r1, [pc, #96]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	4914      	ldr	r1, [pc, #80]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d021      	beq.n	8002d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	490e      	ldr	r1, [pc, #56]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	e021      	b.n	8002da2 <HAL_GPIO_Init+0x2e2>
 8002d5e:	bf00      	nop
 8002d60:	10320000 	.word	0x10320000
 8002d64:	10310000 	.word	0x10310000
 8002d68:	10220000 	.word	0x10220000
 8002d6c:	10210000 	.word	0x10210000
 8002d70:	10120000 	.word	0x10120000
 8002d74:	10110000 	.word	0x10110000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40010800 	.word	0x40010800
 8002d84:	40010c00 	.word	0x40010c00
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	40011400 	.word	0x40011400
 8002d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	4909      	ldr	r1, [pc, #36]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	3301      	adds	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f ae8e 	bne.w	8002ad4 <HAL_GPIO_Init+0x14>
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	372c      	adds	r7, #44	; 0x2c
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e001      	b.n	8002dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	807b      	strh	r3, [r7, #2]
 8002e02:	4613      	mov	r3, r2
 8002e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e06:	787b      	ldrb	r3, [r7, #1]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e12:	e003      	b.n	8002e1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	041a      	lsls	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	611a      	str	r2, [r3, #16]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f806 	bl	8002e58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40010400 	.word	0x40010400

08002e58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e26c      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8087 	beq.w	8002f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e8c:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d00c      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e98:	4b8f      	ldr	r3, [pc, #572]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d112      	bne.n	8002eca <HAL_RCC_OscConfig+0x5e>
 8002ea4:	4b8c      	ldr	r3, [pc, #560]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d10b      	bne.n	8002eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb2:	4b89      	ldr	r3, [pc, #548]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x12c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d168      	bne.n	8002f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e246      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x76>
 8002ed4:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7f      	ldr	r2, [pc, #508]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e02e      	b.n	8002f40 <HAL_RCC_OscConfig+0xd4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b78      	ldr	r3, [pc, #480]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a77      	ldr	r2, [pc, #476]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xd4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0xbc>
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a71      	ldr	r2, [pc, #452]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6e      	ldr	r2, [pc, #440]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xd4>
 8002f28:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a67      	ldr	r2, [pc, #412]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff f98c 	bl	8002264 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7ff f988 	bl	8002264 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1fa      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe4>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff f978 	bl	8002264 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7ff f974 	bl	8002264 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1e6      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x10c>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb2:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x18c>
 8002fbe:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d116      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x176>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e1ba      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4939      	ldr	r1, [pc, #228]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	e03a      	b.n	800306e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7ff f92d 	bl	8002264 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7ff f929 	bl	8002264 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e19b      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4927      	ldr	r1, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]
 8003040:	e015      	b.n	800306e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff f90c 	bl	8002264 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7ff f908 	bl	8002264 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e17a      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d03a      	beq.n	80030f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d019      	beq.n	80030b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_RCC_OscConfig+0x274>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7ff f8ec 	bl	8002264 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7ff f8e8 	bl	8002264 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e15a      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ae:	2001      	movs	r0, #1
 80030b0:	f000 fad8 	bl	8003664 <RCC_Delay>
 80030b4:	e01c      	b.n	80030f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_OscConfig+0x274>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7ff f8d2 	bl	8002264 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	e00f      	b.n	80030e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7ff f8ce 	bl	8002264 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d908      	bls.n	80030e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e140      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	42420000 	.word	0x42420000
 80030e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b9e      	ldr	r3, [pc, #632]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e9      	bne.n	80030c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a6 	beq.w	800324a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b97      	ldr	r3, [pc, #604]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b94      	ldr	r3, [pc, #592]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a93      	ldr	r2, [pc, #588]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	61d3      	str	r3, [r2, #28]
 800311a:	4b91      	ldr	r3, [pc, #580]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b8e      	ldr	r3, [pc, #568]	; (8003364 <HAL_RCC_OscConfig+0x4f8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003136:	4b8b      	ldr	r3, [pc, #556]	; (8003364 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a8a      	ldr	r2, [pc, #552]	; (8003364 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7ff f88f 	bl	8002264 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7ff f88b 	bl	8002264 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0fd      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b81      	ldr	r3, [pc, #516]	; (8003364 <HAL_RCC_OscConfig+0x4f8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x312>
 8003170:	4b7b      	ldr	r3, [pc, #492]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a7a      	ldr	r2, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e02d      	b.n	80031da <HAL_RCC_OscConfig+0x36e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x334>
 8003186:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a75      	ldr	r2, [pc, #468]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4a72      	ldr	r2, [pc, #456]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x36e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x356>
 80031a8:	4b6d      	ldr	r3, [pc, #436]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a6c      	ldr	r2, [pc, #432]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a69      	ldr	r2, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x36e>
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a66      	ldr	r2, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b64      	ldr	r3, [pc, #400]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7ff f83f 	bl	8002264 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7ff f83b 	bl	8002264 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0ab      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x37e>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7ff f829 	bl	8002264 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7ff f825 	bl	8002264 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e095      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b48      	ldr	r3, [pc, #288]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a47      	ldr	r2, [pc, #284]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8081 	beq.w	8003356 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003254:	4b42      	ldr	r3, [pc, #264]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d061      	beq.n	8003324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d146      	bne.n	80032f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_OscConfig+0x4fc>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fe fff9 	bl	8002264 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe fff5 	bl	8002264 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e067      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	4b35      	ldr	r3, [pc, #212]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d108      	bne.n	80032b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	492d      	ldr	r1, [pc, #180]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a19      	ldr	r1, [r3, #32]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	430b      	orrs	r3, r1
 80032c2:	4927      	ldr	r1, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_RCC_OscConfig+0x4fc>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe ffc9 	bl	8002264 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe ffc5 	bl	8002264 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e037      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x46a>
 80032f4:	e02f      	b.n	8003356 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_RCC_OscConfig+0x4fc>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe ffb2 	bl	8002264 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe ffae 	bl	8002264 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e020      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x498>
 8003322:	e018      	b.n	8003356 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e013      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	42420060 	.word	0x42420060

0800336c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0d0      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d910      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b67      	ldr	r3, [pc, #412]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4965      	ldr	r1, [pc, #404]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b8      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a52      	ldr	r2, [pc, #328]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	494d      	ldr	r1, [pc, #308]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d040      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d115      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e073      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e06b      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4936      	ldr	r1, [pc, #216]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fe ff02 	bl	8002264 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe fefe 	bl	8002264 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e053      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d210      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 0207 	bic.w	r2, r3, #7
 80034a2:	4922      	ldr	r1, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e032      	b.n	8003522 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4916      	ldr	r1, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	490e      	ldr	r1, [pc, #56]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034fa:	f000 f821 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80034fe:	4602      	mov	r2, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	490a      	ldr	r1, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	5ccb      	ldrb	r3, [r1, r3]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1cc>)
 8003514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1d0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fe60 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40022000 	.word	0x40022000
 8003530:	40021000 	.word	0x40021000
 8003534:	080062dc 	.word	0x080062dc
 8003538:	20000060 	.word	0x20000060
 800353c:	20000064 	.word	0x20000064

08003540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	b490      	push	{r4, r7}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003548:	1d3c      	adds	r4, r7, #4
 800354a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800354c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003550:	f240 2301 	movw	r3, #513	; 0x201
 8003554:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b04      	cmp	r3, #4
 8003578:	d002      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x40>
 800357a:	2b08      	cmp	r3, #8
 800357c:	d003      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x46>
 800357e:	e02d      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003582:	623b      	str	r3, [r7, #32]
      break;
 8003584:	e02d      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	0c9b      	lsrs	r3, r3, #18
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003592:	4413      	add	r3, r2
 8003594:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003598:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0c5b      	lsrs	r3, r3, #17
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035b2:	4413      	add	r3, r2
 80035b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035be:	fb02 f203 	mul.w	r2, r2, r3
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e004      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	623b      	str	r3, [r7, #32]
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035de:	623b      	str	r3, [r7, #32]
      break;
 80035e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e2:	6a3b      	ldr	r3, [r7, #32]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	; 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc90      	pop	{r4, r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	080060ec 	.word	0x080060ec
 80035f4:	40021000 	.word	0x40021000
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	003d0900 	.word	0x003d0900

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b02      	ldr	r3, [pc, #8]	; (8003610 <HAL_RCC_GetHCLKFreq+0x10>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	20000060 	.word	0x20000060

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff2 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	080062ec 	.word	0x080062ec

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003640:	f7ff ffde 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	080062ec 	.word	0x080062ec

08003664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <RCC_Delay+0x34>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <RCC_Delay+0x38>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	0a5b      	lsrs	r3, r3, #9
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003680:	bf00      	nop
  }
  while (Delay --);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1e5a      	subs	r2, r3, #1
 8003686:	60fa      	str	r2, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f9      	bne.n	8003680 <RCC_Delay+0x1c>
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	20000060 	.word	0x20000060
 800369c:	10624dd3 	.word	0x10624dd3

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d07d      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036bc:	2300      	movs	r3, #0
 80036be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c0:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10d      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036cc:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	4a4b      	ldr	r2, [pc, #300]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d6:	61d3      	str	r3, [r2, #28]
 80036d8:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	4b46      	ldr	r3, [pc, #280]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d118      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f4:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a42      	ldr	r2, [pc, #264]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003700:	f7fe fdb0 	bl	8002264 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	e008      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003708:	f7fe fdac 	bl	8002264 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e06d      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02e      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d027      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003744:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800374e:	4b2e      	ldr	r3, [pc, #184]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003754:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800375a:	4a29      	ldr	r2, [pc, #164]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d014      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7fe fd7b 	bl	8002264 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fe fd77 	bl	8002264 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e036      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ee      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4917      	ldr	r1, [pc, #92]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	490b      	ldr	r1, [pc, #44]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	42420440 	.word	0x42420440

0800380c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e076      	b.n	800390c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382e:	d009      	beq.n	8003844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
 8003836:	e005      	b.n	8003844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe faf6 	bl	8001e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	0c1a      	lsrs	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f002 0204 	and.w	r2, r2, #4
 80038ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_SPI_Transmit+0x22>
 8003932:	2302      	movs	r3, #2
 8003934:	e126      	b.n	8003b84 <HAL_SPI_Transmit+0x270>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800393e:	f7fe fc91 	bl	8002264 <HAL_GetTick>
 8003942:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d002      	beq.n	800395a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003954:	2302      	movs	r3, #2
 8003956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003958:	e10b      	b.n	8003b72 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_SPI_Transmit+0x52>
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800396a:	e102      	b.n	8003b72 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2203      	movs	r2, #3
 8003970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b2:	d10f      	bne.n	80039d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d007      	beq.n	80039f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fa:	d14b      	bne.n	8003a94 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_Transmit+0xf6>
 8003a04:	8afb      	ldrh	r3, [r7, #22]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d13e      	bne.n	8003a88 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a2e:	e02b      	b.n	8003a88 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d112      	bne.n	8003a64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	1c9a      	adds	r2, r3, #2
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a62:	e011      	b.n	8003a88 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a64:	f7fe fbfe 	bl	8002264 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d803      	bhi.n	8003a7c <HAL_SPI_Transmit+0x168>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_Transmit+0x16e>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a86:	e074      	b.n	8003b72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ce      	bne.n	8003a30 <HAL_SPI_Transmit+0x11c>
 8003a92:	e04c      	b.n	8003b2e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_SPI_Transmit+0x18e>
 8003a9c:	8afb      	ldrh	r3, [r7, #22]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d140      	bne.n	8003b24 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ac8:	e02c      	b.n	8003b24 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d113      	bne.n	8003b00 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003afe:	e011      	b.n	8003b24 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b00:	f7fe fbb0 	bl	8002264 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d803      	bhi.n	8003b18 <HAL_SPI_Transmit+0x204>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d102      	bne.n	8003b1e <HAL_SPI_Transmit+0x20a>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b22:	e026      	b.n	8003b72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1cd      	bne.n	8003aca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	6839      	ldr	r1, [r7, #0]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f8b2 	bl	8003c9c <SPI_EndRxTxTransaction>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e000      	b.n	8003b72 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b9c:	f7fe fb62 	bl	8002264 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bac:	f7fe fb5a 	bl	8002264 <HAL_GetTick>
 8003bb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	015b      	lsls	r3, r3, #5
 8003bb8:	0d1b      	lsrs	r3, r3, #20
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bc2:	e054      	b.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d050      	beq.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bcc:	f7fe fb4a 	bl	8002264 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d902      	bls.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d13d      	bne.n	8003c5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfa:	d111      	bne.n	8003c20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	d004      	beq.n	8003c10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d107      	bne.n	8003c20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c28:	d10f      	bne.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e017      	b.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d19b      	bne.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000060 	.word	0x20000060

08003c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff ff6a 	bl	8003b8c <SPI_WaitFlagStateUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e000      	b.n	8003cd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e041      	b.n	8003d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fe f95c 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fd58 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e03a      	b.n	8003e06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIM_Base_Start_IT+0x98>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_TIM_Base_Start_IT+0xa0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d010      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e007      	b.n	8003e04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e041      	b.n	8003eb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f839 	bl	8003eba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 fcb6 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_TIM_PWM_Start+0x24>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e022      	b.n	8003f36 <HAL_TIM_PWM_Start+0x6a>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d109      	bne.n	8003f0a <HAL_TIM_PWM_Start+0x3e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e015      	b.n	8003f36 <HAL_TIM_PWM_Start+0x6a>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_PWM_Start+0x58>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e008      	b.n	8003f36 <HAL_TIM_PWM_Start+0x6a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e05e      	b.n	8003ffc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x82>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4c:	e013      	b.n	8003f76 <HAL_TIM_PWM_Start+0xaa>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Start+0x92>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_PWM_Start+0xaa>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_PWM_Start+0xa2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f6c:	e003      	b.n	8003f76 <HAL_TIM_PWM_Start+0xaa>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fea4 	bl	8004ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <HAL_TIM_PWM_Start+0x138>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_PWM_Start+0x138>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0xfa>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d009      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0xfa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <HAL_TIM_PWM_Start+0x13c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0xfa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <HAL_TIM_PWM_Start+0x140>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d111      	bne.n	8003fea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b06      	cmp	r3, #6
 8003fd6:	d010      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	e007      	b.n	8003ffa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800

08004010 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e093      	b.n	800414c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fd ff55 	bl	8001ee8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 fbb1 	bl	80047cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	4313      	orrs	r3, r2
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80040b0:	f023 030c 	bic.w	r3, r3, #12
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	4313      	orrs	r3, r2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	011a      	lsls	r2, r3, #4
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	031b      	lsls	r3, r3, #12
 80040e0:	4313      	orrs	r3, r2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4313      	orrs	r3, r2
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800416c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004174:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800417c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d102      	bne.n	8004190 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800418a:	7b7b      	ldrb	r3, [r7, #13]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d001      	beq.n	8004194 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e069      	b.n	8004268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a4:	e031      	b.n	800420a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d110      	bne.n	80041ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d102      	bne.n	80041b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041b2:	7b3b      	ldrb	r3, [r7, #12]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d001      	beq.n	80041bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e055      	b.n	8004268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041cc:	e01d      	b.n	800420a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d108      	bne.n	80041e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	7b7b      	ldrb	r3, [r7, #13]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041e0:	7b3b      	ldrb	r3, [r7, #12]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03e      	b.n	8004268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_TIM_Encoder_Start+0xc4>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d008      	beq.n	8004228 <HAL_TIM_Encoder_Start+0xd4>
 8004216:	e00f      	b.n	8004238 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fd53 	bl	8004ccc <TIM_CCxChannelCmd>
      break;
 8004226:	e016      	b.n	8004256 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2201      	movs	r2, #1
 800422e:	2104      	movs	r1, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fd4b 	bl	8004ccc <TIM_CCxChannelCmd>
      break;
 8004236:	e00e      	b.n	8004256 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fd43 	bl	8004ccc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2201      	movs	r2, #1
 800424c:	2104      	movs	r1, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fd3c 	bl	8004ccc <TIM_CCxChannelCmd>
      break;
 8004254:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0202 	mvn.w	r2, #2
 800429c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa6f 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa62 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa71 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0204 	mvn.w	r2, #4
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa45 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fa38 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fa47 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0208 	mvn.w	r2, #8
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa1b 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa0e 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fa1d 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b10      	cmp	r3, #16
 8004380:	d122      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d11b      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0210 	mvn.w	r2, #16
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2208      	movs	r2, #8
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9f1 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f9e4 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f9f3 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0201 	mvn.w	r2, #1
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fbe2 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fce1 	bl	8004de2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9b7 	bl	80047ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b20      	cmp	r3, #32
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0220 	mvn.w	r2, #32
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fcac 	bl	8004dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004496:	2302      	movs	r3, #2
 8004498:	e0ac      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b0c      	cmp	r3, #12
 80044a6:	f200 809f 	bhi.w	80045e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080045e9 	.word	0x080045e9
 80044b8:	080045e9 	.word	0x080045e9
 80044bc:	080045e9 	.word	0x080045e9
 80044c0:	08004525 	.word	0x08004525
 80044c4:	080045e9 	.word	0x080045e9
 80044c8:	080045e9 	.word	0x080045e9
 80044cc:	080045e9 	.word	0x080045e9
 80044d0:	08004567 	.word	0x08004567
 80044d4:	080045e9 	.word	0x080045e9
 80044d8:	080045e9 	.word	0x080045e9
 80044dc:	080045e9 	.word	0x080045e9
 80044e0:	080045a7 	.word	0x080045a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f9d0 	bl	8004890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	619a      	str	r2, [r3, #24]
      break;
 8004522:	e062      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa16 	bl	800495c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6999      	ldr	r1, [r3, #24]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	619a      	str	r2, [r3, #24]
      break;
 8004564:	e041      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa5f 	bl	8004a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0208 	orr.w	r2, r2, #8
 8004580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0204 	bic.w	r2, r2, #4
 8004590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	61da      	str	r2, [r3, #28]
      break;
 80045a4:	e021      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 faa9 	bl	8004b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69d9      	ldr	r1, [r3, #28]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	61da      	str	r2, [r3, #28]
      break;
 80045e6:	e000      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80045e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIM_ConfigClockSource+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e0b3      	b.n	800477c <HAL_TIM_ConfigClockSource+0x180>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d03e      	beq.n	80046cc <HAL_TIM_ConfigClockSource+0xd0>
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	f200 8087 	bhi.w	8004764 <HAL_TIM_ConfigClockSource+0x168>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	f000 8085 	beq.w	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004662:	d87f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 8004664:	2b70      	cmp	r3, #112	; 0x70
 8004666:	d01a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0xa2>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d87b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 800466c:	2b60      	cmp	r3, #96	; 0x60
 800466e:	d050      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x116>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d877      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 8004674:	2b50      	cmp	r3, #80	; 0x50
 8004676:	d03c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d873      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d058      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x136>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d86f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d064      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x156>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d86b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d060      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x156>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d867      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x156>
 8004698:	2b10      	cmp	r3, #16
 800469a:	d05a      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800469c:	e062      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f000 faee 	bl	8004c8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	609a      	str	r2, [r3, #8]
      break;
 80046ca:	e04e      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f000 fad7 	bl	8004c8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ee:	609a      	str	r2, [r3, #8]
      break;
 80046f0:	e03b      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 fa4e 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2150      	movs	r1, #80	; 0x50
 800470a:	4618      	mov	r0, r3
 800470c:	f000 faa5 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004710:	e02b      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	f000 fa6c 	bl	8004bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2160      	movs	r1, #96	; 0x60
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fa95 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004730:	e01b      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 fa2e 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2140      	movs	r1, #64	; 0x40
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fa85 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004750:	e00b      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f000 fa7c 	bl	8004c5a <TIM_ITRx_SetConfig>
        break;
 8004762:	e002      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004768:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a29      	ldr	r2, [pc, #164]	; (8004884 <TIM_Base_SetConfig+0xb8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a26      	ldr	r2, [pc, #152]	; (8004888 <TIM_Base_SetConfig+0xbc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0x30>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a25      	ldr	r2, [pc, #148]	; (800488c <TIM_Base_SetConfig+0xc0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <TIM_Base_SetConfig+0xb8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <TIM_Base_SetConfig+0xbc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <TIM_Base_SetConfig+0xc0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <TIM_Base_SetConfig+0xb8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800

08004890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <TIM_OC1_SetConfig+0xc8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10c      	bne.n	8004906 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0308 	bic.w	r3, r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a13      	ldr	r2, [pc, #76]	; (8004958 <TIM_OC1_SetConfig+0xc8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00

0800495c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0210 	bic.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0320 	bic.w	r3, r3, #32
 80049a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <TIM_OC2_SetConfig+0xd0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a14      	ldr	r2, [pc, #80]	; (8004a2c <TIM_OC2_SetConfig+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d113      	bne.n	8004a08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00

08004a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <TIM_OC3_SetConfig+0xd0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d10d      	bne.n	8004aaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <TIM_OC3_SetConfig+0xd0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d113      	bne.n	8004ada <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40012c00 	.word	0x40012c00

08004b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0f      	ldr	r2, [pc, #60]	; (8004b9c <TIM_OC4_SetConfig+0x98>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d109      	bne.n	8004b78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	40012c00 	.word	0x40012c00

08004ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 030a 	bic.w	r3, r3, #10
 8004bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f023 0210 	bic.w	r2, r3, #16
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	031b      	lsls	r3, r3, #12
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	621a      	str	r2, [r3, #32]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f043 0307 	orr.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	021a      	lsls	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	609a      	str	r2, [r3, #8]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2201      	movs	r2, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e046      	b.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d009      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10c      	bne.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800

08004dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e03f      	b.n	8004e86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd f926 	bl	800206c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f829 	bl	8004e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eca:	f023 030c 	bic.w	r3, r3, #12
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2c      	ldr	r2, [pc, #176]	; (8004fa4 <UART_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d103      	bne.n	8004f00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7fe fba0 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	e002      	b.n	8004f06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fe fb88 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8004f04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009a      	lsls	r2, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <UART_SetConfig+0x118>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	0119      	lsls	r1, r3, #4
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009a      	lsls	r2, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <UART_SetConfig+0x118>)
 8004f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2064      	movs	r0, #100	; 0x64
 8004f46:	fb00 f303 	mul.w	r3, r0, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	3332      	adds	r3, #50	; 0x32
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <UART_SetConfig+0x118>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f5c:	4419      	add	r1, r3
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009a      	lsls	r2, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <UART_SetConfig+0x118>)
 8004f76:	fba3 0302 	umull	r0, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2064      	movs	r0, #100	; 0x64
 8004f7e:	fb00 f303 	mul.w	r3, r0, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	3332      	adds	r3, #50	; 0x32
 8004f88:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <UART_SetConfig+0x118>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	440a      	add	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	51eb851f 	.word	0x51eb851f

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	2600      	movs	r6, #0
 8004fb0:	4d0c      	ldr	r5, [pc, #48]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb2:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb4:	1b64      	subs	r4, r4, r5
 8004fb6:	10a4      	asrs	r4, r4, #2
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	f001 f866 	bl	800608c <_init>
 8004fc0:	2600      	movs	r6, #0
 8004fc2:	4d0a      	ldr	r5, [pc, #40]	; (8004fec <__libc_init_array+0x40>)
 8004fc4:	4c0a      	ldr	r4, [pc, #40]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc6:	1b64      	subs	r4, r4, r5
 8004fc8:	10a4      	asrs	r4, r4, #2
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	080064d0 	.word	0x080064d0
 8004fe8:	080064d0 	.word	0x080064d0
 8004fec:	080064d0 	.word	0x080064d0
 8004ff0:	080064d4 	.word	0x080064d4

08004ff4 <memset>:
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4402      	add	r2, r0
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <memset+0xa>
 8004ffc:	4770      	bx	lr
 8004ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8005002:	e7f9      	b.n	8004ff8 <memset+0x4>

08005004 <cos>:
 8005004:	b530      	push	{r4, r5, lr}
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <cos+0x7c>)
 8005008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800500c:	4293      	cmp	r3, r2
 800500e:	b087      	sub	sp, #28
 8005010:	dc04      	bgt.n	800501c <cos+0x18>
 8005012:	2200      	movs	r2, #0
 8005014:	2300      	movs	r3, #0
 8005016:	f000 fa6f 	bl	80054f8 <__kernel_cos>
 800501a:	e006      	b.n	800502a <cos+0x26>
 800501c:	4a19      	ldr	r2, [pc, #100]	; (8005084 <cos+0x80>)
 800501e:	4293      	cmp	r3, r2
 8005020:	dd05      	ble.n	800502e <cos+0x2a>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	f7fb f897 	bl	8000158 <__aeabi_dsub>
 800502a:	b007      	add	sp, #28
 800502c:	bd30      	pop	{r4, r5, pc}
 800502e:	aa02      	add	r2, sp, #8
 8005030:	f000 f872 	bl	8005118 <__ieee754_rem_pio2>
 8005034:	f000 0003 	and.w	r0, r0, #3
 8005038:	2801      	cmp	r0, #1
 800503a:	d007      	beq.n	800504c <cos+0x48>
 800503c:	2802      	cmp	r0, #2
 800503e:	d00f      	beq.n	8005060 <cos+0x5c>
 8005040:	b9a8      	cbnz	r0, 800506e <cos+0x6a>
 8005042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504a:	e7e4      	b.n	8005016 <cos+0x12>
 800504c:	9000      	str	r0, [sp, #0]
 800504e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005056:	f000 fe57 	bl	8005d08 <__kernel_sin>
 800505a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800505e:	e7e4      	b.n	800502a <cos+0x26>
 8005060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005068:	f000 fa46 	bl	80054f8 <__kernel_cos>
 800506c:	e7f5      	b.n	800505a <cos+0x56>
 800506e:	2301      	movs	r3, #1
 8005070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507a:	f000 fe45 	bl	8005d08 <__kernel_sin>
 800507e:	e7d4      	b.n	800502a <cos+0x26>
 8005080:	3fe921fb 	.word	0x3fe921fb
 8005084:	7fefffff 	.word	0x7fefffff

08005088 <sin>:
 8005088:	b530      	push	{r4, r5, lr}
 800508a:	4a20      	ldr	r2, [pc, #128]	; (800510c <sin+0x84>)
 800508c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005090:	4293      	cmp	r3, r2
 8005092:	b087      	sub	sp, #28
 8005094:	dc06      	bgt.n	80050a4 <sin+0x1c>
 8005096:	2300      	movs	r3, #0
 8005098:	2200      	movs	r2, #0
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	f000 fe33 	bl	8005d08 <__kernel_sin>
 80050a2:	e006      	b.n	80050b2 <sin+0x2a>
 80050a4:	4a1a      	ldr	r2, [pc, #104]	; (8005110 <sin+0x88>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	dd05      	ble.n	80050b6 <sin+0x2e>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	f7fb f853 	bl	8000158 <__aeabi_dsub>
 80050b2:	b007      	add	sp, #28
 80050b4:	bd30      	pop	{r4, r5, pc}
 80050b6:	aa02      	add	r2, sp, #8
 80050b8:	f000 f82e 	bl	8005118 <__ieee754_rem_pio2>
 80050bc:	f000 0003 	and.w	r0, r0, #3
 80050c0:	2801      	cmp	r0, #1
 80050c2:	d009      	beq.n	80050d8 <sin+0x50>
 80050c4:	2802      	cmp	r0, #2
 80050c6:	d00e      	beq.n	80050e6 <sin+0x5e>
 80050c8:	b9c0      	cbnz	r0, 80050fc <sin+0x74>
 80050ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ce:	2301      	movs	r3, #1
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d6:	e7e2      	b.n	800509e <sin+0x16>
 80050d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e0:	f000 fa0a 	bl	80054f8 <__kernel_cos>
 80050e4:	e7e5      	b.n	80050b2 <sin+0x2a>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f2:	f000 fe09 	bl	8005d08 <__kernel_sin>
 80050f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80050fa:	e7da      	b.n	80050b2 <sin+0x2a>
 80050fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005104:	f000 f9f8 	bl	80054f8 <__kernel_cos>
 8005108:	e7f5      	b.n	80050f6 <sin+0x6e>
 800510a:	bf00      	nop
 800510c:	3fe921fb 	.word	0x3fe921fb
 8005110:	7fefffff 	.word	0x7fefffff
 8005114:	00000000 	.word	0x00000000

08005118 <__ieee754_rem_pio2>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	4614      	mov	r4, r2
 800511e:	4ac4      	ldr	r2, [pc, #784]	; (8005430 <__ieee754_rem_pio2+0x318>)
 8005120:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005124:	b08d      	sub	sp, #52	; 0x34
 8005126:	4592      	cmp	sl, r2
 8005128:	9104      	str	r1, [sp, #16]
 800512a:	dc07      	bgt.n	800513c <__ieee754_rem_pio2+0x24>
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	e9c4 0100 	strd	r0, r1, [r4]
 8005134:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005138:	2500      	movs	r5, #0
 800513a:	e024      	b.n	8005186 <__ieee754_rem_pio2+0x6e>
 800513c:	4abd      	ldr	r2, [pc, #756]	; (8005434 <__ieee754_rem_pio2+0x31c>)
 800513e:	4592      	cmp	sl, r2
 8005140:	dc72      	bgt.n	8005228 <__ieee754_rem_pio2+0x110>
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	4dbc      	ldr	r5, [pc, #752]	; (8005438 <__ieee754_rem_pio2+0x320>)
 8005146:	2b00      	cmp	r3, #0
 8005148:	a3ab      	add	r3, pc, #684	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	dd36      	ble.n	80051be <__ieee754_rem_pio2+0xa6>
 8005150:	f7fb f802 	bl	8000158 <__aeabi_dsub>
 8005154:	45aa      	cmp	sl, r5
 8005156:	4606      	mov	r6, r0
 8005158:	460f      	mov	r7, r1
 800515a:	d018      	beq.n	800518e <__ieee754_rem_pio2+0x76>
 800515c:	a3a8      	add	r3, pc, #672	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2e8>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fa fff9 	bl	8000158 <__aeabi_dsub>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4630      	mov	r0, r6
 800516c:	e9c4 2300 	strd	r2, r3, [r4]
 8005170:	4639      	mov	r1, r7
 8005172:	f7fa fff1 	bl	8000158 <__aeabi_dsub>
 8005176:	a3a2      	add	r3, pc, #648	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2e8>)
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f7fa ffec 	bl	8000158 <__aeabi_dsub>
 8005180:	2501      	movs	r5, #1
 8005182:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005186:	4628      	mov	r0, r5
 8005188:	b00d      	add	sp, #52	; 0x34
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	a39e      	add	r3, pc, #632	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f0>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fa ffe0 	bl	8000158 <__aeabi_dsub>
 8005198:	a39d      	add	r3, pc, #628	; (adr r3, 8005410 <__ieee754_rem_pio2+0x2f8>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	4606      	mov	r6, r0
 80051a0:	460f      	mov	r7, r1
 80051a2:	f7fa ffd9 	bl	8000158 <__aeabi_dsub>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4630      	mov	r0, r6
 80051ac:	e9c4 2300 	strd	r2, r3, [r4]
 80051b0:	4639      	mov	r1, r7
 80051b2:	f7fa ffd1 	bl	8000158 <__aeabi_dsub>
 80051b6:	a396      	add	r3, pc, #600	; (adr r3, 8005410 <__ieee754_rem_pio2+0x2f8>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	e7de      	b.n	800517c <__ieee754_rem_pio2+0x64>
 80051be:	f7fa ffcd 	bl	800015c <__adddf3>
 80051c2:	45aa      	cmp	sl, r5
 80051c4:	4606      	mov	r6, r0
 80051c6:	460f      	mov	r7, r1
 80051c8:	d016      	beq.n	80051f8 <__ieee754_rem_pio2+0xe0>
 80051ca:	a38d      	add	r3, pc, #564	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2e8>)
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f7fa ffc4 	bl	800015c <__adddf3>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4630      	mov	r0, r6
 80051da:	e9c4 2300 	strd	r2, r3, [r4]
 80051de:	4639      	mov	r1, r7
 80051e0:	f7fa ffba 	bl	8000158 <__aeabi_dsub>
 80051e4:	a386      	add	r3, pc, #536	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2e8>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fa ffb7 	bl	800015c <__adddf3>
 80051ee:	f04f 35ff 	mov.w	r5, #4294967295
 80051f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051f6:	e7c6      	b.n	8005186 <__ieee754_rem_pio2+0x6e>
 80051f8:	a383      	add	r3, pc, #524	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f0>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fa ffad 	bl	800015c <__adddf3>
 8005202:	a383      	add	r3, pc, #524	; (adr r3, 8005410 <__ieee754_rem_pio2+0x2f8>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	f7fa ffa6 	bl	800015c <__adddf3>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4630      	mov	r0, r6
 8005216:	e9c4 2300 	strd	r2, r3, [r4]
 800521a:	4639      	mov	r1, r7
 800521c:	f7fa ff9c 	bl	8000158 <__aeabi_dsub>
 8005220:	a37b      	add	r3, pc, #492	; (adr r3, 8005410 <__ieee754_rem_pio2+0x2f8>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	e7e0      	b.n	80051ea <__ieee754_rem_pio2+0xd2>
 8005228:	4a84      	ldr	r2, [pc, #528]	; (800543c <__ieee754_rem_pio2+0x324>)
 800522a:	4592      	cmp	sl, r2
 800522c:	f300 80d5 	bgt.w	80053da <__ieee754_rem_pio2+0x2c2>
 8005230:	f000 fe20 	bl	8005e74 <fabs>
 8005234:	a378      	add	r3, pc, #480	; (adr r3, 8005418 <__ieee754_rem_pio2+0x300>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	4606      	mov	r6, r0
 800523c:	460f      	mov	r7, r1
 800523e:	f7fb f943 	bl	80004c8 <__aeabi_dmul>
 8005242:	2200      	movs	r2, #0
 8005244:	4b7e      	ldr	r3, [pc, #504]	; (8005440 <__ieee754_rem_pio2+0x328>)
 8005246:	f7fa ff89 	bl	800015c <__adddf3>
 800524a:	f7fb fbd7 	bl	80009fc <__aeabi_d2iz>
 800524e:	4605      	mov	r5, r0
 8005250:	f7fb f8d0 	bl	80003f4 <__aeabi_i2d>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800525c:	a366      	add	r3, pc, #408	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e0>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f931 	bl	80004c8 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4630      	mov	r0, r6
 800526c:	4639      	mov	r1, r7
 800526e:	f7fa ff73 	bl	8000158 <__aeabi_dsub>
 8005272:	a363      	add	r3, pc, #396	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2e8>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	4680      	mov	r8, r0
 800527a:	4689      	mov	r9, r1
 800527c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005280:	f7fb f922 	bl	80004c8 <__aeabi_dmul>
 8005284:	2d1f      	cmp	r5, #31
 8005286:	4606      	mov	r6, r0
 8005288:	460f      	mov	r7, r1
 800528a:	dc0e      	bgt.n	80052aa <__ieee754_rem_pio2+0x192>
 800528c:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <__ieee754_rem_pio2+0x32c>)
 800528e:	1e6a      	subs	r2, r5, #1
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	4553      	cmp	r3, sl
 8005296:	d008      	beq.n	80052aa <__ieee754_rem_pio2+0x192>
 8005298:	4632      	mov	r2, r6
 800529a:	463b      	mov	r3, r7
 800529c:	4640      	mov	r0, r8
 800529e:	4649      	mov	r1, r9
 80052a0:	f7fa ff5a 	bl	8000158 <__aeabi_dsub>
 80052a4:	e9c4 0100 	strd	r0, r1, [r4]
 80052a8:	e013      	b.n	80052d2 <__ieee754_rem_pio2+0x1ba>
 80052aa:	463b      	mov	r3, r7
 80052ac:	4632      	mov	r2, r6
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fa ff51 	bl	8000158 <__aeabi_dsub>
 80052b6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052c0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80052c4:	f1ba 0f10 	cmp.w	sl, #16
 80052c8:	dc1f      	bgt.n	800530a <__ieee754_rem_pio2+0x1f2>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	e9c4 2300 	strd	r2, r3, [r4]
 80052d2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80052d6:	4640      	mov	r0, r8
 80052d8:	4653      	mov	r3, sl
 80052da:	4649      	mov	r1, r9
 80052dc:	f7fa ff3c 	bl	8000158 <__aeabi_dsub>
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	f7fa ff38 	bl	8000158 <__aeabi_dsub>
 80052e8:	460b      	mov	r3, r1
 80052ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052ee:	9904      	ldr	r1, [sp, #16]
 80052f0:	4602      	mov	r2, r0
 80052f2:	2900      	cmp	r1, #0
 80052f4:	f6bf af47 	bge.w	8005186 <__ieee754_rem_pio2+0x6e>
 80052f8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80052fc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005300:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005304:	60e3      	str	r3, [r4, #12]
 8005306:	426d      	negs	r5, r5
 8005308:	e73d      	b.n	8005186 <__ieee754_rem_pio2+0x6e>
 800530a:	a33f      	add	r3, pc, #252	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f0>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005314:	f7fb f8d8 	bl	80004c8 <__aeabi_dmul>
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4640      	mov	r0, r8
 8005322:	4649      	mov	r1, r9
 8005324:	f7fa ff18 	bl	8000158 <__aeabi_dsub>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4682      	mov	sl, r0
 800532e:	468b      	mov	fp, r1
 8005330:	4640      	mov	r0, r8
 8005332:	4649      	mov	r1, r9
 8005334:	f7fa ff10 	bl	8000158 <__aeabi_dsub>
 8005338:	4632      	mov	r2, r6
 800533a:	463b      	mov	r3, r7
 800533c:	f7fa ff0c 	bl	8000158 <__aeabi_dsub>
 8005340:	a333      	add	r3, pc, #204	; (adr r3, 8005410 <__ieee754_rem_pio2+0x2f8>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	4606      	mov	r6, r0
 8005348:	460f      	mov	r7, r1
 800534a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800534e:	f7fb f8bb 	bl	80004c8 <__aeabi_dmul>
 8005352:	4632      	mov	r2, r6
 8005354:	463b      	mov	r3, r7
 8005356:	f7fa feff 	bl	8000158 <__aeabi_dsub>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4606      	mov	r6, r0
 8005360:	460f      	mov	r7, r1
 8005362:	4650      	mov	r0, sl
 8005364:	4659      	mov	r1, fp
 8005366:	f7fa fef7 	bl	8000158 <__aeabi_dsub>
 800536a:	9a05      	ldr	r2, [sp, #20]
 800536c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b31      	cmp	r3, #49	; 0x31
 8005374:	dc06      	bgt.n	8005384 <__ieee754_rem_pio2+0x26c>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	46d0      	mov	r8, sl
 800537c:	46d9      	mov	r9, fp
 800537e:	e9c4 2300 	strd	r2, r3, [r4]
 8005382:	e7a6      	b.n	80052d2 <__ieee754_rem_pio2+0x1ba>
 8005384:	a326      	add	r3, pc, #152	; (adr r3, 8005420 <__ieee754_rem_pio2+0x308>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800538e:	f7fb f89b 	bl	80004c8 <__aeabi_dmul>
 8005392:	4606      	mov	r6, r0
 8005394:	460f      	mov	r7, r1
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4650      	mov	r0, sl
 800539c:	4659      	mov	r1, fp
 800539e:	f7fa fedb 	bl	8000158 <__aeabi_dsub>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4680      	mov	r8, r0
 80053a8:	4689      	mov	r9, r1
 80053aa:	4650      	mov	r0, sl
 80053ac:	4659      	mov	r1, fp
 80053ae:	f7fa fed3 	bl	8000158 <__aeabi_dsub>
 80053b2:	4632      	mov	r2, r6
 80053b4:	463b      	mov	r3, r7
 80053b6:	f7fa fecf 	bl	8000158 <__aeabi_dsub>
 80053ba:	a31b      	add	r3, pc, #108	; (adr r3, 8005428 <__ieee754_rem_pio2+0x310>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	4606      	mov	r6, r0
 80053c2:	460f      	mov	r7, r1
 80053c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c8:	f7fb f87e 	bl	80004c8 <__aeabi_dmul>
 80053cc:	4632      	mov	r2, r6
 80053ce:	463b      	mov	r3, r7
 80053d0:	f7fa fec2 	bl	8000158 <__aeabi_dsub>
 80053d4:	4606      	mov	r6, r0
 80053d6:	460f      	mov	r7, r1
 80053d8:	e75e      	b.n	8005298 <__ieee754_rem_pio2+0x180>
 80053da:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <__ieee754_rem_pio2+0x330>)
 80053dc:	4592      	cmp	sl, r2
 80053de:	dd35      	ble.n	800544c <__ieee754_rem_pio2+0x334>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	f7fa feb8 	bl	8000158 <__aeabi_dsub>
 80053e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053ec:	e9c4 0100 	strd	r0, r1, [r4]
 80053f0:	e6a2      	b.n	8005138 <__ieee754_rem_pio2+0x20>
 80053f2:	bf00      	nop
 80053f4:	f3af 8000 	nop.w
 80053f8:	54400000 	.word	0x54400000
 80053fc:	3ff921fb 	.word	0x3ff921fb
 8005400:	1a626331 	.word	0x1a626331
 8005404:	3dd0b461 	.word	0x3dd0b461
 8005408:	1a600000 	.word	0x1a600000
 800540c:	3dd0b461 	.word	0x3dd0b461
 8005410:	2e037073 	.word	0x2e037073
 8005414:	3ba3198a 	.word	0x3ba3198a
 8005418:	6dc9c883 	.word	0x6dc9c883
 800541c:	3fe45f30 	.word	0x3fe45f30
 8005420:	2e000000 	.word	0x2e000000
 8005424:	3ba3198a 	.word	0x3ba3198a
 8005428:	252049c1 	.word	0x252049c1
 800542c:	397b839a 	.word	0x397b839a
 8005430:	3fe921fb 	.word	0x3fe921fb
 8005434:	4002d97b 	.word	0x4002d97b
 8005438:	3ff921fb 	.word	0x3ff921fb
 800543c:	413921fb 	.word	0x413921fb
 8005440:	3fe00000 	.word	0x3fe00000
 8005444:	080062f4 	.word	0x080062f4
 8005448:	7fefffff 	.word	0x7fefffff
 800544c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005450:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005454:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005458:	460f      	mov	r7, r1
 800545a:	4606      	mov	r6, r0
 800545c:	f7fb face 	bl	80009fc <__aeabi_d2iz>
 8005460:	f7fa ffc8 	bl	80003f4 <__aeabi_i2d>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005470:	f7fa fe72 	bl	8000158 <__aeabi_dsub>
 8005474:	2200      	movs	r2, #0
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <__ieee754_rem_pio2+0x3d8>)
 8005478:	f7fb f826 	bl	80004c8 <__aeabi_dmul>
 800547c:	460f      	mov	r7, r1
 800547e:	4606      	mov	r6, r0
 8005480:	f7fb fabc 	bl	80009fc <__aeabi_d2iz>
 8005484:	f7fa ffb6 	bl	80003f4 <__aeabi_i2d>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005494:	f7fa fe60 	bl	8000158 <__aeabi_dsub>
 8005498:	2200      	movs	r2, #0
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <__ieee754_rem_pio2+0x3d8>)
 800549c:	f7fb f814 	bl	80004c8 <__aeabi_dmul>
 80054a0:	f04f 0803 	mov.w	r8, #3
 80054a4:	2600      	movs	r6, #0
 80054a6:	2700      	movs	r7, #0
 80054a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054ac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80054b0:	4632      	mov	r2, r6
 80054b2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80054b6:	463b      	mov	r3, r7
 80054b8:	46c2      	mov	sl, r8
 80054ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80054be:	f7fb fa6b 	bl	8000998 <__aeabi_dcmpeq>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1f4      	bne.n	80054b0 <__ieee754_rem_pio2+0x398>
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <__ieee754_rem_pio2+0x3dc>)
 80054c8:	462a      	mov	r2, r5
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	2302      	movs	r3, #2
 80054ce:	4621      	mov	r1, r4
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	a806      	add	r0, sp, #24
 80054d4:	4653      	mov	r3, sl
 80054d6:	f000 f8cd 	bl	8005674 <__kernel_rem_pio2>
 80054da:	9b04      	ldr	r3, [sp, #16]
 80054dc:	4605      	mov	r5, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f6bf ae51 	bge.w	8005186 <__ieee754_rem_pio2+0x6e>
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	68e3      	ldr	r3, [r4, #12]
 80054ee:	e707      	b.n	8005300 <__ieee754_rem_pio2+0x1e8>
 80054f0:	41700000 	.word	0x41700000
 80054f4:	08006374 	.word	0x08006374

080054f8 <__kernel_cos>:
 80054f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005500:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005504:	4680      	mov	r8, r0
 8005506:	460f      	mov	r7, r1
 8005508:	e9cd 2300 	strd	r2, r3, [sp]
 800550c:	da04      	bge.n	8005518 <__kernel_cos+0x20>
 800550e:	f7fb fa75 	bl	80009fc <__aeabi_d2iz>
 8005512:	2800      	cmp	r0, #0
 8005514:	f000 8086 	beq.w	8005624 <__kernel_cos+0x12c>
 8005518:	4642      	mov	r2, r8
 800551a:	463b      	mov	r3, r7
 800551c:	4640      	mov	r0, r8
 800551e:	4639      	mov	r1, r7
 8005520:	f7fa ffd2 	bl	80004c8 <__aeabi_dmul>
 8005524:	2200      	movs	r2, #0
 8005526:	4b4e      	ldr	r3, [pc, #312]	; (8005660 <__kernel_cos+0x168>)
 8005528:	4604      	mov	r4, r0
 800552a:	460d      	mov	r5, r1
 800552c:	f7fa ffcc 	bl	80004c8 <__aeabi_dmul>
 8005530:	a33f      	add	r3, pc, #252	; (adr r3, 8005630 <__kernel_cos+0x138>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	4682      	mov	sl, r0
 8005538:	468b      	mov	fp, r1
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa ffc3 	bl	80004c8 <__aeabi_dmul>
 8005542:	a33d      	add	r3, pc, #244	; (adr r3, 8005638 <__kernel_cos+0x140>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa fe08 	bl	800015c <__adddf3>
 800554c:	4622      	mov	r2, r4
 800554e:	462b      	mov	r3, r5
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	a33a      	add	r3, pc, #232	; (adr r3, 8005640 <__kernel_cos+0x148>)
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f7fa fdfd 	bl	8000158 <__aeabi_dsub>
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	f7fa ffb1 	bl	80004c8 <__aeabi_dmul>
 8005566:	a338      	add	r3, pc, #224	; (adr r3, 8005648 <__kernel_cos+0x150>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f7fa fdf6 	bl	800015c <__adddf3>
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	f7fa ffa8 	bl	80004c8 <__aeabi_dmul>
 8005578:	a335      	add	r3, pc, #212	; (adr r3, 8005650 <__kernel_cos+0x158>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa fdeb 	bl	8000158 <__aeabi_dsub>
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	f7fa ff9f 	bl	80004c8 <__aeabi_dmul>
 800558a:	a333      	add	r3, pc, #204	; (adr r3, 8005658 <__kernel_cos+0x160>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fde4 	bl	800015c <__adddf3>
 8005594:	4622      	mov	r2, r4
 8005596:	462b      	mov	r3, r5
 8005598:	f7fa ff96 	bl	80004c8 <__aeabi_dmul>
 800559c:	4622      	mov	r2, r4
 800559e:	462b      	mov	r3, r5
 80055a0:	f7fa ff92 	bl	80004c8 <__aeabi_dmul>
 80055a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	4640      	mov	r0, r8
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fa ff8a 	bl	80004c8 <__aeabi_dmul>
 80055b4:	460b      	mov	r3, r1
 80055b6:	4602      	mov	r2, r0
 80055b8:	4629      	mov	r1, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7fa fdcc 	bl	8000158 <__aeabi_dsub>
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <__kernel_cos+0x16c>)
 80055c2:	4680      	mov	r8, r0
 80055c4:	429e      	cmp	r6, r3
 80055c6:	4689      	mov	r9, r1
 80055c8:	dc0e      	bgt.n	80055e8 <__kernel_cos+0xf0>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4650      	mov	r0, sl
 80055d0:	4659      	mov	r1, fp
 80055d2:	f7fa fdc1 	bl	8000158 <__aeabi_dsub>
 80055d6:	4602      	mov	r2, r0
 80055d8:	2000      	movs	r0, #0
 80055da:	460b      	mov	r3, r1
 80055dc:	4922      	ldr	r1, [pc, #136]	; (8005668 <__kernel_cos+0x170>)
 80055de:	f7fa fdbb 	bl	8000158 <__aeabi_dsub>
 80055e2:	b003      	add	sp, #12
 80055e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e8:	2400      	movs	r4, #0
 80055ea:	4b20      	ldr	r3, [pc, #128]	; (800566c <__kernel_cos+0x174>)
 80055ec:	4622      	mov	r2, r4
 80055ee:	429e      	cmp	r6, r3
 80055f0:	bfcc      	ite	gt
 80055f2:	4d1f      	ldrgt	r5, [pc, #124]	; (8005670 <__kernel_cos+0x178>)
 80055f4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80055f8:	462b      	mov	r3, r5
 80055fa:	2000      	movs	r0, #0
 80055fc:	491a      	ldr	r1, [pc, #104]	; (8005668 <__kernel_cos+0x170>)
 80055fe:	f7fa fdab 	bl	8000158 <__aeabi_dsub>
 8005602:	4622      	mov	r2, r4
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	462b      	mov	r3, r5
 800560a:	4650      	mov	r0, sl
 800560c:	4659      	mov	r1, fp
 800560e:	f7fa fda3 	bl	8000158 <__aeabi_dsub>
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	f7fa fd9f 	bl	8000158 <__aeabi_dsub>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	e7dc      	b.n	80055de <__kernel_cos+0xe6>
 8005624:	2000      	movs	r0, #0
 8005626:	4910      	ldr	r1, [pc, #64]	; (8005668 <__kernel_cos+0x170>)
 8005628:	e7db      	b.n	80055e2 <__kernel_cos+0xea>
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w
 8005630:	be8838d4 	.word	0xbe8838d4
 8005634:	bda8fae9 	.word	0xbda8fae9
 8005638:	bdb4b1c4 	.word	0xbdb4b1c4
 800563c:	3e21ee9e 	.word	0x3e21ee9e
 8005640:	809c52ad 	.word	0x809c52ad
 8005644:	3e927e4f 	.word	0x3e927e4f
 8005648:	19cb1590 	.word	0x19cb1590
 800564c:	3efa01a0 	.word	0x3efa01a0
 8005650:	16c15177 	.word	0x16c15177
 8005654:	3f56c16c 	.word	0x3f56c16c
 8005658:	5555554c 	.word	0x5555554c
 800565c:	3fa55555 	.word	0x3fa55555
 8005660:	3fe00000 	.word	0x3fe00000
 8005664:	3fd33332 	.word	0x3fd33332
 8005668:	3ff00000 	.word	0x3ff00000
 800566c:	3fe90000 	.word	0x3fe90000
 8005670:	3fd20000 	.word	0x3fd20000

08005674 <__kernel_rem_pio2>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800567c:	9308      	str	r3, [sp, #32]
 800567e:	9101      	str	r1, [sp, #4]
 8005680:	4bc0      	ldr	r3, [pc, #768]	; (8005984 <__kernel_rem_pio2+0x310>)
 8005682:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005684:	f112 0f14 	cmn.w	r2, #20
 8005688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800568c:	bfa8      	it	ge
 800568e:	1ed4      	subge	r4, r2, #3
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	bfb8      	it	lt
 8005696:	2400      	movlt	r4, #0
 8005698:	f103 33ff 	add.w	r3, r3, #4294967295
 800569c:	9306      	str	r3, [sp, #24]
 800569e:	bfa4      	itt	ge
 80056a0:	2318      	movge	r3, #24
 80056a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80056a6:	f06f 0317 	mvn.w	r3, #23
 80056aa:	fb04 3303 	mla	r3, r4, r3, r3
 80056ae:	eb03 0a02 	add.w	sl, r3, r2
 80056b2:	9a06      	ldr	r2, [sp, #24]
 80056b4:	9b04      	ldr	r3, [sp, #16]
 80056b6:	1aa7      	subs	r7, r4, r2
 80056b8:	eb03 0802 	add.w	r8, r3, r2
 80056bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80056be:	2500      	movs	r5, #0
 80056c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80056c4:	2200      	movs	r2, #0
 80056c6:	2300      	movs	r3, #0
 80056c8:	9009      	str	r0, [sp, #36]	; 0x24
 80056ca:	ae20      	add	r6, sp, #128	; 0x80
 80056cc:	4545      	cmp	r5, r8
 80056ce:	dd19      	ble.n	8005704 <__kernel_rem_pio2+0x90>
 80056d0:	9b08      	ldr	r3, [sp, #32]
 80056d2:	aa20      	add	r2, sp, #128	; 0x80
 80056d4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80056d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80056dc:	f1c3 0301 	rsb	r3, r3, #1
 80056e0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80056e4:	9307      	str	r3, [sp, #28]
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	9a04      	ldr	r2, [sp, #16]
 80056ea:	4443      	add	r3, r8
 80056ec:	429a      	cmp	r2, r3
 80056ee:	db35      	blt.n	800575c <__kernel_rem_pio2+0xe8>
 80056f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f2:	2200      	movs	r2, #0
 80056f4:	f1a3 0908 	sub.w	r9, r3, #8
 80056f8:	2300      	movs	r3, #0
 80056fa:	462f      	mov	r7, r5
 80056fc:	2600      	movs	r6, #0
 80056fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005702:	e01f      	b.n	8005744 <__kernel_rem_pio2+0xd0>
 8005704:	42ef      	cmn	r7, r5
 8005706:	d40b      	bmi.n	8005720 <__kernel_rem_pio2+0xac>
 8005708:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800570c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005710:	f7fa fe70 	bl	80003f4 <__aeabi_i2d>
 8005714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005718:	e8e6 0102 	strd	r0, r1, [r6], #8
 800571c:	3501      	adds	r5, #1
 800571e:	e7d5      	b.n	80056cc <__kernel_rem_pio2+0x58>
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	e7f8      	b.n	8005718 <__kernel_rem_pio2+0xa4>
 8005726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800572e:	f7fa fecb 	bl	80004c8 <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573a:	f7fa fd0f 	bl	800015c <__adddf3>
 800573e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005742:	3601      	adds	r6, #1
 8005744:	9b06      	ldr	r3, [sp, #24]
 8005746:	3f08      	subs	r7, #8
 8005748:	429e      	cmp	r6, r3
 800574a:	ddec      	ble.n	8005726 <__kernel_rem_pio2+0xb2>
 800574c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005750:	3508      	adds	r5, #8
 8005752:	e8eb 2302 	strd	r2, r3, [fp], #8
 8005756:	f108 0801 	add.w	r8, r8, #1
 800575a:	e7c4      	b.n	80056e6 <__kernel_rem_pio2+0x72>
 800575c:	9b04      	ldr	r3, [sp, #16]
 800575e:	aa0c      	add	r2, sp, #48	; 0x30
 8005760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005764:	930b      	str	r3, [sp, #44]	; 0x2c
 8005766:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005768:	9f04      	ldr	r7, [sp, #16]
 800576a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800576e:	930a      	str	r3, [sp, #40]	; 0x28
 8005770:	463e      	mov	r6, r7
 8005772:	ab98      	add	r3, sp, #608	; 0x260
 8005774:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005778:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800577c:	f8cd b008 	str.w	fp, [sp, #8]
 8005780:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005784:	2e00      	cmp	r6, #0
 8005786:	dc71      	bgt.n	800586c <__kernel_rem_pio2+0x1f8>
 8005788:	4652      	mov	r2, sl
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f000 fbf7 	bl	8005f80 <scalbn>
 8005792:	2200      	movs	r2, #0
 8005794:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005798:	4604      	mov	r4, r0
 800579a:	460d      	mov	r5, r1
 800579c:	f7fa fe94 	bl	80004c8 <__aeabi_dmul>
 80057a0:	f000 fb6e 	bl	8005e80 <floor>
 80057a4:	2200      	movs	r2, #0
 80057a6:	4b78      	ldr	r3, [pc, #480]	; (8005988 <__kernel_rem_pio2+0x314>)
 80057a8:	f7fa fe8e 	bl	80004c8 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4620      	mov	r0, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	f7fa fcd0 	bl	8000158 <__aeabi_dsub>
 80057b8:	460d      	mov	r5, r1
 80057ba:	4604      	mov	r4, r0
 80057bc:	f7fb f91e 	bl	80009fc <__aeabi_d2iz>
 80057c0:	9007      	str	r0, [sp, #28]
 80057c2:	f7fa fe17 	bl	80003f4 <__aeabi_i2d>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fa fcc3 	bl	8000158 <__aeabi_dsub>
 80057d2:	f1ba 0f00 	cmp.w	sl, #0
 80057d6:	4680      	mov	r8, r0
 80057d8:	4689      	mov	r9, r1
 80057da:	dd70      	ble.n	80058be <__kernel_rem_pio2+0x24a>
 80057dc:	1e7a      	subs	r2, r7, #1
 80057de:	ab0c      	add	r3, sp, #48	; 0x30
 80057e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80057e4:	9c07      	ldr	r4, [sp, #28]
 80057e6:	f1ca 0118 	rsb	r1, sl, #24
 80057ea:	fa40 f301 	asr.w	r3, r0, r1
 80057ee:	441c      	add	r4, r3
 80057f0:	408b      	lsls	r3, r1
 80057f2:	1ac0      	subs	r0, r0, r3
 80057f4:	ab0c      	add	r3, sp, #48	; 0x30
 80057f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80057fa:	f1ca 0317 	rsb	r3, sl, #23
 80057fe:	9407      	str	r4, [sp, #28]
 8005800:	fa40 f303 	asr.w	r3, r0, r3
 8005804:	9302      	str	r3, [sp, #8]
 8005806:	9b02      	ldr	r3, [sp, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dd66      	ble.n	80058da <__kernel_rem_pio2+0x266>
 800580c:	2200      	movs	r2, #0
 800580e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005812:	4614      	mov	r4, r2
 8005814:	9b07      	ldr	r3, [sp, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	9307      	str	r3, [sp, #28]
 800581a:	4297      	cmp	r7, r2
 800581c:	f300 809f 	bgt.w	800595e <__kernel_rem_pio2+0x2ea>
 8005820:	f1ba 0f00 	cmp.w	sl, #0
 8005824:	dd07      	ble.n	8005836 <__kernel_rem_pio2+0x1c2>
 8005826:	f1ba 0f01 	cmp.w	sl, #1
 800582a:	f000 80b9 	beq.w	80059a0 <__kernel_rem_pio2+0x32c>
 800582e:	f1ba 0f02 	cmp.w	sl, #2
 8005832:	f000 80bf 	beq.w	80059b4 <__kernel_rem_pio2+0x340>
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d14e      	bne.n	80058da <__kernel_rem_pio2+0x266>
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	2000      	movs	r0, #0
 8005842:	4952      	ldr	r1, [pc, #328]	; (800598c <__kernel_rem_pio2+0x318>)
 8005844:	f7fa fc88 	bl	8000158 <__aeabi_dsub>
 8005848:	4680      	mov	r8, r0
 800584a:	4689      	mov	r9, r1
 800584c:	2c00      	cmp	r4, #0
 800584e:	d044      	beq.n	80058da <__kernel_rem_pio2+0x266>
 8005850:	4652      	mov	r2, sl
 8005852:	2000      	movs	r0, #0
 8005854:	494d      	ldr	r1, [pc, #308]	; (800598c <__kernel_rem_pio2+0x318>)
 8005856:	f000 fb93 	bl	8005f80 <scalbn>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	f7fa fc79 	bl	8000158 <__aeabi_dsub>
 8005866:	4680      	mov	r8, r0
 8005868:	4689      	mov	r9, r1
 800586a:	e036      	b.n	80058da <__kernel_rem_pio2+0x266>
 800586c:	2200      	movs	r2, #0
 800586e:	4b48      	ldr	r3, [pc, #288]	; (8005990 <__kernel_rem_pio2+0x31c>)
 8005870:	4620      	mov	r0, r4
 8005872:	4629      	mov	r1, r5
 8005874:	f7fa fe28 	bl	80004c8 <__aeabi_dmul>
 8005878:	f7fb f8c0 	bl	80009fc <__aeabi_d2iz>
 800587c:	f7fa fdba 	bl	80003f4 <__aeabi_i2d>
 8005880:	2200      	movs	r2, #0
 8005882:	4b44      	ldr	r3, [pc, #272]	; (8005994 <__kernel_rem_pio2+0x320>)
 8005884:	4680      	mov	r8, r0
 8005886:	4689      	mov	r9, r1
 8005888:	f7fa fe1e 	bl	80004c8 <__aeabi_dmul>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fa fc60 	bl	8000158 <__aeabi_dsub>
 8005898:	f7fb f8b0 	bl	80009fc <__aeabi_d2iz>
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	3e01      	subs	r6, #1
 80058a0:	f843 0b04 	str.w	r0, [r3], #4
 80058a4:	9302      	str	r3, [sp, #8]
 80058a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80058a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058ac:	4640      	mov	r0, r8
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fc52 	bl	800015c <__adddf3>
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
 80058bc:	e762      	b.n	8005784 <__kernel_rem_pio2+0x110>
 80058be:	d105      	bne.n	80058cc <__kernel_rem_pio2+0x258>
 80058c0:	1e7b      	subs	r3, r7, #1
 80058c2:	aa0c      	add	r2, sp, #48	; 0x30
 80058c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058c8:	15c3      	asrs	r3, r0, #23
 80058ca:	e79b      	b.n	8005804 <__kernel_rem_pio2+0x190>
 80058cc:	2200      	movs	r2, #0
 80058ce:	4b32      	ldr	r3, [pc, #200]	; (8005998 <__kernel_rem_pio2+0x324>)
 80058d0:	f7fb f880 	bl	80009d4 <__aeabi_dcmpge>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d13f      	bne.n	8005958 <__kernel_rem_pio2+0x2e4>
 80058d8:	9002      	str	r0, [sp, #8]
 80058da:	2200      	movs	r2, #0
 80058dc:	2300      	movs	r3, #0
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fb f859 	bl	8000998 <__aeabi_dcmpeq>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f000 80b5 	beq.w	8005a56 <__kernel_rem_pio2+0x3e2>
 80058ec:	1e7c      	subs	r4, r7, #1
 80058ee:	4623      	mov	r3, r4
 80058f0:	2200      	movs	r2, #0
 80058f2:	9904      	ldr	r1, [sp, #16]
 80058f4:	428b      	cmp	r3, r1
 80058f6:	da64      	bge.n	80059c2 <__kernel_rem_pio2+0x34e>
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d078      	beq.n	80059ee <__kernel_rem_pio2+0x37a>
 80058fc:	ab0c      	add	r3, sp, #48	; 0x30
 80058fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005902:	f1aa 0a18 	sub.w	sl, sl, #24
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80a3 	beq.w	8005a52 <__kernel_rem_pio2+0x3de>
 800590c:	4652      	mov	r2, sl
 800590e:	2000      	movs	r0, #0
 8005910:	491e      	ldr	r1, [pc, #120]	; (800598c <__kernel_rem_pio2+0x318>)
 8005912:	f000 fb35 	bl	8005f80 <scalbn>
 8005916:	46a2      	mov	sl, r4
 8005918:	4606      	mov	r6, r0
 800591a:	460f      	mov	r7, r1
 800591c:	f04f 0800 	mov.w	r8, #0
 8005920:	00e3      	lsls	r3, r4, #3
 8005922:	9306      	str	r3, [sp, #24]
 8005924:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005990 <__kernel_rem_pio2+0x31c>
 8005928:	ab70      	add	r3, sp, #448	; 0x1c0
 800592a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800592e:	f1ba 0f00 	cmp.w	sl, #0
 8005932:	f280 80c6 	bge.w	8005ac2 <__kernel_rem_pio2+0x44e>
 8005936:	4627      	mov	r7, r4
 8005938:	f04f 0800 	mov.w	r8, #0
 800593c:	2f00      	cmp	r7, #0
 800593e:	f2c0 80f3 	blt.w	8005b28 <__kernel_rem_pio2+0x4b4>
 8005942:	4b16      	ldr	r3, [pc, #88]	; (800599c <__kernel_rem_pio2+0x328>)
 8005944:	f04f 0a00 	mov.w	sl, #0
 8005948:	461d      	mov	r5, r3
 800594a:	ab70      	add	r3, sp, #448	; 0x1c0
 800594c:	f04f 0b00 	mov.w	fp, #0
 8005950:	2600      	movs	r6, #0
 8005952:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005956:	e0d9      	b.n	8005b0c <__kernel_rem_pio2+0x498>
 8005958:	2302      	movs	r3, #2
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	e756      	b.n	800580c <__kernel_rem_pio2+0x198>
 800595e:	f8db 3000 	ldr.w	r3, [fp]
 8005962:	b954      	cbnz	r4, 800597a <__kernel_rem_pio2+0x306>
 8005964:	b123      	cbz	r3, 8005970 <__kernel_rem_pio2+0x2fc>
 8005966:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800596a:	f8cb 3000 	str.w	r3, [fp]
 800596e:	2301      	movs	r3, #1
 8005970:	461c      	mov	r4, r3
 8005972:	3201      	adds	r2, #1
 8005974:	f10b 0b04 	add.w	fp, fp, #4
 8005978:	e74f      	b.n	800581a <__kernel_rem_pio2+0x1a6>
 800597a:	1acb      	subs	r3, r1, r3
 800597c:	f8cb 3000 	str.w	r3, [fp]
 8005980:	4623      	mov	r3, r4
 8005982:	e7f5      	b.n	8005970 <__kernel_rem_pio2+0x2fc>
 8005984:	080064c0 	.word	0x080064c0
 8005988:	40200000 	.word	0x40200000
 800598c:	3ff00000 	.word	0x3ff00000
 8005990:	3e700000 	.word	0x3e700000
 8005994:	41700000 	.word	0x41700000
 8005998:	3fe00000 	.word	0x3fe00000
 800599c:	08006480 	.word	0x08006480
 80059a0:	1e7a      	subs	r2, r7, #1
 80059a2:	ab0c      	add	r3, sp, #48	; 0x30
 80059a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059ac:	a90c      	add	r1, sp, #48	; 0x30
 80059ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059b2:	e740      	b.n	8005836 <__kernel_rem_pio2+0x1c2>
 80059b4:	1e7a      	subs	r2, r7, #1
 80059b6:	ab0c      	add	r3, sp, #48	; 0x30
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80059c0:	e7f4      	b.n	80059ac <__kernel_rem_pio2+0x338>
 80059c2:	a90c      	add	r1, sp, #48	; 0x30
 80059c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	430a      	orrs	r2, r1
 80059cc:	e791      	b.n	80058f2 <__kernel_rem_pio2+0x27e>
 80059ce:	3401      	adds	r4, #1
 80059d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	d0fa      	beq.n	80059ce <__kernel_rem_pio2+0x35a>
 80059d8:	9b08      	ldr	r3, [sp, #32]
 80059da:	1c7e      	adds	r6, r7, #1
 80059dc:	18fd      	adds	r5, r7, r3
 80059de:	ab20      	add	r3, sp, #128	; 0x80
 80059e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80059e4:	443c      	add	r4, r7
 80059e6:	42b4      	cmp	r4, r6
 80059e8:	da04      	bge.n	80059f4 <__kernel_rem_pio2+0x380>
 80059ea:	4627      	mov	r7, r4
 80059ec:	e6c0      	b.n	8005770 <__kernel_rem_pio2+0xfc>
 80059ee:	2401      	movs	r4, #1
 80059f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f2:	e7ed      	b.n	80059d0 <__kernel_rem_pio2+0x35c>
 80059f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f6:	462f      	mov	r7, r5
 80059f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059fc:	f7fa fcfa 	bl	80003f4 <__aeabi_i2d>
 8005a00:	f04f 0b00 	mov.w	fp, #0
 8005a04:	f04f 0800 	mov.w	r8, #0
 8005a08:	f04f 0900 	mov.w	r9, #0
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8005a12:	3b08      	subs	r3, #8
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	459b      	cmp	fp, r3
 8005a1a:	dd07      	ble.n	8005a2c <__kernel_rem_pio2+0x3b8>
 8005a1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8005a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a22:	463d      	mov	r5, r7
 8005a24:	e9c3 8900 	strd	r8, r9, [r3]
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7dc      	b.n	80059e6 <__kernel_rem_pio2+0x372>
 8005a2c:	9902      	ldr	r1, [sp, #8]
 8005a2e:	f10b 0b01 	add.w	fp, fp, #1
 8005a32:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005a36:	9102      	str	r1, [sp, #8]
 8005a38:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8005a3c:	f7fa fd44 	bl	80004c8 <__aeabi_dmul>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fa fb88 	bl	800015c <__adddf3>
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	4689      	mov	r9, r1
 8005a50:	e7e1      	b.n	8005a16 <__kernel_rem_pio2+0x3a2>
 8005a52:	3c01      	subs	r4, #1
 8005a54:	e752      	b.n	80058fc <__kernel_rem_pio2+0x288>
 8005a56:	f1ca 0200 	rsb	r2, sl, #0
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f000 fa8f 	bl	8005f80 <scalbn>
 8005a62:	2200      	movs	r2, #0
 8005a64:	4ba5      	ldr	r3, [pc, #660]	; (8005cfc <__kernel_rem_pio2+0x688>)
 8005a66:	4604      	mov	r4, r0
 8005a68:	460d      	mov	r5, r1
 8005a6a:	f7fa ffb3 	bl	80009d4 <__aeabi_dcmpge>
 8005a6e:	b1f8      	cbz	r0, 8005ab0 <__kernel_rem_pio2+0x43c>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4ba3      	ldr	r3, [pc, #652]	; (8005d00 <__kernel_rem_pio2+0x68c>)
 8005a74:	4620      	mov	r0, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7fa fd26 	bl	80004c8 <__aeabi_dmul>
 8005a7c:	f7fa ffbe 	bl	80009fc <__aeabi_d2iz>
 8005a80:	4606      	mov	r6, r0
 8005a82:	f7fa fcb7 	bl	80003f4 <__aeabi_i2d>
 8005a86:	2200      	movs	r2, #0
 8005a88:	4b9c      	ldr	r3, [pc, #624]	; (8005cfc <__kernel_rem_pio2+0x688>)
 8005a8a:	f7fa fd1d 	bl	80004c8 <__aeabi_dmul>
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4602      	mov	r2, r0
 8005a92:	4629      	mov	r1, r5
 8005a94:	4620      	mov	r0, r4
 8005a96:	f7fa fb5f 	bl	8000158 <__aeabi_dsub>
 8005a9a:	f7fa ffaf 	bl	80009fc <__aeabi_d2iz>
 8005a9e:	1c7c      	adds	r4, r7, #1
 8005aa0:	ab0c      	add	r3, sp, #48	; 0x30
 8005aa2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005aa6:	f10a 0a18 	add.w	sl, sl, #24
 8005aaa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8005aae:	e72d      	b.n	800590c <__kernel_rem_pio2+0x298>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7fa ffa2 	bl	80009fc <__aeabi_d2iz>
 8005ab8:	ab0c      	add	r3, sp, #48	; 0x30
 8005aba:	463c      	mov	r4, r7
 8005abc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005ac0:	e724      	b.n	800590c <__kernel_rem_pio2+0x298>
 8005ac2:	ab0c      	add	r3, sp, #48	; 0x30
 8005ac4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005ac8:	f7fa fc94 	bl	80003f4 <__aeabi_i2d>
 8005acc:	4632      	mov	r2, r6
 8005ace:	463b      	mov	r3, r7
 8005ad0:	f7fa fcfa 	bl	80004c8 <__aeabi_dmul>
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005ada:	464b      	mov	r3, r9
 8005adc:	4630      	mov	r0, r6
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fa fcf2 	bl	80004c8 <__aeabi_dmul>
 8005ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ae8:	4606      	mov	r6, r0
 8005aea:	460f      	mov	r7, r1
 8005aec:	e71f      	b.n	800592e <__kernel_rem_pio2+0x2ba>
 8005aee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005af2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005af6:	f7fa fce7 	bl	80004c8 <__aeabi_dmul>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4650      	mov	r0, sl
 8005b00:	4659      	mov	r1, fp
 8005b02:	f7fa fb2b 	bl	800015c <__adddf3>
 8005b06:	4682      	mov	sl, r0
 8005b08:	468b      	mov	fp, r1
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	9b04      	ldr	r3, [sp, #16]
 8005b0e:	429e      	cmp	r6, r3
 8005b10:	dc01      	bgt.n	8005b16 <__kernel_rem_pio2+0x4a2>
 8005b12:	45b0      	cmp	r8, r6
 8005b14:	daeb      	bge.n	8005aee <__kernel_rem_pio2+0x47a>
 8005b16:	ab48      	add	r3, sp, #288	; 0x120
 8005b18:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005b1c:	e9c3 ab00 	strd	sl, fp, [r3]
 8005b20:	3f01      	subs	r7, #1
 8005b22:	f108 0801 	add.w	r8, r8, #1
 8005b26:	e709      	b.n	800593c <__kernel_rem_pio2+0x2c8>
 8005b28:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	dc09      	bgt.n	8005b42 <__kernel_rem_pio2+0x4ce>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dc34      	bgt.n	8005b9c <__kernel_rem_pio2+0x528>
 8005b32:	d05e      	beq.n	8005bf2 <__kernel_rem_pio2+0x57e>
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	f003 0007 	and.w	r0, r3, #7
 8005b3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b42:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d1f5      	bne.n	8005b34 <__kernel_rem_pio2+0x4c0>
 8005b48:	9a06      	ldr	r2, [sp, #24]
 8005b4a:	ab48      	add	r3, sp, #288	; 0x120
 8005b4c:	441a      	add	r2, r3
 8005b4e:	4615      	mov	r5, r2
 8005b50:	4692      	mov	sl, r2
 8005b52:	46a3      	mov	fp, r4
 8005b54:	f1bb 0f00 	cmp.w	fp, #0
 8005b58:	dc7a      	bgt.n	8005c50 <__kernel_rem_pio2+0x5dc>
 8005b5a:	46aa      	mov	sl, r5
 8005b5c:	46a3      	mov	fp, r4
 8005b5e:	f1bb 0f01 	cmp.w	fp, #1
 8005b62:	f300 8094 	bgt.w	8005c8e <__kernel_rem_pio2+0x61a>
 8005b66:	2700      	movs	r7, #0
 8005b68:	463e      	mov	r6, r7
 8005b6a:	2c01      	cmp	r4, #1
 8005b6c:	f300 80ae 	bgt.w	8005ccc <__kernel_rem_pio2+0x658>
 8005b70:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8005b74:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 80b0 	bne.w	8005ce0 <__kernel_rem_pio2+0x66c>
 8005b80:	4603      	mov	r3, r0
 8005b82:	462a      	mov	r2, r5
 8005b84:	9801      	ldr	r0, [sp, #4]
 8005b86:	e9c0 2300 	strd	r2, r3, [r0]
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005b92:	463a      	mov	r2, r7
 8005b94:	4633      	mov	r3, r6
 8005b96:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005b9a:	e7cb      	b.n	8005b34 <__kernel_rem_pio2+0x4c0>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	9a06      	ldr	r2, [sp, #24]
 8005ba0:	ab48      	add	r3, sp, #288	; 0x120
 8005ba2:	441a      	add	r2, r3
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	46a0      	mov	r8, r4
 8005ba8:	4601      	mov	r1, r0
 8005baa:	f1b8 0f00 	cmp.w	r8, #0
 8005bae:	da3c      	bge.n	8005c2a <__kernel_rem_pio2+0x5b6>
 8005bb0:	9b02      	ldr	r3, [sp, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d040      	beq.n	8005c38 <__kernel_rem_pio2+0x5c4>
 8005bb6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005bba:	4602      	mov	r2, r0
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	9d01      	ldr	r5, [sp, #4]
 8005bc0:	2601      	movs	r6, #1
 8005bc2:	e9c5 2300 	strd	r2, r3, [r5]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005bcc:	f7fa fac4 	bl	8000158 <__aeabi_dsub>
 8005bd0:	4684      	mov	ip, r0
 8005bd2:	460f      	mov	r7, r1
 8005bd4:	ad48      	add	r5, sp, #288	; 0x120
 8005bd6:	42b4      	cmp	r4, r6
 8005bd8:	f105 0508 	add.w	r5, r5, #8
 8005bdc:	da2e      	bge.n	8005c3c <__kernel_rem_pio2+0x5c8>
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	b10b      	cbz	r3, 8005be6 <__kernel_rem_pio2+0x572>
 8005be2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005be6:	4662      	mov	r2, ip
 8005be8:	463b      	mov	r3, r7
 8005bea:	9901      	ldr	r1, [sp, #4]
 8005bec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005bf0:	e7a0      	b.n	8005b34 <__kernel_rem_pio2+0x4c0>
 8005bf2:	9a06      	ldr	r2, [sp, #24]
 8005bf4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005bf6:	ab48      	add	r3, sp, #288	; 0x120
 8005bf8:	441a      	add	r2, r3
 8005bfa:	4615      	mov	r5, r2
 8005bfc:	4637      	mov	r7, r6
 8005bfe:	2c00      	cmp	r4, #0
 8005c00:	da09      	bge.n	8005c16 <__kernel_rem_pio2+0x5a2>
 8005c02:	9b02      	ldr	r3, [sp, #8]
 8005c04:	b10b      	cbz	r3, 8005c0a <__kernel_rem_pio2+0x596>
 8005c06:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	9901      	ldr	r1, [sp, #4]
 8005c10:	e9c1 2300 	strd	r2, r3, [r1]
 8005c14:	e78e      	b.n	8005b34 <__kernel_rem_pio2+0x4c0>
 8005c16:	4630      	mov	r0, r6
 8005c18:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	f7fa fa9d 	bl	800015c <__adddf3>
 8005c22:	3c01      	subs	r4, #1
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	e7e9      	b.n	8005bfe <__kernel_rem_pio2+0x58a>
 8005c2a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005c2e:	f7fa fa95 	bl	800015c <__adddf3>
 8005c32:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c36:	e7b8      	b.n	8005baa <__kernel_rem_pio2+0x536>
 8005c38:	460d      	mov	r5, r1
 8005c3a:	e7be      	b.n	8005bba <__kernel_rem_pio2+0x546>
 8005c3c:	4660      	mov	r0, ip
 8005c3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa fa8a 	bl	800015c <__adddf3>
 8005c48:	3601      	adds	r6, #1
 8005c4a:	4684      	mov	ip, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	e7c2      	b.n	8005bd6 <__kernel_rem_pio2+0x562>
 8005c50:	e9da 6700 	ldrd	r6, r7, [sl]
 8005c54:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005c58:	4632      	mov	r2, r6
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	4649      	mov	r1, r9
 8005c60:	f7fa fa7c 	bl	800015c <__adddf3>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4649      	mov	r1, r9
 8005c70:	f7fa fa72 	bl	8000158 <__aeabi_dsub>
 8005c74:	4632      	mov	r2, r6
 8005c76:	463b      	mov	r3, r7
 8005c78:	f7fa fa70 	bl	800015c <__adddf3>
 8005c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c80:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005c84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c88:	e9ca 2300 	strd	r2, r3, [sl]
 8005c8c:	e762      	b.n	8005b54 <__kernel_rem_pio2+0x4e0>
 8005c8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c92:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005c96:	4642      	mov	r2, r8
 8005c98:	464b      	mov	r3, r9
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa fa5d 	bl	800015c <__adddf3>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005caa:	4630      	mov	r0, r6
 8005cac:	4639      	mov	r1, r7
 8005cae:	f7fa fa53 	bl	8000158 <__aeabi_dsub>
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	f7fa fa51 	bl	800015c <__adddf3>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cc6:	e9ca 2300 	strd	r2, r3, [sl]
 8005cca:	e748      	b.n	8005b5e <__kernel_rem_pio2+0x4ea>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	f7fa fa42 	bl	800015c <__adddf3>
 8005cd8:	3c01      	subs	r4, #1
 8005cda:	4607      	mov	r7, r0
 8005cdc:	460e      	mov	r6, r1
 8005cde:	e744      	b.n	8005b6a <__kernel_rem_pio2+0x4f6>
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005ce6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005cea:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005cee:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005cf2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005cf6:	601d      	str	r5, [r3, #0]
 8005cf8:	615e      	str	r6, [r3, #20]
 8005cfa:	e71b      	b.n	8005b34 <__kernel_rem_pio2+0x4c0>
 8005cfc:	41700000 	.word	0x41700000
 8005d00:	3e700000 	.word	0x3e700000
 8005d04:	00000000 	.word	0x00000000

08005d08 <__kernel_sin>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	e9cd 2300 	strd	r2, r3, [sp]
 8005d12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d16:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d1a:	4682      	mov	sl, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005d20:	da03      	bge.n	8005d2a <__kernel_sin+0x22>
 8005d22:	f7fa fe6b 	bl	80009fc <__aeabi_d2iz>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d050      	beq.n	8005dcc <__kernel_sin+0xc4>
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	4623      	mov	r3, r4
 8005d2e:	4650      	mov	r0, sl
 8005d30:	4621      	mov	r1, r4
 8005d32:	f7fa fbc9 	bl	80004c8 <__aeabi_dmul>
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4650      	mov	r0, sl
 8005d40:	4621      	mov	r1, r4
 8005d42:	f7fa fbc1 	bl	80004c8 <__aeabi_dmul>
 8005d46:	a33e      	add	r3, pc, #248	; (adr r3, 8005e40 <__kernel_sin+0x138>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	4689      	mov	r9, r1
 8005d50:	4630      	mov	r0, r6
 8005d52:	4639      	mov	r1, r7
 8005d54:	f7fa fbb8 	bl	80004c8 <__aeabi_dmul>
 8005d58:	a33b      	add	r3, pc, #236	; (adr r3, 8005e48 <__kernel_sin+0x140>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa f9fb 	bl	8000158 <__aeabi_dsub>
 8005d62:	4632      	mov	r2, r6
 8005d64:	463b      	mov	r3, r7
 8005d66:	f7fa fbaf 	bl	80004c8 <__aeabi_dmul>
 8005d6a:	a339      	add	r3, pc, #228	; (adr r3, 8005e50 <__kernel_sin+0x148>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa f9f4 	bl	800015c <__adddf3>
 8005d74:	4632      	mov	r2, r6
 8005d76:	463b      	mov	r3, r7
 8005d78:	f7fa fba6 	bl	80004c8 <__aeabi_dmul>
 8005d7c:	a336      	add	r3, pc, #216	; (adr r3, 8005e58 <__kernel_sin+0x150>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f7fa f9e9 	bl	8000158 <__aeabi_dsub>
 8005d86:	4632      	mov	r2, r6
 8005d88:	463b      	mov	r3, r7
 8005d8a:	f7fa fb9d 	bl	80004c8 <__aeabi_dmul>
 8005d8e:	a334      	add	r3, pc, #208	; (adr r3, 8005e60 <__kernel_sin+0x158>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa f9e2 	bl	800015c <__adddf3>
 8005d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d9c:	b9dd      	cbnz	r5, 8005dd6 <__kernel_sin+0xce>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fb8f 	bl	80004c8 <__aeabi_dmul>
 8005daa:	a32f      	add	r3, pc, #188	; (adr r3, 8005e68 <__kernel_sin+0x160>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa f9d2 	bl	8000158 <__aeabi_dsub>
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	f7fa fb86 	bl	80004c8 <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4650      	mov	r0, sl
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f7fa f9ca 	bl	800015c <__adddf3>
 8005dc8:	4682      	mov	sl, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	4650      	mov	r0, sl
 8005dce:	4621      	mov	r1, r4
 8005dd0:	b006      	add	sp, #24
 8005dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <__kernel_sin+0x168>)
 8005dde:	f7fa fb73 	bl	80004c8 <__aeabi_dmul>
 8005de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005de6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dea:	4640      	mov	r0, r8
 8005dec:	4649      	mov	r1, r9
 8005dee:	f7fa fb6b 	bl	80004c8 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfa:	f7fa f9ad 	bl	8000158 <__aeabi_dsub>
 8005dfe:	4632      	mov	r2, r6
 8005e00:	463b      	mov	r3, r7
 8005e02:	f7fa fb61 	bl	80004c8 <__aeabi_dmul>
 8005e06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e0a:	f7fa f9a5 	bl	8000158 <__aeabi_dsub>
 8005e0e:	a316      	add	r3, pc, #88	; (adr r3, 8005e68 <__kernel_sin+0x160>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	f7fa fb54 	bl	80004c8 <__aeabi_dmul>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa f998 	bl	800015c <__adddf3>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4650      	mov	r0, sl
 8005e32:	4621      	mov	r1, r4
 8005e34:	f7fa f990 	bl	8000158 <__aeabi_dsub>
 8005e38:	e7c6      	b.n	8005dc8 <__kernel_sin+0xc0>
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	5acfd57c 	.word	0x5acfd57c
 8005e44:	3de5d93a 	.word	0x3de5d93a
 8005e48:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e4c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e50:	57b1fe7d 	.word	0x57b1fe7d
 8005e54:	3ec71de3 	.word	0x3ec71de3
 8005e58:	19c161d5 	.word	0x19c161d5
 8005e5c:	3f2a01a0 	.word	0x3f2a01a0
 8005e60:	1110f8a6 	.word	0x1110f8a6
 8005e64:	3f811111 	.word	0x3f811111
 8005e68:	55555549 	.word	0x55555549
 8005e6c:	3fc55555 	.word	0x3fc55555
 8005e70:	3fe00000 	.word	0x3fe00000

08005e74 <fabs>:
 8005e74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e78:	4770      	bx	lr
 8005e7a:	0000      	movs	r0, r0
 8005e7c:	0000      	movs	r0, r0
	...

08005e80 <floor>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005e88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005e8c:	2e13      	cmp	r6, #19
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4607      	mov	r7, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	4605      	mov	r5, r0
 8005e98:	dc34      	bgt.n	8005f04 <floor+0x84>
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	da15      	bge.n	8005eca <floor+0x4a>
 8005e9e:	a334      	add	r3, pc, #208	; (adr r3, 8005f70 <floor+0xf0>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa f95a 	bl	800015c <__adddf3>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f7fa fd9c 	bl	80009e8 <__aeabi_dcmpgt>
 8005eb0:	b140      	cbz	r0, 8005ec4 <floor+0x44>
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	da59      	bge.n	8005f6a <floor+0xea>
 8005eb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005eba:	ea57 0503 	orrs.w	r5, r7, r3
 8005ebe:	d001      	beq.n	8005ec4 <floor+0x44>
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	4c2d      	ldr	r4, [pc, #180]	; (8005f78 <floor+0xf8>)
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	462f      	mov	r7, r5
 8005ec8:	e025      	b.n	8005f16 <floor+0x96>
 8005eca:	4a2c      	ldr	r2, [pc, #176]	; (8005f7c <floor+0xfc>)
 8005ecc:	fa42 f806 	asr.w	r8, r2, r6
 8005ed0:	ea01 0208 	and.w	r2, r1, r8
 8005ed4:	4302      	orrs	r2, r0
 8005ed6:	d01e      	beq.n	8005f16 <floor+0x96>
 8005ed8:	a325      	add	r3, pc, #148	; (adr r3, 8005f70 <floor+0xf0>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa f93d 	bl	800015c <__adddf3>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f7fa fd7f 	bl	80009e8 <__aeabi_dcmpgt>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d0ea      	beq.n	8005ec4 <floor+0x44>
 8005eee:	2c00      	cmp	r4, #0
 8005ef0:	bfbe      	ittt	lt
 8005ef2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005ef6:	fa43 f606 	asrlt.w	r6, r3, r6
 8005efa:	19a4      	addlt	r4, r4, r6
 8005efc:	2500      	movs	r5, #0
 8005efe:	ea24 0408 	bic.w	r4, r4, r8
 8005f02:	e7df      	b.n	8005ec4 <floor+0x44>
 8005f04:	2e33      	cmp	r6, #51	; 0x33
 8005f06:	dd0a      	ble.n	8005f1e <floor+0x9e>
 8005f08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f0c:	d103      	bne.n	8005f16 <floor+0x96>
 8005f0e:	f7fa f925 	bl	800015c <__adddf3>
 8005f12:	4607      	mov	r7, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4638      	mov	r0, r7
 8005f18:	4619      	mov	r1, r3
 8005f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f22:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005f26:	fa22 f808 	lsr.w	r8, r2, r8
 8005f2a:	ea18 0f00 	tst.w	r8, r0
 8005f2e:	d0f2      	beq.n	8005f16 <floor+0x96>
 8005f30:	a30f      	add	r3, pc, #60	; (adr r3, 8005f70 <floor+0xf0>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f911 	bl	800015c <__adddf3>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f7fa fd53 	bl	80009e8 <__aeabi_dcmpgt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d0be      	beq.n	8005ec4 <floor+0x44>
 8005f46:	2c00      	cmp	r4, #0
 8005f48:	da02      	bge.n	8005f50 <floor+0xd0>
 8005f4a:	2e14      	cmp	r6, #20
 8005f4c:	d103      	bne.n	8005f56 <floor+0xd6>
 8005f4e:	3401      	adds	r4, #1
 8005f50:	ea25 0508 	bic.w	r5, r5, r8
 8005f54:	e7b6      	b.n	8005ec4 <floor+0x44>
 8005f56:	2301      	movs	r3, #1
 8005f58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f5c:	fa03 f606 	lsl.w	r6, r3, r6
 8005f60:	4435      	add	r5, r6
 8005f62:	42bd      	cmp	r5, r7
 8005f64:	bf38      	it	cc
 8005f66:	18e4      	addcc	r4, r4, r3
 8005f68:	e7f2      	b.n	8005f50 <floor+0xd0>
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	462c      	mov	r4, r5
 8005f6e:	e7a9      	b.n	8005ec4 <floor+0x44>
 8005f70:	8800759c 	.word	0x8800759c
 8005f74:	7e37e43c 	.word	0x7e37e43c
 8005f78:	bff00000 	.word	0xbff00000
 8005f7c:	000fffff 	.word	0x000fffff

08005f80 <scalbn>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	4617      	mov	r7, r2
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	b996      	cbnz	r6, 8005fb6 <scalbn+0x36>
 8005f90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f94:	4303      	orrs	r3, r0
 8005f96:	d039      	beq.n	800600c <scalbn+0x8c>
 8005f98:	4b35      	ldr	r3, [pc, #212]	; (8006070 <scalbn+0xf0>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f7fa fa94 	bl	80004c8 <__aeabi_dmul>
 8005fa0:	4b34      	ldr	r3, [pc, #208]	; (8006074 <scalbn+0xf4>)
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	429f      	cmp	r7, r3
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	da0f      	bge.n	8005fca <scalbn+0x4a>
 8005faa:	a32d      	add	r3, pc, #180	; (adr r3, 8006060 <scalbn+0xe0>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fa8a 	bl	80004c8 <__aeabi_dmul>
 8005fb4:	e006      	b.n	8005fc4 <scalbn+0x44>
 8005fb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005fba:	4296      	cmp	r6, r2
 8005fbc:	d10a      	bne.n	8005fd4 <scalbn+0x54>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f7fa f8cc 	bl	800015c <__adddf3>
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	e020      	b.n	800600c <scalbn+0x8c>
 8005fca:	460b      	mov	r3, r1
 8005fcc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005fd0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005fd4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005fd8:	19b9      	adds	r1, r7, r6
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	dd0e      	ble.n	8005ffc <scalbn+0x7c>
 8005fde:	a322      	add	r3, pc, #136	; (adr r3, 8006068 <scalbn+0xe8>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005fe8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005fec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005ff0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005ff4:	4820      	ldr	r0, [pc, #128]	; (8006078 <scalbn+0xf8>)
 8005ff6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005ffa:	e7d9      	b.n	8005fb0 <scalbn+0x30>
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	dd08      	ble.n	8006012 <scalbn+0x92>
 8006000:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006008:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006012:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006016:	da16      	bge.n	8006046 <scalbn+0xc6>
 8006018:	f24c 3350 	movw	r3, #50000	; 0xc350
 800601c:	429f      	cmp	r7, r3
 800601e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006022:	dd08      	ble.n	8006036 <scalbn+0xb6>
 8006024:	4c15      	ldr	r4, [pc, #84]	; (800607c <scalbn+0xfc>)
 8006026:	4814      	ldr	r0, [pc, #80]	; (8006078 <scalbn+0xf8>)
 8006028:	f363 74df 	bfi	r4, r3, #31, #1
 800602c:	a30e      	add	r3, pc, #56	; (adr r3, 8006068 <scalbn+0xe8>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	4621      	mov	r1, r4
 8006034:	e7bc      	b.n	8005fb0 <scalbn+0x30>
 8006036:	4c12      	ldr	r4, [pc, #72]	; (8006080 <scalbn+0x100>)
 8006038:	4812      	ldr	r0, [pc, #72]	; (8006084 <scalbn+0x104>)
 800603a:	f363 74df 	bfi	r4, r3, #31, #1
 800603e:	a308      	add	r3, pc, #32	; (adr r3, 8006060 <scalbn+0xe0>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	e7f5      	b.n	8006032 <scalbn+0xb2>
 8006046:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800604a:	3136      	adds	r1, #54	; 0x36
 800604c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006050:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	2200      	movs	r2, #0
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <scalbn+0x108>)
 800605c:	e7a8      	b.n	8005fb0 <scalbn+0x30>
 800605e:	bf00      	nop
 8006060:	c2f8f359 	.word	0xc2f8f359
 8006064:	01a56e1f 	.word	0x01a56e1f
 8006068:	8800759c 	.word	0x8800759c
 800606c:	7e37e43c 	.word	0x7e37e43c
 8006070:	43500000 	.word	0x43500000
 8006074:	ffff3cb0 	.word	0xffff3cb0
 8006078:	8800759c 	.word	0x8800759c
 800607c:	7e37e43c 	.word	0x7e37e43c
 8006080:	01a56e1f 	.word	0x01a56e1f
 8006084:	c2f8f359 	.word	0xc2f8f359
 8006088:	3c900000 	.word	0x3c900000

0800608c <_init>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr

08006098 <_fini>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr
