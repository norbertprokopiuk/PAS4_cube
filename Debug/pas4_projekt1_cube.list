
pas4_projekt1_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080050a8  080050a8  000150a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d0  080054d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080054d0  080054d0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054d0  080054d0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080054d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000070  08005544  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08005544  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d84c  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e02  00000000  00000000  0002d8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0002f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017636  00000000  00000000  00030470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dc22  00000000  00000000  00047aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008c443  00000000  00000000  000556c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e1b0b  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c98  00000000  00000000  000e1b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c40  00000000  00000000  000e27f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800508c 	.word	0x0800508c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800508c 	.word	0x0800508c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <lcd_cmd>:
static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

SPI_HandleTypeDef hspi2;

void lcd_cmd(uint8_t cmd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2106      	movs	r1, #6
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <lcd_cmd+0x34>)
 8000a5c:	f001 fdc3 	bl	80025e6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000a60:	1df9      	adds	r1, r7, #7
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2201      	movs	r2, #1
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <lcd_cmd+0x38>)
 8000a6a:	f002 fa95 	bl	8002f98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2106      	movs	r1, #6
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <lcd_cmd+0x34>)
 8000a74:	f001 fdb7 	bl	80025e6 <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40011000 	.word	0x40011000
 8000a84:	200002a4 	.word	0x200002a4

08000a88 <lcd_setup>:

void lcd_setup(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2108      	movs	r1, #8
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <lcd_setup+0x3c>)
 8000a92:	f001 fda8 	bl	80025e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2108      	movs	r1, #8
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <lcd_setup+0x3c>)
 8000a9c:	f001 fda3 	bl	80025e6 <HAL_GPIO_WritePin>

	lcd_cmd(PCD8544_FUNCTION_SET | 1);
 8000aa0:	2021      	movs	r0, #33	; 0x21
 8000aa2:	f7ff ffd3 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_H_BIAS | 4);
 8000aa6:	2014      	movs	r0, #20
 8000aa8:	f7ff ffd0 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_H_VOP | 0x3f);
 8000aac:	20bf      	movs	r0, #191	; 0xbf
 8000aae:	f7ff ffcd 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_FUNCTION_SET);
 8000ab2:	2020      	movs	r0, #32
 8000ab4:	f7ff ffca 	bl	8000a4c <lcd_cmd>
	lcd_cmd(PCD8544_DISP_NORMAL);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f7ff ffc7 	bl	8000a4c <lcd_cmd>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000

08000ac8 <lcd_clear>:

void lcd_clear(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
 8000acc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4802      	ldr	r0, [pc, #8]	; (8000adc <lcd_clear+0x14>)
 8000ad4:	f003 fa90 	bl	8003ff8 <memset>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <lcd_draw_text>:
{
	memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
}

void lcd_draw_text(int row, int col, const char* text)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t* pbuf = &lcd_buffer[row * 84 + col];
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2254      	movs	r2, #84	; 0x54
 8000af0:	fb02 f203 	mul.w	r2, r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <lcd_draw_text+0x84>)
 8000afa:	4413      	add	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 8000afe:	e023      	b.n	8000b48 <lcd_draw_text+0x68>
		int ch = *text++;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	f1a3 0220 	sub.w	r2, r3, #32
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <lcd_draw_text+0x88>)
 8000b18:	4413      	add	r3, r2
 8000b1a:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	e00a      	b.n	8000b38 <lcd_draw_text+0x58>
			*pbuf++ = *font++;
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	1c53      	adds	r3, r2, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	1c59      	adds	r1, r3, #1
 8000b2c:	61b9      	str	r1, [r7, #24]
 8000b2e:	7812      	ldrb	r2, [r2, #0]
 8000b30:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	ddf1      	ble.n	8000b22 <lcd_draw_text+0x42>
		}
		*pbuf++ = 0;
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	61ba      	str	r2, [r7, #24]
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <lcd_draw_text+0x78>
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <lcd_draw_text+0x8c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d3d3      	bcc.n	8000b00 <lcd_draw_text+0x20>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3724      	adds	r7, #36	; 0x24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	080050fc 	.word	0x080050fc
 8000b6c:	2000027e 	.word	0x2000027e

08000b70 <lcd_copy>:

void lcd_copy(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <lcd_copy+0x38>)
 8000b7a:	f001 fd34 	bl	80025e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2104      	movs	r1, #4
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <lcd_copy+0x38>)
 8000b84:	f001 fd2f 	bl	80025e6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <lcd_copy+0x3c>)
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <lcd_copy+0x40>)
 8000b94:	f002 fa00 	bl	8002f98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <lcd_copy+0x38>)
 8000b9e:	f001 fd22 	bl	80025e6 <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	200002a4 	.word	0x200002a4
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) { // Jeżeli przerwanie pochodzi od timera nr. 3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x6c>
		time++; //zliczam czas z dokładnośćia do 0.1 s
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bd2:	6013      	str	r3, [r2, #0]
		angular_velocity = delta_rot / 0.1;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bda:	a315      	add	r3, pc, #84	; (adr r3, 8000c30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fd9c 	bl	800071c <__aeabi_ddiv>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4916      	ldr	r1, [pc, #88]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bea:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = delta_D / 0.1;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bf4:	a30e      	add	r3, pc, #56	; (adr r3, 8000c30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f7ff fd8f 	bl	800071c <__aeabi_ddiv>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4912      	ldr	r1, [pc, #72]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c04:	e9c1 2300 	strd	r2, r3, [r1]
		delta_rot = 0;
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	e9c1 2300 	strd	r2, r3, [r1]
		delta_D = 0;
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	f3af 8000 	nop.w
 8000c30:	9999999a 	.word	0x9999999a
 8000c34:	3fb99999 	.word	0x3fb99999
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	20000284 	.word	0x20000284
 8000c40:	20000490 	.word	0x20000490
 8000c44:	20000298 	.word	0x20000298
 8000c48:	20000498 	.word	0x20000498
 8000c4c:	20000290 	.word	0x20000290

08000c50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c54:	f001 f9bc 	bl	8001fd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c58:	f000 fdd6 	bl	8001808 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c5c:	f000 ff6a 	bl	8001b34 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c60:	f000 ff3e 	bl	8001ae0 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000c64:	f000 fe42 	bl	80018ec <MX_TIM1_Init>
	MX_TIM2_Init();
 8000c68:	f000 fe98 	bl	800199c <MX_TIM2_Init>
	MX_SPI2_Init();
 8000c6c:	f000 fe08 	bl	8001880 <MX_SPI2_Init>
	MX_TIM3_Init();
 8000c70:	f000 fee8 	bl	8001a44 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000c74:	213c      	movs	r1, #60	; 0x3c
 8000c76:	48b4      	ldr	r0, [pc, #720]	; (8000f48 <main+0x2f8>)
 8000c78:	f002 fcb4 	bl	80035e4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c7c:	213c      	movs	r1, #60	; 0x3c
 8000c7e:	48b3      	ldr	r0, [pc, #716]	; (8000f4c <main+0x2fc>)
 8000c80:	f002 fcb0 	bl	80035e4 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	210c      	movs	r1, #12
 8000c88:	48b1      	ldr	r0, [pc, #708]	; (8000f50 <main+0x300>)
 8000c8a:	f001 fcac 	bl	80025e6 <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi2);
 8000c8e:	4bb1      	ldr	r3, [pc, #708]	; (8000f54 <main+0x304>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4baf      	ldr	r3, [pc, #700]	; (8000f54 <main+0x304>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c9c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2140      	movs	r1, #64	; 0x40
 8000ca2:	48ad      	ldr	r0, [pc, #692]	; (8000f58 <main+0x308>)
 8000ca4:	f001 fc9f 	bl	80025e6 <HAL_GPIO_WritePin>

	lcd_setup();
 8000ca8:	f7ff feee 	bl	8000a88 <lcd_setup>
	lcd_draw_text(0, 0, "PAS 4");
 8000cac:	4aab      	ldr	r2, [pc, #684]	; (8000f5c <main+0x30c>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff15 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(1, 0, "Projekt nr 1");
 8000cb6:	4aaa      	ldr	r2, [pc, #680]	; (8000f60 <main+0x310>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff ff10 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(2, 0, "Obs. enkoderow");
 8000cc0:	4aa8      	ldr	r2, [pc, #672]	; (8000f64 <main+0x314>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff ff0b 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(3, 0, "Norbert");
 8000cca:	4aa7      	ldr	r2, [pc, #668]	; (8000f68 <main+0x318>)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f7ff ff06 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(4, 0, "Prokopiuk");
 8000cd4:	4aa5      	ldr	r2, [pc, #660]	; (8000f6c <main+0x31c>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2004      	movs	r0, #4
 8000cda:	f7ff ff01 	bl	8000ae0 <lcd_draw_text>
	lcd_draw_text(5, 0, "299024");
 8000cde:	4aa4      	ldr	r2, [pc, #656]	; (8000f70 <main+0x320>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f7ff fefc 	bl	8000ae0 <lcd_draw_text>
	lcd_copy();
 8000ce8:	f7ff ff42 	bl	8000b70 <lcd_copy>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4897      	ldr	r0, [pc, #604]	; (8000f50 <main+0x300>)
 8000cf2:	f001 fc61 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d114      	bne.n	8000d26 <main+0xd6>
			i++;
 8000cfc:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <main+0x324>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b9b      	ldr	r3, [pc, #620]	; (8000f74 <main+0x324>)
 8000d06:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 8000d08:	489b      	ldr	r0, [pc, #620]	; (8000f78 <main+0x328>)
 8000d0a:	f002 fb77 	bl	80033fc <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2120      	movs	r1, #32
 8000d12:	489a      	ldr	r0, [pc, #616]	; (8000f7c <main+0x32c>)
 8000d14:	f001 fc67 	bl	80025e6 <HAL_GPIO_WritePin>
			if (i > 1)
 8000d18:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <main+0x324>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d902      	bls.n	8000d26 <main+0xd6>
				i = 0;
 8000d20:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <main+0x324>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		}
		if (i >= 1) {
 8000d26:	4b93      	ldr	r3, [pc, #588]	; (8000f74 <main+0x324>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0de      	beq.n	8000cec <main+0x9c>
			pulse_count_1 = TIM1->CNT;
 8000d2e:	4b94      	ldr	r3, [pc, #592]	; (8000f80 <main+0x330>)
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b93      	ldr	r3, [pc, #588]	; (8000f84 <main+0x334>)
 8000d36:	801a      	strh	r2, [r3, #0]
			pulse_count_2 = TIM2->CNT;
 8000d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b91      	ldr	r3, [pc, #580]	; (8000f88 <main+0x338>)
 8000d42:	801a      	strh	r2, [r3, #0]

			if ((pulse_count_1 != last_state_1 || pulse_count_2 != last_state_2)) {
 8000d44:	4b8f      	ldr	r3, [pc, #572]	; (8000f84 <main+0x334>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b8f      	ldr	r3, [pc, #572]	; (8000f8c <main+0x33c>)
 8000d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d109      	bne.n	8000d6a <main+0x11a>
 8000d56:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <main+0x338>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <main+0x340>)
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f000 815b 	beq.w	8001020 <main+0x3d0>
				Dl = (3.1415 * pulse_count_1) * d_kola / 1200;
 8000d6a:	4b86      	ldr	r3, [pc, #536]	; (8000f84 <main+0x334>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb3f 	bl	80003f4 <__aeabi_i2d>
 8000d76:	a370      	add	r3, pc, #448	; (adr r3, 8000f38 <main+0x2e8>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fba4 	bl	80004c8 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	4b82      	ldr	r3, [pc, #520]	; (8000f94 <main+0x344>)
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	f7ff fb9b 	bl	80004c8 <__aeabi_dmul>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b7e      	ldr	r3, [pc, #504]	; (8000f98 <main+0x348>)
 8000da0:	f7ff fcbc 	bl	800071c <__aeabi_ddiv>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	497c      	ldr	r1, [pc, #496]	; (8000f9c <main+0x34c>)
 8000daa:	e9c1 2300 	strd	r2, r3, [r1]
				Dp = (3.1415 * pulse_count_2) * d_kola / 1200;
 8000dae:	4b76      	ldr	r3, [pc, #472]	; (8000f88 <main+0x338>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb1d 	bl	80003f4 <__aeabi_i2d>
 8000dba:	a35f      	add	r3, pc, #380	; (adr r3, 8000f38 <main+0x2e8>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fb82 	bl	80004c8 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4b71      	ldr	r3, [pc, #452]	; (8000f94 <main+0x344>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	f7ff fb79 	bl	80004c8 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b6d      	ldr	r3, [pc, #436]	; (8000f98 <main+0x348>)
 8000de4:	f7ff fc9a 	bl	800071c <__aeabi_ddiv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	496c      	ldr	r1, [pc, #432]	; (8000fa0 <main+0x350>)
 8000dee:	e9c1 2300 	strd	r2, r3, [r1]

				D = (Dl + Dp) / 2;
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <main+0x34c>)
 8000df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df8:	4b69      	ldr	r3, [pc, #420]	; (8000fa0 <main+0x350>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff f9ad 	bl	800015c <__adddf3>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e12:	f7ff fc83 	bl	800071c <__aeabi_ddiv>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4962      	ldr	r1, [pc, #392]	; (8000fa4 <main+0x354>)
 8000e1c:	e9c1 2300 	strd	r2, r3, [r1]
				rot = (Dp - Dl) / rozstaw;
 8000e20:	4b5f      	ldr	r3, [pc, #380]	; (8000fa0 <main+0x350>)
 8000e22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e26:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <main+0x34c>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff f994 	bl	8000158 <__aeabi_dsub>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <main+0x358>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fc6d 	bl	800071c <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4959      	ldr	r1, [pc, #356]	; (8000fac <main+0x35c>)
 8000e48:	e9c1 2300 	strd	r2, r3, [r1]
				delta_rot = rot - last_rot;
 8000e4c:	4b57      	ldr	r3, [pc, #348]	; (8000fac <main+0x35c>)
 8000e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e52:	4b57      	ldr	r3, [pc, #348]	; (8000fb0 <main+0x360>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff f97e 	bl	8000158 <__aeabi_dsub>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4954      	ldr	r1, [pc, #336]	; (8000fb4 <main+0x364>)
 8000e62:	e9c1 2300 	strd	r2, r3, [r1]
				if (rot >= 2 * 3.1415) {
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <main+0x35c>)
 8000e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e6c:	a334      	add	r3, pc, #208	; (adr r3, 8000f40 <main+0x2f0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fdaf 	bl	80009d4 <__aeabi_dcmpge>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00c      	beq.n	8000e96 <main+0x246>
					rot = rot - 2 * 3.1415;
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <main+0x35c>)
 8000e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e82:	a32f      	add	r3, pc, #188	; (adr r3, 8000f40 <main+0x2f0>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff f966 	bl	8000158 <__aeabi_dsub>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4946      	ldr	r1, [pc, #280]	; (8000fac <main+0x35c>)
 8000e92:	e9c1 2300 	strd	r2, r3, [r1]
				}
				rot_d = rot * 180 / 3.1415;
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <main+0x35c>)
 8000e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <main+0x368>)
 8000ea2:	f7ff fb11 	bl	80004c8 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	a322      	add	r3, pc, #136	; (adr r3, 8000f38 <main+0x2e8>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fc32 	bl	800071c <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	493f      	ldr	r1, [pc, #252]	; (8000fbc <main+0x36c>)
 8000ebe:	e9c1 2300 	strd	r2, r3, [r1]
				delta_D = D - D_last;
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <main+0x354>)
 8000ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <main+0x370>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff f943 	bl	8000158 <__aeabi_dsub>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	493b      	ldr	r1, [pc, #236]	; (8000fc4 <main+0x374>)
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]
				x_n = x_n + (D - D_last) * cos(rot);
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <main+0x354>)
 8000ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <main+0x370>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff f936 	bl	8000158 <__aeabi_dsub>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4614      	mov	r4, r2
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <main+0x35c>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f003 f883 	bl	8004008 <cos>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4620      	mov	r0, r4
 8000f08:	4629      	mov	r1, r5
 8000f0a:	f7ff fadd 	bl	80004c8 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <main+0x378>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	f7ff f91e 	bl	800015c <__adddf3>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4928      	ldr	r1, [pc, #160]	; (8000fc8 <main+0x378>)
 8000f26:	e9c1 2300 	strd	r2, r3, [r1]
				y_n = y_n + (D - D_last) * sin(rot);
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <main+0x354>)
 8000f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f30:	e04c      	b.n	8000fcc <main+0x37c>
 8000f32:	bf00      	nop
 8000f34:	f3af 8000 	nop.w
 8000f38:	c083126f 	.word	0xc083126f
 8000f3c:	400921ca 	.word	0x400921ca
 8000f40:	c083126f 	.word	0xc083126f
 8000f44:	401921ca 	.word	0x401921ca
 8000f48:	200003a0 	.word	0x200003a0
 8000f4c:	200003f8 	.word	0x200003f8
 8000f50:	40011000 	.word	0x40011000
 8000f54:	200002a4 	.word	0x200002a4
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	080050a8 	.word	0x080050a8
 8000f60:	080050b0 	.word	0x080050b0
 8000f64:	080050c0 	.word	0x080050c0
 8000f68:	080050d0 	.word	0x080050d0
 8000f6c:	080050d8 	.word	0x080050d8
 8000f70:	080050e4 	.word	0x080050e4
 8000f74:	2000037a 	.word	0x2000037a
 8000f78:	20000330 	.word	0x20000330
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	200003e8 	.word	0x200003e8
 8000f88:	20000488 	.word	0x20000488
 8000f8c:	200002a0 	.word	0x200002a0
 8000f90:	200002a2 	.word	0x200002a2
 8000f94:	20000050 	.word	0x20000050
 8000f98:	4092c000 	.word	0x4092c000
 8000f9c:	20000480 	.word	0x20000480
 8000fa0:	20000388 	.word	0x20000388
 8000fa4:	20000300 	.word	0x20000300
 8000fa8:	20000058 	.word	0x20000058
 8000fac:	20000308 	.word	0x20000308
 8000fb0:	20000390 	.word	0x20000390
 8000fb4:	20000490 	.word	0x20000490
 8000fb8:	40668000 	.word	0x40668000
 8000fbc:	20000318 	.word	0x20000318
 8000fc0:	20000380 	.word	0x20000380
 8000fc4:	20000498 	.word	0x20000498
 8000fc8:	20000328 	.word	0x20000328
 8000fcc:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <main+0x534>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff f8c1 	bl	8000158 <__aeabi_dsub>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <main+0x538>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f003 f850 	bl	800408c <sin>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fa68 	bl	80004c8 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <main+0x53c>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f8a9 	bl	800015c <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	495f      	ldr	r1, [pc, #380]	; (800118c <main+0x53c>)
 8001010:	e9c1 2300 	strd	r2, r3, [r1]
				last_rot = rot;
 8001014:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <main+0x538>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	495d      	ldr	r1, [pc, #372]	; (8001190 <main+0x540>)
 800101c:	e9c1 2300 	strd	r2, r3, [r1]
			}

			//obliczanie czasu i innych zmiennych do aktualizacji napisów
			//pozycja
			x_e = (int) x_n;
 8001020:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <main+0x544>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fce7 	bl	80009fc <__aeabi_d2iz>
 800102e:	4603      	mov	r3, r0
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <main+0x548>)
 8001034:	801a      	strh	r2, [r3, #0]
			y_e = (int) y_n;
 8001036:	4b55      	ldr	r3, [pc, #340]	; (800118c <main+0x53c>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fcdc 	bl	80009fc <__aeabi_d2iz>
 8001044:	4603      	mov	r3, r0
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b54      	ldr	r3, [pc, #336]	; (800119c <main+0x54c>)
 800104a:	801a      	strh	r2, [r3, #0]

			//predkosc

			v_e = (int) velocity * 10;
 800104c:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <main+0x550>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fcd1 	bl	80009fc <__aeabi_d2iz>
 800105a:	4603      	mov	r3, r0
 800105c:	b29b      	uxth	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b4e      	ldr	r3, [pc, #312]	; (80011a4 <main+0x554>)
 800106c:	801a      	strh	r2, [r3, #0]

			//czas
			milsec = time % 10;
 800106e:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <main+0x558>)
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <main+0x55c>)
 8001074:	fba3 2301 	umull	r2, r3, r3, r1
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	1aca      	subs	r2, r1, r3
 8001084:	b292      	uxth	r2, r2
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <main+0x560>)
 8001088:	801a      	strh	r2, [r3, #0]
			sec = (time - milsec) / 10;
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <main+0x558>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <main+0x560>)
 8001090:	8812      	ldrh	r2, [r2, #0]
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	4a45      	ldr	r2, [pc, #276]	; (80011ac <main+0x55c>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <main+0x564>)
 80010a0:	801a      	strh	r2, [r3, #0]

			//rotacja
			rot_e = (int) 10 * rot_d;
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <main+0x568>)
 80010a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b43      	ldr	r3, [pc, #268]	; (80011bc <main+0x56c>)
 80010ae:	f7ff fa0b 	bl	80004c8 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fc9f 	bl	80009fc <__aeabi_d2iz>
 80010be:	4603      	mov	r3, r0
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <main+0x570>)
 80010c4:	801a      	strh	r2, [r3, #0]

			if (rot_e >= 1800)
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <main+0x570>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80010d0:	db0a      	blt.n	80010e8 <main+0x498>
				rot_e = rot_e - 3600;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <main+0x570>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <main+0x570>)
 80010e4:	801a      	strh	r2, [r3, #0]
 80010e6:	e00f      	b.n	8001108 <main+0x4b8>
			else if (rot_e <= -1800)
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <main+0x570>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 80010f2:	dc09      	bgt.n	8001108 <main+0x4b8>
				rot_e = rot_e + 3600;
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <main+0x570>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8001100:	b29b      	uxth	r3, r3
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <main+0x570>)
 8001106:	801a      	strh	r2, [r3, #0]

			if (rot_e >= 0)
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <main+0x570>)
 800110a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db03      	blt.n	800111a <main+0x4ca>
				napis2[4] = '+';
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <main+0x574>)
 8001114:	222b      	movs	r2, #43	; 0x2b
 8001116:	711a      	strb	r2, [r3, #4]
 8001118:	e002      	b.n	8001120 <main+0x4d0>
			else
				napis2[4] = '-';
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <main+0x574>)
 800111c:	222d      	movs	r2, #45	; 0x2d
 800111e:	711a      	strb	r2, [r3, #4]

			rot_e = abs(rot_e);
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <main+0x570>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bfb8      	it	lt
 800112a:	425b      	neglt	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <main+0x570>)
 8001132:	801a      	strh	r2, [r3, #0]
			//predkosc katowa

			ang_e = (int) 1000 * angular_velocity;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <main+0x578>)
 8001136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <main+0x57c>)
 8001140:	f7ff f9c2 	bl	80004c8 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fc56 	bl	80009fc <__aeabi_d2iz>
 8001150:	4603      	mov	r3, r0
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <main+0x580>)
 8001156:	801a      	strh	r2, [r3, #0]

			//aktualizacja opisow
			//pozycja
			if (x_e >= 0)
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <main+0x548>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db03      	blt.n	800116a <main+0x51a>
				napis1[4] = '+';
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <main+0x584>)
 8001164:	222b      	movs	r2, #43	; 0x2b
 8001166:	711a      	strb	r2, [r3, #4]
 8001168:	e002      	b.n	8001170 <main+0x520>
			else
				napis1[4] = '-';
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <main+0x584>)
 800116c:	222d      	movs	r2, #45	; 0x2d
 800116e:	711a      	strb	r2, [r3, #4]
			if (y_e >= 0)
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <main+0x54c>)
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db2e      	blt.n	80011d8 <main+0x588>
				napis1[9] = '+';
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <main+0x584>)
 800117c:	222b      	movs	r2, #43	; 0x2b
 800117e:	725a      	strb	r2, [r3, #9]
 8001180:	e02d      	b.n	80011de <main+0x58e>
 8001182:	bf00      	nop
 8001184:	20000380 	.word	0x20000380
 8001188:	20000308 	.word	0x20000308
 800118c:	20000398 	.word	0x20000398
 8001190:	20000390 	.word	0x20000390
 8001194:	20000328 	.word	0x20000328
 8001198:	20000378 	.word	0x20000378
 800119c:	20000312 	.word	0x20000312
 80011a0:	20000290 	.word	0x20000290
 80011a4:	20000310 	.word	0x20000310
 80011a8:	20000284 	.word	0x20000284
 80011ac:	cccccccd 	.word	0xcccccccd
 80011b0:	2000028e 	.word	0x2000028e
 80011b4:	20000288 	.word	0x20000288
 80011b8:	20000318 	.word	0x20000318
 80011bc:	40240000 	.word	0x40240000
 80011c0:	2000028a 	.word	0x2000028a
 80011c4:	20000010 	.word	0x20000010
 80011c8:	20000298 	.word	0x20000298
 80011cc:	408f4000 	.word	0x408f4000
 80011d0:	2000028c 	.word	0x2000028c
 80011d4:	20000000 	.word	0x20000000
			else
				napis1[9] = '-';
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <main+0x738>)
 80011da:	222d      	movs	r2, #45	; 0x2d
 80011dc:	725a      	strb	r2, [r3, #9]
			x_e = abs(x_e);
 80011de:	4b6b      	ldr	r3, [pc, #428]	; (800138c <main+0x73c>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bfb8      	it	lt
 80011e8:	425b      	neglt	r3, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <main+0x73c>)
 80011f0:	801a      	strh	r2, [r3, #0]
			y_e = abs(y_e);
 80011f2:	4b67      	ldr	r3, [pc, #412]	; (8001390 <main+0x740>)
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bfb8      	it	lt
 80011fc:	425b      	neglt	r3, r3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b63      	ldr	r3, [pc, #396]	; (8001390 <main+0x740>)
 8001204:	801a      	strh	r2, [r3, #0]
			//x
			napis1[5] = '0' + (x_e - x_e % 100) / 100;
 8001206:	4b61      	ldr	r3, [pc, #388]	; (800138c <main+0x73c>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	4618      	mov	r0, r3
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <main+0x73c>)
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	4a5f      	ldr	r2, [pc, #380]	; (8001394 <main+0x744>)
 8001216:	fb82 1203 	smull	r1, r2, r2, r3
 800121a:	1151      	asrs	r1, r2, #5
 800121c:	17da      	asrs	r2, r3, #31
 800121e:	1a8a      	subs	r2, r1, r2
 8001220:	2164      	movs	r1, #100	; 0x64
 8001222:	fb01 f202 	mul.w	r2, r1, r2
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	1ac3      	subs	r3, r0, r3
 800122c:	4a59      	ldr	r2, [pc, #356]	; (8001394 <main+0x744>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1152      	asrs	r2, r2, #5
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3330      	adds	r3, #48	; 0x30
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b52      	ldr	r3, [pc, #328]	; (8001388 <main+0x738>)
 8001240:	715a      	strb	r2, [r3, #5]
			napis1[6] = '0' + (x_e % 100 - x_e % 10) / 10;
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <main+0x73c>)
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <main+0x744>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1151      	asrs	r1, r2, #5
 8001250:	17da      	asrs	r2, r3, #31
 8001252:	1a8a      	subs	r2, r1, r2
 8001254:	2164      	movs	r1, #100	; 0x64
 8001256:	fb01 f202 	mul.w	r2, r1, r2
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <main+0x73c>)
 8001262:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <main+0x748>)
 8001268:	fb83 1302 	smull	r1, r3, r3, r2
 800126c:	1099      	asrs	r1, r3, #2
 800126e:	17d3      	asrs	r3, r2, #31
 8001270:	1ac9      	subs	r1, r1, r3
 8001272:	460b      	mov	r3, r1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b21b      	sxth	r3, r3
 800127e:	1ac3      	subs	r3, r0, r3
 8001280:	4a45      	ldr	r2, [pc, #276]	; (8001398 <main+0x748>)
 8001282:	fb82 1203 	smull	r1, r2, r2, r3
 8001286:	1092      	asrs	r2, r2, #2
 8001288:	17db      	asrs	r3, r3, #31
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3330      	adds	r3, #48	; 0x30
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <main+0x738>)
 8001294:	719a      	strb	r2, [r3, #6]
			napis1[7] = '0' + x_e % 10;
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <main+0x73c>)
 8001298:	f9b3 2000 	ldrsh.w	r2, [r3]
 800129c:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <main+0x748>)
 800129e:	fb83 1302 	smull	r1, r3, r3, r2
 80012a2:	1099      	asrs	r1, r3, #2
 80012a4:	17d3      	asrs	r3, r2, #31
 80012a6:	1ac9      	subs	r1, r1, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3330      	adds	r3, #48	; 0x30
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <main+0x738>)
 80012bc:	71da      	strb	r2, [r3, #7]
			//y
			napis1[10] = '0' + (y_e - y_e % 100) / 100;
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <main+0x740>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	4618      	mov	r0, r3
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <main+0x740>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <main+0x744>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	1151      	asrs	r1, r2, #5
 80012d4:	17da      	asrs	r2, r3, #31
 80012d6:	1a8a      	subs	r2, r1, r2
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	fb01 f202 	mul.w	r2, r1, r2
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	1ac3      	subs	r3, r0, r3
 80012e4:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <main+0x744>)
 80012e6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ea:	1152      	asrs	r2, r2, #5
 80012ec:	17db      	asrs	r3, r3, #31
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	3330      	adds	r3, #48	; 0x30
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <main+0x738>)
 80012f8:	729a      	strb	r2, [r3, #10]
			napis1[11] = '0' + (y_e % 100 - y_e % 10) / 10;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <main+0x740>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <main+0x744>)
 8001302:	fb82 1203 	smull	r1, r2, r2, r3
 8001306:	1151      	asrs	r1, r2, #5
 8001308:	17da      	asrs	r2, r3, #31
 800130a:	1a8a      	subs	r2, r1, r2
 800130c:	2164      	movs	r1, #100	; 0x64
 800130e:	fb01 f202 	mul.w	r2, r1, r2
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <main+0x740>)
 800131a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <main+0x748>)
 8001320:	fb83 1302 	smull	r1, r3, r3, r2
 8001324:	1099      	asrs	r1, r3, #2
 8001326:	17d3      	asrs	r3, r2, #31
 8001328:	1ac9      	subs	r1, r1, r3
 800132a:	460b      	mov	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b21b      	sxth	r3, r3
 8001336:	1ac3      	subs	r3, r0, r3
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <main+0x748>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	1092      	asrs	r2, r2, #2
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <main+0x738>)
 800134c:	72da      	strb	r2, [r3, #11]
			napis1[12] = '0' + y_e % 10;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <main+0x740>)
 8001350:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <main+0x748>)
 8001356:	fb83 1302 	smull	r1, r3, r3, r2
 800135a:	1099      	asrs	r1, r3, #2
 800135c:	17d3      	asrs	r3, r2, #31
 800135e:	1ac9      	subs	r1, r1, r3
 8001360:	460b      	mov	r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b21b      	sxth	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <main+0x738>)
 8001374:	731a      	strb	r2, [r3, #12]

			//predkosc
			if (v_e >= 0)
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <main+0x74c>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db11      	blt.n	80013a4 <main+0x754>
				napis3[4] = '+';
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <main+0x750>)
 8001382:	222b      	movs	r2, #43	; 0x2b
 8001384:	711a      	strb	r2, [r3, #4]
 8001386:	e010      	b.n	80013aa <main+0x75a>
 8001388:	20000000 	.word	0x20000000
 800138c:	20000378 	.word	0x20000378
 8001390:	20000312 	.word	0x20000312
 8001394:	51eb851f 	.word	0x51eb851f
 8001398:	66666667 	.word	0x66666667
 800139c:	20000310 	.word	0x20000310
 80013a0:	20000020 	.word	0x20000020
			else
				napis3[4] = '-';
 80013a4:	4b86      	ldr	r3, [pc, #536]	; (80015c0 <main+0x970>)
 80013a6:	222d      	movs	r2, #45	; 0x2d
 80013a8:	711a      	strb	r2, [r3, #4]
			v_e = abs(v_e);
 80013aa:	4b86      	ldr	r3, [pc, #536]	; (80015c4 <main+0x974>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bfb8      	it	lt
 80013b4:	425b      	neglt	r3, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <main+0x974>)
 80013bc:	801a      	strh	r2, [r3, #0]
			napis3[5] = '0' +(v_e-v_e%100)/100;
 80013be:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <main+0x974>)
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	4618      	mov	r0, r3
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <main+0x974>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	4a7e      	ldr	r2, [pc, #504]	; (80015c8 <main+0x978>)
 80013ce:	fb82 1203 	smull	r1, r2, r2, r3
 80013d2:	1151      	asrs	r1, r2, #5
 80013d4:	17da      	asrs	r2, r3, #31
 80013d6:	1a8a      	subs	r2, r1, r2
 80013d8:	2164      	movs	r1, #100	; 0x64
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	1ac3      	subs	r3, r0, r3
 80013e4:	4a78      	ldr	r2, [pc, #480]	; (80015c8 <main+0x978>)
 80013e6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ea:	1152      	asrs	r2, r2, #5
 80013ec:	17db      	asrs	r3, r3, #31
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3330      	adds	r3, #48	; 0x30
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <main+0x970>)
 80013f8:	715a      	strb	r2, [r3, #5]
			napis3[6] = '0' +(v_e%100-v_e%10)/10;
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <main+0x974>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	4a71      	ldr	r2, [pc, #452]	; (80015c8 <main+0x978>)
 8001402:	fb82 1203 	smull	r1, r2, r2, r3
 8001406:	1151      	asrs	r1, r2, #5
 8001408:	17da      	asrs	r2, r3, #31
 800140a:	1a8a      	subs	r2, r1, r2
 800140c:	2164      	movs	r1, #100	; 0x64
 800140e:	fb01 f202 	mul.w	r2, r1, r2
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <main+0x974>)
 800141a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800141e:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <main+0x97c>)
 8001420:	fb83 1302 	smull	r1, r3, r3, r2
 8001424:	1099      	asrs	r1, r3, #2
 8001426:	17d3      	asrs	r3, r2, #31
 8001428:	1ac9      	subs	r1, r1, r3
 800142a:	460b      	mov	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b21b      	sxth	r3, r3
 8001436:	1ac3      	subs	r3, r0, r3
 8001438:	4a64      	ldr	r2, [pc, #400]	; (80015cc <main+0x97c>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	1092      	asrs	r2, r2, #2
 8001440:	17db      	asrs	r3, r3, #31
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3330      	adds	r3, #48	; 0x30
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <main+0x970>)
 800144c:	719a      	strb	r2, [r3, #6]
			napis3[8] = '0' +v_e%10;
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <main+0x974>)
 8001450:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <main+0x97c>)
 8001456:	fb83 1302 	smull	r1, r3, r3, r2
 800145a:	1099      	asrs	r1, r3, #2
 800145c:	17d3      	asrs	r3, r2, #31
 800145e:	1ac9      	subs	r1, r1, r3
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b21b      	sxth	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3330      	adds	r3, #48	; 0x30
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <main+0x970>)
 8001474:	721a      	strb	r2, [r3, #8]

			//rotacja
			napis2[5] = '0' + (rot_e - rot_e % 1000) / 1000;
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <main+0x980>)
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	4618      	mov	r0, r3
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <main+0x980>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <main+0x984>)
 8001486:	fb82 1203 	smull	r1, r2, r2, r3
 800148a:	1191      	asrs	r1, r2, #6
 800148c:	17da      	asrs	r2, r3, #31
 800148e:	1a8a      	subs	r2, r1, r2
 8001490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001494:	fb01 f202 	mul.w	r2, r1, r2
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	1ac3      	subs	r3, r0, r3
 800149e:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <main+0x984>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1192      	asrs	r2, r2, #6
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3330      	adds	r3, #48	; 0x30
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <main+0x988>)
 80014b2:	715a      	strb	r2, [r3, #5]
			napis2[6] = '0' + (rot_e % 1000 - rot_e % 100) / 100;
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <main+0x980>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <main+0x984>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	1191      	asrs	r1, r2, #6
 80014c2:	17da      	asrs	r2, r3, #31
 80014c4:	1a8a      	subs	r2, r1, r2
 80014c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ca:	fb01 f202 	mul.w	r2, r1, r2
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <main+0x980>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4a3b      	ldr	r2, [pc, #236]	; (80015c8 <main+0x978>)
 80014dc:	fb82 1203 	smull	r1, r2, r2, r3
 80014e0:	1151      	asrs	r1, r2, #5
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	1a8a      	subs	r2, r1, r2
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	fb01 f202 	mul.w	r2, r1, r2
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	1ac3      	subs	r3, r0, r3
 80014f2:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <main+0x978>)
 80014f4:	fb82 1203 	smull	r1, r2, r2, r3
 80014f8:	1152      	asrs	r2, r2, #5
 80014fa:	17db      	asrs	r3, r3, #31
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	3330      	adds	r3, #48	; 0x30
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <main+0x988>)
 8001506:	719a      	strb	r2, [r3, #6]
			napis2[7] = '0' + (rot_e % 100 - rot_e % 10) / 10;
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <main+0x980>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <main+0x978>)
 8001510:	fb82 1203 	smull	r1, r2, r2, r3
 8001514:	1151      	asrs	r1, r2, #5
 8001516:	17da      	asrs	r2, r3, #31
 8001518:	1a8a      	subs	r2, r1, r2
 800151a:	2164      	movs	r1, #100	; 0x64
 800151c:	fb01 f202 	mul.w	r2, r1, r2
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <main+0x980>)
 8001528:	f9b3 2000 	ldrsh.w	r2, [r3]
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <main+0x97c>)
 800152e:	fb83 1302 	smull	r1, r3, r3, r2
 8001532:	1099      	asrs	r1, r3, #2
 8001534:	17d3      	asrs	r3, r2, #31
 8001536:	1ac9      	subs	r1, r1, r3
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	b21b      	sxth	r3, r3
 8001544:	1ac3      	subs	r3, r0, r3
 8001546:	4a21      	ldr	r2, [pc, #132]	; (80015cc <main+0x97c>)
 8001548:	fb82 1203 	smull	r1, r2, r2, r3
 800154c:	1092      	asrs	r2, r2, #2
 800154e:	17db      	asrs	r3, r3, #31
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3330      	adds	r3, #48	; 0x30
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <main+0x988>)
 800155a:	71da      	strb	r2, [r3, #7]
			napis2[9] = '0' + rot_e % 10;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <main+0x980>)
 800155e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <main+0x97c>)
 8001564:	fb83 1302 	smull	r1, r3, r3, r2
 8001568:	1099      	asrs	r1, r3, #2
 800156a:	17d3      	asrs	r3, r2, #31
 800156c:	1ac9      	subs	r1, r1, r3
 800156e:	460b      	mov	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b21b      	sxth	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3330      	adds	r3, #48	; 0x30
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <main+0x988>)
 8001582:	725a      	strb	r2, [r3, #9]

			//predkosc katowa
			if (ang_e == 0) {
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <main+0x98c>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <main+0x95e>
				napis4[3] = '+';
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <main+0x990>)
 8001590:	222b      	movs	r2, #43	; 0x2b
 8001592:	70da      	strb	r2, [r3, #3]
				napis4[4] = '0';
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <main+0x990>)
 8001596:	2230      	movs	r2, #48	; 0x30
 8001598:	711a      	strb	r2, [r3, #4]
				napis4[6] = '0';
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <main+0x990>)
 800159c:	2230      	movs	r2, #48	; 0x30
 800159e:	719a      	strb	r2, [r3, #6]
				napis4[7] = '0';
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <main+0x990>)
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	71da      	strb	r2, [r3, #7]
				napis4[8] = '0';
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <main+0x990>)
 80015a8:	2230      	movs	r2, #48	; 0x30
 80015aa:	721a      	strb	r2, [r3, #8]
 80015ac:	e083      	b.n	80016b6 <main+0xa66>
			} else {
				if (ang_e >= 0)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <main+0x98c>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db15      	blt.n	80015e4 <main+0x994>
					napis4[3] = '+';
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <main+0x990>)
 80015ba:	222b      	movs	r2, #43	; 0x2b
 80015bc:	70da      	strb	r2, [r3, #3]
 80015be:	e014      	b.n	80015ea <main+0x99a>
 80015c0:	20000020 	.word	0x20000020
 80015c4:	20000310 	.word	0x20000310
 80015c8:	51eb851f 	.word	0x51eb851f
 80015cc:	66666667 	.word	0x66666667
 80015d0:	2000028a 	.word	0x2000028a
 80015d4:	10624dd3 	.word	0x10624dd3
 80015d8:	20000010 	.word	0x20000010
 80015dc:	2000028c 	.word	0x2000028c
 80015e0:	20000030 	.word	0x20000030
				else
					napis4[3] = '-';
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <main+0xb74>)
 80015e6:	222d      	movs	r2, #45	; 0x2d
 80015e8:	70da      	strb	r2, [r3, #3]
				ang_e = abs(ang_e);
 80015ea:	4b77      	ldr	r3, [pc, #476]	; (80017c8 <main+0xb78>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bfb8      	it	lt
 80015f4:	425b      	neglt	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <main+0xb78>)
 80015fc:	801a      	strh	r2, [r3, #0]
				napis4[6] = '0' + (ang_e - ang_e % 100) / 100;
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <main+0xb78>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	4618      	mov	r0, r3
 8001606:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <main+0xb78>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	4a6f      	ldr	r2, [pc, #444]	; (80017cc <main+0xb7c>)
 800160e:	fb82 1203 	smull	r1, r2, r2, r3
 8001612:	1151      	asrs	r1, r2, #5
 8001614:	17da      	asrs	r2, r3, #31
 8001616:	1a8a      	subs	r2, r1, r2
 8001618:	2164      	movs	r1, #100	; 0x64
 800161a:	fb01 f202 	mul.w	r2, r1, r2
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	b21b      	sxth	r3, r3
 8001622:	1ac3      	subs	r3, r0, r3
 8001624:	4a69      	ldr	r2, [pc, #420]	; (80017cc <main+0xb7c>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	1152      	asrs	r2, r2, #5
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3330      	adds	r3, #48	; 0x30
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <main+0xb74>)
 8001638:	719a      	strb	r2, [r3, #6]
				napis4[7] = '0' + (ang_e % 100 - ang_e % 10) / 10;
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <main+0xb78>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	4a62      	ldr	r2, [pc, #392]	; (80017cc <main+0xb7c>)
 8001642:	fb82 1203 	smull	r1, r2, r2, r3
 8001646:	1151      	asrs	r1, r2, #5
 8001648:	17da      	asrs	r2, r3, #31
 800164a:	1a8a      	subs	r2, r1, r2
 800164c:	2164      	movs	r1, #100	; 0x64
 800164e:	fb01 f202 	mul.w	r2, r1, r2
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	b21b      	sxth	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <main+0xb78>)
 800165a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <main+0xb80>)
 8001660:	fb83 1302 	smull	r1, r3, r3, r2
 8001664:	1099      	asrs	r1, r3, #2
 8001666:	17d3      	asrs	r3, r2, #31
 8001668:	1ac9      	subs	r1, r1, r3
 800166a:	460b      	mov	r3, r1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	1ac3      	subs	r3, r0, r3
 8001678:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <main+0xb80>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1092      	asrs	r2, r2, #2
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3330      	adds	r3, #48	; 0x30
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <main+0xb74>)
 800168c:	71da      	strb	r2, [r3, #7]
				napis4[8] = '0' + ang_e % 10;
 800168e:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <main+0xb78>)
 8001690:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001694:	4b4e      	ldr	r3, [pc, #312]	; (80017d0 <main+0xb80>)
 8001696:	fb83 1302 	smull	r1, r3, r3, r2
 800169a:	1099      	asrs	r1, r3, #2
 800169c:	17d3      	asrs	r3, r2, #31
 800169e:	1ac9      	subs	r1, r1, r3
 80016a0:	460b      	mov	r3, r1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3330      	adds	r3, #48	; 0x30
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <main+0xb74>)
 80016b4:	721a      	strb	r2, [r3, #8]
			}
			//czas
			napis5[8] = '0' + sec % 10;
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <main+0xb84>)
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <main+0xb88>)
 80016bc:	fba3 1302 	umull	r1, r3, r3, r2
 80016c0:	08d9      	lsrs	r1, r3, #3
 80016c2:	460b      	mov	r3, r1
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	3330      	adds	r3, #48	; 0x30
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <main+0xb8c>)
 80016d6:	721a      	strb	r2, [r3, #8]
			napis5[7] = '0' + (sec % 100 - sec % 10) / 10;
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <main+0xb84>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <main+0xb7c>)
 80016de:	fba2 1203 	umull	r1, r2, r2, r3
 80016e2:	0952      	lsrs	r2, r2, #5
 80016e4:	2164      	movs	r1, #100	; 0x64
 80016e6:	fb01 f202 	mul.w	r2, r1, r2
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <main+0xb84>)
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <main+0xb88>)
 80016f6:	fba3 1302 	umull	r1, r3, r3, r2
 80016fa:	08d9      	lsrs	r1, r3, #3
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	1ac3      	subs	r3, r0, r3
 800170a:	4a31      	ldr	r2, [pc, #196]	; (80017d0 <main+0xb80>)
 800170c:	fb82 1203 	smull	r1, r2, r2, r3
 8001710:	1092      	asrs	r2, r2, #2
 8001712:	17db      	asrs	r3, r3, #31
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3330      	adds	r3, #48	; 0x30
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <main+0xb8c>)
 800171e:	71da      	strb	r2, [r3, #7]
			napis5[6] = '0' + (sec - sec % 100) / 100;
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <main+0xb84>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <main+0xb84>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	4a28      	ldr	r2, [pc, #160]	; (80017cc <main+0xb7c>)
 800172c:	fba2 1203 	umull	r1, r2, r2, r3
 8001730:	0952      	lsrs	r2, r2, #5
 8001732:	2164      	movs	r1, #100	; 0x64
 8001734:	fb01 f202 	mul.w	r2, r1, r2
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	1ac3      	subs	r3, r0, r3
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <main+0xb7c>)
 8001740:	fb82 1203 	smull	r1, r2, r2, r3
 8001744:	1152      	asrs	r2, r2, #5
 8001746:	17db      	asrs	r3, r3, #31
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3330      	adds	r3, #48	; 0x30
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <main+0xb8c>)
 8001752:	719a      	strb	r2, [r3, #6]
			napis5[10] = '0' + milsec;
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <main+0xb90>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3330      	adds	r3, #48	; 0x30
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <main+0xb8c>)
 8001760:	729a      	strb	r2, [r3, #10]

			lcd_clear();
 8001762:	f7ff f9b1 	bl	8000ac8 <lcd_clear>
			lcd_draw_text(0, 0, napis1);
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <main+0xb94>)
 8001768:	2100      	movs	r1, #0
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff f9b8 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(1, 0, napis2);
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <main+0xb98>)
 8001772:	2100      	movs	r1, #0
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff f9b3 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(2, 0, napis3);
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <main+0xb9c>)
 800177c:	2100      	movs	r1, #0
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff f9ae 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(3, 0, napis4);
 8001784:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <main+0xb74>)
 8001786:	2100      	movs	r1, #0
 8001788:	2003      	movs	r0, #3
 800178a:	f7ff f9a9 	bl	8000ae0 <lcd_draw_text>
			lcd_draw_text(4, 0, napis5);
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <main+0xb8c>)
 8001790:	2100      	movs	r1, #0
 8001792:	2004      	movs	r0, #4
 8001794:	f7ff f9a4 	bl	8000ae0 <lcd_draw_text>
			lcd_copy();
 8001798:	f7ff f9ea 	bl	8000b70 <lcd_copy>
			last_state_1 = pulse_count_1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <main+0xba0>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <main+0xba4>)
 80017a6:	801a      	strh	r2, [r3, #0]
			last_state_2 = pulse_count_2;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <main+0xba8>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <main+0xbac>)
 80017b2:	801a      	strh	r2, [r3, #0]
			D_last = D;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <main+0xbb0>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	4912      	ldr	r1, [pc, #72]	; (8001804 <main+0xbb4>)
 80017bc:	e9c1 2300 	strd	r2, r3, [r1]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80017c0:	f7ff ba94 	b.w	8000cec <main+0x9c>
 80017c4:	20000030 	.word	0x20000030
 80017c8:	2000028c 	.word	0x2000028c
 80017cc:	51eb851f 	.word	0x51eb851f
 80017d0:	66666667 	.word	0x66666667
 80017d4:	20000288 	.word	0x20000288
 80017d8:	cccccccd 	.word	0xcccccccd
 80017dc:	20000040 	.word	0x20000040
 80017e0:	2000028e 	.word	0x2000028e
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20000020 	.word	0x20000020
 80017f0:	200003e8 	.word	0x200003e8
 80017f4:	200002a0 	.word	0x200002a0
 80017f8:	20000488 	.word	0x20000488
 80017fc:	200002a2 	.word	0x200002a2
 8001800:	20000300 	.word	0x20000300
 8001804:	20000380 	.word	0x20000380

08001808 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b090      	sub	sp, #64	; 0x40
 800180c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2228      	movs	r2, #40	; 0x28
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fbee 	bl	8003ff8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182e:	2301      	movs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001832:	2310      	movs	r3, #16
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f000 ff0c 	bl	800265c <HAL_RCC_OscConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0x46>
		Error_Handler();
 800184a:	f000 fa09 	bl	8001c60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800184e:	230f      	movs	r3, #15
 8001850:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f001 f978 	bl	8002b5c <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x6e>
		Error_Handler();
 8001872:	f000 f9f5 	bl	8001c60 <Error_Handler>
	}
}
 8001876:	bf00      	nop
 8001878:	3740      	adds	r7, #64	; 0x40
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_SPI2_Init+0x64>)
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <MX_SPI2_Init+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI2_Init+0x64>)
 800188c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001890:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI2_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_SPI2_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018b4:	2210      	movs	r2, #16
 80018b6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018cc:	220a      	movs	r2, #10
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018d2:	f001 fadd 	bl	8002e90 <HAL_SPI_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80018dc:	f000 f9c0 	bl	8001c60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002a4 	.word	0x200002a4
 80018e8:	40003800 	.word	0x40003800

080018ec <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 fb7c 	bl	8003ff8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MX_TIM1_Init+0xa8>)
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <MX_TIM1_Init+0xac>)
 800190c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_TIM1_Init+0xa8>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_TIM1_Init+0xa8>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_TIM1_Init+0xa8>)
 800191c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001920:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_TIM1_Init+0xa8>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_TIM1_Init+0xa8>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_TIM1_Init+0xa8>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001934:	2303      	movs	r3, #3
 8001936:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800193c:	2301      	movs	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8001944:	230f      	movs	r3, #15
 8001946:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8001954:	230f      	movs	r3, #15
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_TIM1_Init+0xa8>)
 8001960:	f001 fd9e 	bl	80034a0 <HAL_TIM_Encoder_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0x82>
		Error_Handler();
 800196a:	f000 f979 	bl	8001c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <MX_TIM1_Init+0xa8>)
 800197c:	f002 f9cc 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001986:	f000 f96b 	bl	8001c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	3730      	adds	r7, #48	; 0x30
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200003a0 	.word	0x200003a0
 8001998:	40012c00 	.word	0x40012c00

0800199c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2224      	movs	r2, #36	; 0x24
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fb24 	bl	8003ff8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019be:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019e0:	2303      	movs	r3, #3
 80019e2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 80019f0:	230f      	movs	r3, #15
 80019f2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8001a00:	230f      	movs	r3, #15
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM2_Init+0xa4>)
 8001a0c:	f001 fd48 	bl	80034a0 <HAL_TIM_Encoder_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001a16:	f000 f923 	bl	8001c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM2_Init+0xa4>)
 8001a28:	f002 f976 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001a32:	f000 f915 	bl	8001c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	; 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200003f8 	.word	0x200003f8

08001a44 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <MX_TIM3_Init+0x98>)
 8001a64:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 799;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a68:	f240 321f 	movw	r2, #799	; 0x31f
 8001a6c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001a8a:	f001 fc67 	bl	800335c <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001a94:	f000 f8e4 	bl	8001c60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001aa6:	f001 ff33 	bl	8003910 <HAL_TIM_ConfigClockSource>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001ab0:	f000 f8d6 	bl	8001c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001abc:	463b      	mov	r3, r7
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_TIM3_Init+0x94>)
 8001ac2:	f002 f929 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001acc:	f000 f8c8 	bl	8001c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000330 	.word	0x20000330
 8001adc:	40000400 	.word	0x40000400

08001ae0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <MX_USART2_UART_Init+0x50>)
 8001ae8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b18:	f002 f96e 	bl	8003df8 <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001b22:	f000 f89d 	bl	8001c60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000440 	.word	0x20000440
 8001b30:	40004400 	.word	0x40004400

08001b34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <MX_GPIO_Init+0x118>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6,
 8001ba8:	2200      	movs	r2, #0
 8001baa:	214e      	movs	r1, #78	; 0x4e
 8001bac:	4828      	ldr	r0, [pc, #160]	; (8001c50 <MX_GPIO_Init+0x11c>)
 8001bae:	f000 fd1a 	bl	80025e6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	4827      	ldr	r0, [pc, #156]	; (8001c54 <MX_GPIO_Init+0x120>)
 8001bb8:	f000 fd15 	bl	80025e6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	4825      	ldr	r0, [pc, #148]	; (8001c58 <MX_GPIO_Init+0x124>)
 8001bc2:	f000 fd10 	bl	80025e6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <MX_GPIO_Init+0x128>)
 8001bce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	481d      	ldr	r0, [pc, #116]	; (8001c50 <MX_GPIO_Init+0x11c>)
 8001bdc:	f000 fb68 	bl	80022b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC1 PC2 PC3 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6;
 8001be0:	234e      	movs	r3, #78	; 0x4e
 8001be2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4816      	ldr	r0, [pc, #88]	; (8001c50 <MX_GPIO_Init+0x11c>)
 8001bf8:	f000 fb5a 	bl	80022b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	4810      	ldr	r0, [pc, #64]	; (8001c54 <MX_GPIO_Init+0x120>)
 8001c14:	f000 fb4c 	bl	80022b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c18:	2340      	movs	r3, #64	; 0x40
 8001c1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <MX_GPIO_Init+0x124>)
 8001c30:	f000 fb3e 	bl	80022b0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2028      	movs	r0, #40	; 0x28
 8001c3a:	f000 fb02 	bl	8002242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c3e:	2028      	movs	r0, #40	; 0x28
 8001c40:	f000 fb1b 	bl	800227a <HAL_NVIC_EnableIRQ>

}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	10110000 	.word	0x10110000

08001c60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c64:	b672      	cpsid	i
}
 8001c66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c68:	e7fe      	b.n	8001c68 <Error_Handler+0x8>
	...

08001c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_MspInit+0x5c>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_MspInit+0x5c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6193      	str	r3, [r2, #24]
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_MspInit+0x5c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_MspInit+0x5c>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_MspInit+0x5c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_MspInit+0x5c>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_MspInit+0x60>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_MspInit+0x60>)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_SPI_MspInit+0x8c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d131      	bne.n	8001d54 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_SPI_MspInit+0x90>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_SPI_MspInit+0x90>)
 8001cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_SPI_MspInit+0x90>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_SPI_MspInit+0x90>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_SPI_MspInit+0x90>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_SPI_MspInit+0x90>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d20:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_SPI_MspInit+0x94>)
 8001d36:	f000 fabb 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_SPI_MspInit+0x94>)
 8001d50:	f000 faae 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40003800 	.word	0x40003800
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010c00 	.word	0x40010c00

08001d68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d125      	bne.n	8001dd4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0318 	add.w	r3, r7, #24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481a      	ldr	r0, [pc, #104]	; (8001e38 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001dce:	f000 fa6f 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dd2:	e028      	b.n	8001e26 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d123      	bne.n	8001e26 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6193      	str	r3, [r2, #24]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001e22:	f000 fa45 	bl	80022b0 <HAL_GPIO_Init>
}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800

08001e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_TIM_Base_MspInit+0x44>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d113      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_TIM_Base_MspInit+0x48>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_TIM_Base_MspInit+0x48>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_TIM_Base_MspInit+0x48>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	201d      	movs	r0, #29
 8001e6c:	f000 f9e9 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e70:	201d      	movs	r0, #29
 8001e72:	f000 fa02 	bl	800227a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <HAL_UART_MspInit+0x70>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d123      	bne.n	8001ef0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_UART_MspInit+0x74>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_UART_MspInit+0x74>)
 8001eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb2:	61d3      	str	r3, [r2, #28]
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_UART_MspInit+0x74>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_UART_MspInit+0x74>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_UART_MspInit+0x74>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_UART_MspInit+0x74>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ed8:	230c      	movs	r3, #12
 8001eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_UART_MspInit+0x78>)
 8001eec:	f000 f9e0 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010800 	.word	0x40010800

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4a:	f000 f887 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM3_IRQHandler+0x10>)
 8001f5a:	f001 fbd1 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000330 	.word	0x20000330

08001f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f70:	f000 fb52 	bl	8002618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
  ldr r2, =_sbss
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fa0:	f842 3b04 	str.w	r3, [r2], #4

08001fa4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffe5 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f001 ffff 	bl	8003fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb2:	f7fe fe4d 	bl	8000c50 <main>
  bx lr
 8001fb6:	4770      	bx	lr
  ldr r3, =_sidata
 8001fb8:	080054d8 	.word	0x080054d8
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fc0:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8001fc4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001fc8:	200004a4 	.word	0x200004a4

08001fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_2_IRQHandler>
	...

08001fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_Init+0x28>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_Init+0x28>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f923 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f808 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fe3e 	bl	8001c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f93b 	bl	8002296 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f903 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000060 	.word	0x20000060
 8002054:	20000068 	.word	0x20000068
 8002058:	20000064 	.word	0x20000064

0800205c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x1c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_IncTick+0x20>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_IncTick+0x20>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000068 	.word	0x20000068
 800207c:	200004a0 	.word	0x200004a0

08002080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <HAL_GetTick+0x10>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	200004a0 	.word	0x200004a0

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <__NVIC_EnableIRQ+0x34>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff90 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff2d 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff42 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff90 	bl	8002184 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5f 	bl	8002130 <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff35 	bl	80020f8 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e169      	b.n	8002598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c4:	2201      	movs	r2, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	f040 8158 	bne.w	8002592 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a9a      	ldr	r2, [pc, #616]	; (8002550 <HAL_GPIO_Init+0x2a0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d05e      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 80022ec:	4a98      	ldr	r2, [pc, #608]	; (8002550 <HAL_GPIO_Init+0x2a0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d875      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 80022f2:	4a98      	ldr	r2, [pc, #608]	; (8002554 <HAL_GPIO_Init+0x2a4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d058      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 80022f8:	4a96      	ldr	r2, [pc, #600]	; (8002554 <HAL_GPIO_Init+0x2a4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d86f      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 80022fe:	4a96      	ldr	r2, [pc, #600]	; (8002558 <HAL_GPIO_Init+0x2a8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d052      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 8002304:	4a94      	ldr	r2, [pc, #592]	; (8002558 <HAL_GPIO_Init+0x2a8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d869      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 800230a:	4a94      	ldr	r2, [pc, #592]	; (800255c <HAL_GPIO_Init+0x2ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04c      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 8002310:	4a92      	ldr	r2, [pc, #584]	; (800255c <HAL_GPIO_Init+0x2ac>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d863      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 8002316:	4a92      	ldr	r2, [pc, #584]	; (8002560 <HAL_GPIO_Init+0x2b0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d046      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 800231c:	4a90      	ldr	r2, [pc, #576]	; (8002560 <HAL_GPIO_Init+0x2b0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d85d      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 8002322:	2b12      	cmp	r3, #18
 8002324:	d82a      	bhi.n	800237c <HAL_GPIO_Init+0xcc>
 8002326:	2b12      	cmp	r3, #18
 8002328:	d859      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <HAL_GPIO_Init+0x80>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	080023ab 	.word	0x080023ab
 8002334:	08002385 	.word	0x08002385
 8002338:	08002397 	.word	0x08002397
 800233c:	080023d9 	.word	0x080023d9
 8002340:	080023df 	.word	0x080023df
 8002344:	080023df 	.word	0x080023df
 8002348:	080023df 	.word	0x080023df
 800234c:	080023df 	.word	0x080023df
 8002350:	080023df 	.word	0x080023df
 8002354:	080023df 	.word	0x080023df
 8002358:	080023df 	.word	0x080023df
 800235c:	080023df 	.word	0x080023df
 8002360:	080023df 	.word	0x080023df
 8002364:	080023df 	.word	0x080023df
 8002368:	080023df 	.word	0x080023df
 800236c:	080023df 	.word	0x080023df
 8002370:	080023df 	.word	0x080023df
 8002374:	0800238d 	.word	0x0800238d
 8002378:	080023a1 	.word	0x080023a1
 800237c:	4a79      	ldr	r2, [pc, #484]	; (8002564 <HAL_GPIO_Init+0x2b4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002382:	e02c      	b.n	80023de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e029      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	3304      	adds	r3, #4
 8002392:	623b      	str	r3, [r7, #32]
          break;
 8002394:	e024      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	3308      	adds	r3, #8
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e01f      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	330c      	adds	r3, #12
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e01a      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023b2:	2304      	movs	r3, #4
 80023b4:	623b      	str	r3, [r7, #32]
          break;
 80023b6:	e013      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2308      	movs	r3, #8
 80023c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	611a      	str	r2, [r3, #16]
          break;
 80023ca:	e009      	b.n	80023e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023cc:	2308      	movs	r3, #8
 80023ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	615a      	str	r2, [r3, #20]
          break;
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          break;
 80023de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d801      	bhi.n	80023ea <HAL_GPIO_Init+0x13a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	e001      	b.n	80023ee <HAL_GPIO_Init+0x13e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d802      	bhi.n	80023fc <HAL_GPIO_Init+0x14c>
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x152>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3b08      	subs	r3, #8
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	210f      	movs	r1, #15
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	6a39      	ldr	r1, [r7, #32]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80b1 	beq.w	8002592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a4c      	ldr	r2, [pc, #304]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002448:	4a48      	ldr	r2, [pc, #288]	; (800256c <HAL_GPIO_Init+0x2bc>)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a40      	ldr	r2, [pc, #256]	; (8002570 <HAL_GPIO_Init+0x2c0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1ec>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <HAL_GPIO_Init+0x2c4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1e8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <HAL_GPIO_Init+0x2c8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1e4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3d      	ldr	r2, [pc, #244]	; (800257c <HAL_GPIO_Init+0x2cc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1e0>
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002490:	2304      	movs	r3, #4
 8002492:	e004      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002494:	2302      	movs	r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 800249c:	2300      	movs	r3, #0
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ae:	492f      	ldr	r1, [pc, #188]	; (800256c <HAL_GPIO_Init+0x2bc>)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	492c      	ldr	r1, [pc, #176]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4928      	ldr	r1, [pc, #160]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4922      	ldr	r1, [pc, #136]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	43db      	mvns	r3, r3
 8002506:	491e      	ldr	r1, [pc, #120]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002508:	4013      	ands	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4918      	ldr	r1, [pc, #96]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	4914      	ldr	r1, [pc, #80]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d021      	beq.n	8002584 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
 800254c:	e021      	b.n	8002592 <HAL_GPIO_Init+0x2e2>
 800254e:	bf00      	nop
 8002550:	10320000 	.word	0x10320000
 8002554:	10310000 	.word	0x10310000
 8002558:	10220000 	.word	0x10220000
 800255c:	10210000 	.word	0x10210000
 8002560:	10120000 	.word	0x10120000
 8002564:	10110000 	.word	0x10110000
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	40010800 	.word	0x40010800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	40011000 	.word	0x40011000
 800257c:	40011400 	.word	0x40011400
 8002580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	43db      	mvns	r3, r3
 800258c:	4909      	ldr	r1, [pc, #36]	; (80025b4 <HAL_GPIO_Init+0x304>)
 800258e:	4013      	ands	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f47f ae8e 	bne.w	80022c4 <HAL_GPIO_Init+0x14>
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	372c      	adds	r7, #44	; 0x2c
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f6:	787b      	ldrb	r3, [r7, #1]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fc:	887a      	ldrh	r2, [r7, #2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002602:	e003      	b.n	800260c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	041a      	lsls	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	611a      	str	r2, [r3, #16]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f806 	bl	8002648 <HAL_GPIO_EXTI_Callback>
  }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40010400 	.word	0x40010400

08002648 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e26c      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8087 	beq.w	800278a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b04      	cmp	r3, #4
 8002686:	d00c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002688:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d112      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d10b      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06c      	beq.n	8002788 <HAL_RCC_OscConfig+0x12c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d168      	bne.n	8002788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e246      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x76>
 80026c4:	4b80      	ldr	r3, [pc, #512]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a7f      	ldr	r2, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0xbc>
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a71      	ldr	r2, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 8002718:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fca2 	bl	8002080 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fc9e 	bl	8002080 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1fa      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xe4>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fc8e 	bl	8002080 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fc8a 	bl	8002080 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1e6      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x10c>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1ba      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4939      	ldr	r1, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff fc43 	bl	8002080 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff fc3f 	bl	8002080 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e19b      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fc22 	bl	8002080 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff fc1e 	bl	8002080 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e17a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03a      	beq.n	80028e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff fc02 	bl	8002080 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff fbfe 	bl	8002080 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e15a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 fad8 	bl	8002e54 <RCC_Delay>
 80028a4:	e01c      	b.n	80028e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff fbe8 	bl	8002080 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff fbe4 	bl	8002080 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d908      	bls.n	80028d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e140      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	42420000 	.word	0x42420000
 80028d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b9e      	ldr	r3, [pc, #632]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e9      	bne.n	80028b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a6 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b94      	ldr	r3, [pc, #592]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a93      	ldr	r2, [pc, #588]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b91      	ldr	r3, [pc, #580]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a8a      	ldr	r2, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff fba5 	bl	8002080 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff fba1 	bl	8002080 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0fd      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x312>
 8002960:	4b7b      	ldr	r3, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a7a      	ldr	r2, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x334>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x356>
 8002998:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	4a6c      	ldr	r2, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6213      	str	r3, [r2, #32]
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a66      	ldr	r2, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a63      	ldr	r2, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7ff fb55 	bl	8002080 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff fb51 	bl	8002080 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0ab      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x37e>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7ff fb3f 	bl	8002080 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff fb3b 	bl	8002080 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e095      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8081 	beq.w	8002b46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d061      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d146      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff fb0f 	bl	8002080 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7ff fb0b 	bl	8002080 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e067      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a19      	ldr	r1, [r3, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	4927      	ldr	r1, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7ff fadf 	bl	8002080 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7ff fadb 	bl	8002080 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e037      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x46a>
 8002ae4:	e02f      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fac8 	bl	8002080 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff fac4 	bl	8002080 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e020      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x498>
 8002b12:	e018      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42420060 	.word	0x42420060

08002b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d0      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d040      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e073      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7ff fa18 	bl	8002080 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7ff fa14 	bl	8002080 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e053      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d210      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f976 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	080052dc 	.word	0x080052dc
 8002d28:	20000060 	.word	0x20000060
 8002d2c:	20000064 	.word	0x20000064

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b490      	push	{r4, r7}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d38:	1d3c      	adds	r4, r7, #4
 8002d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d40:	f240 2301 	movw	r3, #513	; 0x201
 8002d44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x46>
 8002d6e:	e02d      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d72:	623b      	str	r3, [r7, #32]
      break;
 8002d74:	e02d      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d82:	4413      	add	r3, r2
 8002d84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c5b      	lsrs	r3, r3, #17
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002da2:	4413      	add	r3, r2
 8002da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002da8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dae:	fb02 f203 	mul.w	r2, r2, r3
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e004      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	623b      	str	r3, [r7, #32]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dce:	623b      	str	r3, [r7, #32]
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc90      	pop	{r4, r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	080050ec 	.word	0x080050ec
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	003d0900 	.word	0x003d0900

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000060 	.word	0x20000060

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff2 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	080052ec 	.word	0x080052ec

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	0adb      	lsrs	r3, r3, #11
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	080052ec 	.word	0x080052ec

08002e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <RCC_Delay+0x34>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <RCC_Delay+0x38>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a5b      	lsrs	r3, r3, #9
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e70:	bf00      	nop
  }
  while (Delay --);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	60fa      	str	r2, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f9      	bne.n	8002e70 <RCC_Delay+0x1c>
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20000060 	.word	0x20000060
 8002e8c:	10624dd3 	.word	0x10624dd3

08002e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e076      	b.n	8002f90 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb2:	d009      	beq.n	8002ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
 8002eba:	e005      	b.n	8002ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fef4 	bl	8001cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	ea42 0103 	orr.w	r1, r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	0c1a      	lsrs	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f002 0204 	and.w	r2, r2, #4
 8002f6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_SPI_Transmit+0x22>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e126      	b.n	8003208 <HAL_SPI_Transmit+0x270>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc2:	f7ff f85d 	bl	8002080 <HAL_GetTick>
 8002fc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d002      	beq.n	8002fde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fdc:	e10b      	b.n	80031f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_SPI_Transmit+0x52>
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fee:	e102      	b.n	80031f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003036:	d10f      	bne.n	8003058 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003056:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d007      	beq.n	8003076 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	d14b      	bne.n	8003118 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_SPI_Transmit+0xf6>
 8003088:	8afb      	ldrh	r3, [r7, #22]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d13e      	bne.n	800310c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b2:	e02b      	b.n	800310c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d112      	bne.n	80030e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80030e6:	e011      	b.n	800310c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e8:	f7fe ffca 	bl	8002080 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <HAL_SPI_Transmit+0x168>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d102      	bne.n	8003106 <HAL_SPI_Transmit+0x16e>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	77fb      	strb	r3, [r7, #31]
          goto error;
 800310a:	e074      	b.n	80031f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ce      	bne.n	80030b4 <HAL_SPI_Transmit+0x11c>
 8003116:	e04c      	b.n	80031b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_SPI_Transmit+0x18e>
 8003120:	8afb      	ldrh	r3, [r7, #22]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d140      	bne.n	80031a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800314c:	e02c      	b.n	80031a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d113      	bne.n	8003184 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	86da      	strh	r2, [r3, #54]	; 0x36
 8003182:	e011      	b.n	80031a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003184:	f7fe ff7c 	bl	8002080 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d803      	bhi.n	800319c <HAL_SPI_Transmit+0x204>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x20a>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031a6:	e026      	b.n	80031f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1cd      	bne.n	800314e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8b2 	bl	8003320 <SPI_EndRxTxTransaction>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e000      	b.n	80031f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80031f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003206:	7ffb      	ldrb	r3, [r7, #31]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003220:	f7fe ff2e 	bl	8002080 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	4413      	add	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003230:	f7fe ff26 	bl	8002080 <HAL_GetTick>
 8003234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	0d1b      	lsrs	r3, r3, #20
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003246:	e054      	b.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d050      	beq.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003250:	f7fe ff16 	bl	8002080 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	429a      	cmp	r2, r3
 800325e:	d902      	bls.n	8003266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d13d      	bne.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327e:	d111      	bne.n	80032a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003288:	d004      	beq.n	8003294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d107      	bne.n	80032a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ac:	d10f      	bne.n	80032ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e017      	b.n	8003312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	429a      	cmp	r2, r3
 800330e:	d19b      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000060 	.word	0x20000060

08003320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff ff6a 	bl	8003210 <SPI_WaitFlagStateUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e000      	b.n	8003354 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e041      	b.n	80033f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe fd5a 	bl	8001e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f000 fba0 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e03a      	b.n	800348a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_TIM_Base_Start_IT+0x98>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x58>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d009      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x58>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_TIM_Base_Start_IT+0x9c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x58>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a13      	ldr	r2, [pc, #76]	; (800349c <HAL_TIM_Base_Start_IT+0xa0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d111      	bne.n	8003478 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d010      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	e007      	b.n	8003488 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e093      	b.n	80035dc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fe fc4d 	bl	8001d68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e4:	f023 0307 	bic.w	r3, r3, #7
 80034e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f000 faf3 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	4313      	orrs	r3, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003540:	f023 030c 	bic.w	r3, r3, #12
 8003544:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800354c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	4313      	orrs	r3, r2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	011a      	lsls	r2, r3, #4
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	031b      	lsls	r3, r3, #12
 8003570:	4313      	orrs	r3, r2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4313      	orrs	r3, r2
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003604:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800360c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d110      	bne.n	8003636 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e069      	b.n	80036f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003634:	e031      	b.n	800369a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d110      	bne.n	800365e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800363c:	7bbb      	ldrb	r3, [r7, #14]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003642:	7b3b      	ldrb	r3, [r7, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e055      	b.n	80036f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800365c:	e01d      	b.n	800369a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d108      	bne.n	8003676 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003670:	7b3b      	ldrb	r3, [r7, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e03e      	b.n	80036f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_TIM_Encoder_Start+0xc4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d008      	beq.n	80036b8 <HAL_TIM_Encoder_Start+0xd4>
 80036a6:	e00f      	b.n	80036c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fb0d 	bl	8003cd0 <TIM_CCxChannelCmd>
      break;
 80036b6:	e016      	b.n	80036e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	2104      	movs	r1, #4
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fb05 	bl	8003cd0 <TIM_CCxChannelCmd>
      break;
 80036c6:	e00e      	b.n	80036e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fafd 	bl	8003cd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	2104      	movs	r1, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 faf6 	bl	8003cd0 <TIM_CCxChannelCmd>
      break;
 80036e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9b1 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9a4 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f9b3 	bl	8003abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f987 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f97a 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f989 	bl	8003abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f95d 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f950 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f95f 	bl	8003abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b10      	cmp	r3, #16
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f933 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f926 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f935 	bl	8003abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0201 	mvn.w	r2, #1
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd f99a 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa9b 	bl	8003de6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8f9 	bl	8003ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0220 	mvn.w	r2, #32
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa66 	bl	8003dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIM_ConfigClockSource+0x18>
 8003924:	2302      	movs	r3, #2
 8003926:	e0b3      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x180>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003960:	d03e      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0xd0>
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	f200 8087 	bhi.w	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	f000 8085 	beq.w	8003a7c <HAL_TIM_ConfigClockSource+0x16c>
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d87f      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 8003978:	2b70      	cmp	r3, #112	; 0x70
 800397a:	d01a      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0xa2>
 800397c:	2b70      	cmp	r3, #112	; 0x70
 800397e:	d87b      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d050      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x116>
 8003984:	2b60      	cmp	r3, #96	; 0x60
 8003986:	d877      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 8003988:	2b50      	cmp	r3, #80	; 0x50
 800398a:	d03c      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0xf6>
 800398c:	2b50      	cmp	r3, #80	; 0x50
 800398e:	d873      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d058      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x136>
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d86f      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 8003998:	2b30      	cmp	r3, #48	; 0x30
 800399a:	d064      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x156>
 800399c:	2b30      	cmp	r3, #48	; 0x30
 800399e:	d86b      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d060      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x156>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d867      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05c      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x156>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d05a      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039b0:	e062      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f000 f966 	bl	8003c92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	609a      	str	r2, [r3, #8]
      break;
 80039de:	e04e      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f000 f94f 	bl	8003c92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a02:	609a      	str	r2, [r3, #8]
      break;
 8003a04:	e03b      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f000 f8c6 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2150      	movs	r1, #80	; 0x50
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f91d 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003a24:	e02b      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 f8e4 	bl	8003c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2160      	movs	r1, #96	; 0x60
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f90d 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003a44:	e01b      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 f8a6 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f8fd 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003a64:	e00b      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f000 f8f4 	bl	8003c5e <TIM_ITRx_SetConfig>
        break;
 8003a76:	e002      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <TIM_Base_SetConfig+0xb8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_Base_SetConfig+0x30>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d007      	beq.n	8003b10 <TIM_Base_SetConfig+0x30>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <TIM_Base_SetConfig+0xbc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_Base_SetConfig+0x30>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <TIM_Base_SetConfig+0xc0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d108      	bne.n	8003b22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <TIM_Base_SetConfig+0xb8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0x62>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0x62>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <TIM_Base_SetConfig+0xbc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0x62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <TIM_Base_SetConfig+0xc0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a07      	ldr	r2, [pc, #28]	; (8003b98 <TIM_Base_SetConfig+0xb8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 030a 	bic.w	r3, r3, #10
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 0210 	bic.w	r2, r3, #16
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	031b      	lsls	r3, r3, #12
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0307 	orr.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	021a      	lsls	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e046      	b.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d009      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10c      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800

08003dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e03f      	b.n	8003e8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe f832 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f829 	bl	8003e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ece:	f023 030c 	bic.w	r3, r3, #12
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <UART_SetConfig+0x114>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d103      	bne.n	8003f04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003efc:	f7fe ff96 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	e002      	b.n	8003f0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7fe ff7e 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8003f08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <UART_SetConfig+0x118>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	0119      	lsls	r1, r3, #4
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <UART_SetConfig+0x118>)
 8003f42:	fba3 0302 	umull	r0, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2064      	movs	r0, #100	; 0x64
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f60:	4419      	add	r1, r3
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009a      	lsls	r2, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <UART_SetConfig+0x118>)
 8003f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2064      	movs	r0, #100	; 0x64
 8003f82:	fb00 f303 	mul.w	r3, r0, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <UART_SetConfig+0x118>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	51eb851f 	.word	0x51eb851f

08003fb0 <__libc_init_array>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	4d0c      	ldr	r5, [pc, #48]	; (8003fe8 <__libc_init_array+0x38>)
 8003fb6:	4c0d      	ldr	r4, [pc, #52]	; (8003fec <__libc_init_array+0x3c>)
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	42a6      	cmp	r6, r4
 8003fbe:	d109      	bne.n	8003fd4 <__libc_init_array+0x24>
 8003fc0:	f001 f864 	bl	800508c <_init>
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	4d0a      	ldr	r5, [pc, #40]	; (8003ff0 <__libc_init_array+0x40>)
 8003fc8:	4c0a      	ldr	r4, [pc, #40]	; (8003ff4 <__libc_init_array+0x44>)
 8003fca:	1b64      	subs	r4, r4, r5
 8003fcc:	10a4      	asrs	r4, r4, #2
 8003fce:	42a6      	cmp	r6, r4
 8003fd0:	d105      	bne.n	8003fde <__libc_init_array+0x2e>
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd8:	4798      	blx	r3
 8003fda:	3601      	adds	r6, #1
 8003fdc:	e7ee      	b.n	8003fbc <__libc_init_array+0xc>
 8003fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe2:	4798      	blx	r3
 8003fe4:	3601      	adds	r6, #1
 8003fe6:	e7f2      	b.n	8003fce <__libc_init_array+0x1e>
 8003fe8:	080054d0 	.word	0x080054d0
 8003fec:	080054d0 	.word	0x080054d0
 8003ff0:	080054d0 	.word	0x080054d0
 8003ff4:	080054d4 	.word	0x080054d4

08003ff8 <memset>:
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4402      	add	r2, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <cos>:
 8004008:	b530      	push	{r4, r5, lr}
 800400a:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <cos+0x7c>)
 800400c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004010:	4293      	cmp	r3, r2
 8004012:	b087      	sub	sp, #28
 8004014:	dc04      	bgt.n	8004020 <cos+0x18>
 8004016:	2200      	movs	r2, #0
 8004018:	2300      	movs	r3, #0
 800401a:	f000 fa6d 	bl	80044f8 <__kernel_cos>
 800401e:	e006      	b.n	800402e <cos+0x26>
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <cos+0x80>)
 8004022:	4293      	cmp	r3, r2
 8004024:	dd05      	ble.n	8004032 <cos+0x2a>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	f7fc f895 	bl	8000158 <__aeabi_dsub>
 800402e:	b007      	add	sp, #28
 8004030:	bd30      	pop	{r4, r5, pc}
 8004032:	aa02      	add	r2, sp, #8
 8004034:	f000 f870 	bl	8004118 <__ieee754_rem_pio2>
 8004038:	f000 0003 	and.w	r0, r0, #3
 800403c:	2801      	cmp	r0, #1
 800403e:	d007      	beq.n	8004050 <cos+0x48>
 8004040:	2802      	cmp	r0, #2
 8004042:	d00f      	beq.n	8004064 <cos+0x5c>
 8004044:	b9a8      	cbnz	r0, 8004072 <cos+0x6a>
 8004046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800404a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800404e:	e7e4      	b.n	800401a <cos+0x12>
 8004050:	9000      	str	r0, [sp, #0]
 8004052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800405a:	f000 fe55 	bl	8004d08 <__kernel_sin>
 800405e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004062:	e7e4      	b.n	800402e <cos+0x26>
 8004064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800406c:	f000 fa44 	bl	80044f8 <__kernel_cos>
 8004070:	e7f5      	b.n	800405e <cos+0x56>
 8004072:	2301      	movs	r3, #1
 8004074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407e:	f000 fe43 	bl	8004d08 <__kernel_sin>
 8004082:	e7d4      	b.n	800402e <cos+0x26>
 8004084:	3fe921fb 	.word	0x3fe921fb
 8004088:	7fefffff 	.word	0x7fefffff

0800408c <sin>:
 800408c:	b530      	push	{r4, r5, lr}
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <sin+0x84>)
 8004090:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004094:	4293      	cmp	r3, r2
 8004096:	b087      	sub	sp, #28
 8004098:	dc06      	bgt.n	80040a8 <sin+0x1c>
 800409a:	2300      	movs	r3, #0
 800409c:	2200      	movs	r2, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	f000 fe31 	bl	8004d08 <__kernel_sin>
 80040a6:	e006      	b.n	80040b6 <sin+0x2a>
 80040a8:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <sin+0x88>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	dd05      	ble.n	80040ba <sin+0x2e>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	f7fc f851 	bl	8000158 <__aeabi_dsub>
 80040b6:	b007      	add	sp, #28
 80040b8:	bd30      	pop	{r4, r5, pc}
 80040ba:	aa02      	add	r2, sp, #8
 80040bc:	f000 f82c 	bl	8004118 <__ieee754_rem_pio2>
 80040c0:	f000 0003 	and.w	r0, r0, #3
 80040c4:	2801      	cmp	r0, #1
 80040c6:	d009      	beq.n	80040dc <sin+0x50>
 80040c8:	2802      	cmp	r0, #2
 80040ca:	d00e      	beq.n	80040ea <sin+0x5e>
 80040cc:	b9c0      	cbnz	r0, 8004100 <sin+0x74>
 80040ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040d2:	2301      	movs	r3, #1
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040da:	e7e2      	b.n	80040a2 <sin+0x16>
 80040dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e4:	f000 fa08 	bl	80044f8 <__kernel_cos>
 80040e8:	e7e5      	b.n	80040b6 <sin+0x2a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f6:	f000 fe07 	bl	8004d08 <__kernel_sin>
 80040fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80040fe:	e7da      	b.n	80040b6 <sin+0x2a>
 8004100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004108:	f000 f9f6 	bl	80044f8 <__kernel_cos>
 800410c:	e7f5      	b.n	80040fa <sin+0x6e>
 800410e:	bf00      	nop
 8004110:	3fe921fb 	.word	0x3fe921fb
 8004114:	7fefffff 	.word	0x7fefffff

08004118 <__ieee754_rem_pio2>:
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	4614      	mov	r4, r2
 800411e:	4ac4      	ldr	r2, [pc, #784]	; (8004430 <__ieee754_rem_pio2+0x318>)
 8004120:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004124:	b08d      	sub	sp, #52	; 0x34
 8004126:	4592      	cmp	sl, r2
 8004128:	9104      	str	r1, [sp, #16]
 800412a:	dc07      	bgt.n	800413c <__ieee754_rem_pio2+0x24>
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	e9c4 0100 	strd	r0, r1, [r4]
 8004134:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004138:	2500      	movs	r5, #0
 800413a:	e024      	b.n	8004186 <__ieee754_rem_pio2+0x6e>
 800413c:	4abd      	ldr	r2, [pc, #756]	; (8004434 <__ieee754_rem_pio2+0x31c>)
 800413e:	4592      	cmp	sl, r2
 8004140:	dc72      	bgt.n	8004228 <__ieee754_rem_pio2+0x110>
 8004142:	9b04      	ldr	r3, [sp, #16]
 8004144:	4dbc      	ldr	r5, [pc, #752]	; (8004438 <__ieee754_rem_pio2+0x320>)
 8004146:	2b00      	cmp	r3, #0
 8004148:	a3ab      	add	r3, pc, #684	; (adr r3, 80043f8 <__ieee754_rem_pio2+0x2e0>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	dd36      	ble.n	80041be <__ieee754_rem_pio2+0xa6>
 8004150:	f7fc f802 	bl	8000158 <__aeabi_dsub>
 8004154:	45aa      	cmp	sl, r5
 8004156:	4606      	mov	r6, r0
 8004158:	460f      	mov	r7, r1
 800415a:	d018      	beq.n	800418e <__ieee754_rem_pio2+0x76>
 800415c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004400 <__ieee754_rem_pio2+0x2e8>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fb fff9 	bl	8000158 <__aeabi_dsub>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4630      	mov	r0, r6
 800416c:	e9c4 2300 	strd	r2, r3, [r4]
 8004170:	4639      	mov	r1, r7
 8004172:	f7fb fff1 	bl	8000158 <__aeabi_dsub>
 8004176:	a3a2      	add	r3, pc, #648	; (adr r3, 8004400 <__ieee754_rem_pio2+0x2e8>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f7fb ffec 	bl	8000158 <__aeabi_dsub>
 8004180:	2501      	movs	r5, #1
 8004182:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004186:	4628      	mov	r0, r5
 8004188:	b00d      	add	sp, #52	; 0x34
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	a39e      	add	r3, pc, #632	; (adr r3, 8004408 <__ieee754_rem_pio2+0x2f0>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fb ffe0 	bl	8000158 <__aeabi_dsub>
 8004198:	a39d      	add	r3, pc, #628	; (adr r3, 8004410 <__ieee754_rem_pio2+0x2f8>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	f7fb ffd9 	bl	8000158 <__aeabi_dsub>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4630      	mov	r0, r6
 80041ac:	e9c4 2300 	strd	r2, r3, [r4]
 80041b0:	4639      	mov	r1, r7
 80041b2:	f7fb ffd1 	bl	8000158 <__aeabi_dsub>
 80041b6:	a396      	add	r3, pc, #600	; (adr r3, 8004410 <__ieee754_rem_pio2+0x2f8>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	e7de      	b.n	800417c <__ieee754_rem_pio2+0x64>
 80041be:	f7fb ffcd 	bl	800015c <__adddf3>
 80041c2:	45aa      	cmp	sl, r5
 80041c4:	4606      	mov	r6, r0
 80041c6:	460f      	mov	r7, r1
 80041c8:	d016      	beq.n	80041f8 <__ieee754_rem_pio2+0xe0>
 80041ca:	a38d      	add	r3, pc, #564	; (adr r3, 8004400 <__ieee754_rem_pio2+0x2e8>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fb ffc4 	bl	800015c <__adddf3>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4630      	mov	r0, r6
 80041da:	e9c4 2300 	strd	r2, r3, [r4]
 80041de:	4639      	mov	r1, r7
 80041e0:	f7fb ffba 	bl	8000158 <__aeabi_dsub>
 80041e4:	a386      	add	r3, pc, #536	; (adr r3, 8004400 <__ieee754_rem_pio2+0x2e8>)
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f7fb ffb7 	bl	800015c <__adddf3>
 80041ee:	f04f 35ff 	mov.w	r5, #4294967295
 80041f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041f6:	e7c6      	b.n	8004186 <__ieee754_rem_pio2+0x6e>
 80041f8:	a383      	add	r3, pc, #524	; (adr r3, 8004408 <__ieee754_rem_pio2+0x2f0>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f7fb ffad 	bl	800015c <__adddf3>
 8004202:	a383      	add	r3, pc, #524	; (adr r3, 8004410 <__ieee754_rem_pio2+0x2f8>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	4606      	mov	r6, r0
 800420a:	460f      	mov	r7, r1
 800420c:	f7fb ffa6 	bl	800015c <__adddf3>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4630      	mov	r0, r6
 8004216:	e9c4 2300 	strd	r2, r3, [r4]
 800421a:	4639      	mov	r1, r7
 800421c:	f7fb ff9c 	bl	8000158 <__aeabi_dsub>
 8004220:	a37b      	add	r3, pc, #492	; (adr r3, 8004410 <__ieee754_rem_pio2+0x2f8>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	e7e0      	b.n	80041ea <__ieee754_rem_pio2+0xd2>
 8004228:	4a84      	ldr	r2, [pc, #528]	; (800443c <__ieee754_rem_pio2+0x324>)
 800422a:	4592      	cmp	sl, r2
 800422c:	f300 80d5 	bgt.w	80043da <__ieee754_rem_pio2+0x2c2>
 8004230:	f000 fe20 	bl	8004e74 <fabs>
 8004234:	a378      	add	r3, pc, #480	; (adr r3, 8004418 <__ieee754_rem_pio2+0x300>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	4606      	mov	r6, r0
 800423c:	460f      	mov	r7, r1
 800423e:	f7fc f943 	bl	80004c8 <__aeabi_dmul>
 8004242:	2200      	movs	r2, #0
 8004244:	4b7e      	ldr	r3, [pc, #504]	; (8004440 <__ieee754_rem_pio2+0x328>)
 8004246:	f7fb ff89 	bl	800015c <__adddf3>
 800424a:	f7fc fbd7 	bl	80009fc <__aeabi_d2iz>
 800424e:	4605      	mov	r5, r0
 8004250:	f7fc f8d0 	bl	80003f4 <__aeabi_i2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800425c:	a366      	add	r3, pc, #408	; (adr r3, 80043f8 <__ieee754_rem_pio2+0x2e0>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f7fc f931 	bl	80004c8 <__aeabi_dmul>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4630      	mov	r0, r6
 800426c:	4639      	mov	r1, r7
 800426e:	f7fb ff73 	bl	8000158 <__aeabi_dsub>
 8004272:	a363      	add	r3, pc, #396	; (adr r3, 8004400 <__ieee754_rem_pio2+0x2e8>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	4680      	mov	r8, r0
 800427a:	4689      	mov	r9, r1
 800427c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004280:	f7fc f922 	bl	80004c8 <__aeabi_dmul>
 8004284:	2d1f      	cmp	r5, #31
 8004286:	4606      	mov	r6, r0
 8004288:	460f      	mov	r7, r1
 800428a:	dc0e      	bgt.n	80042aa <__ieee754_rem_pio2+0x192>
 800428c:	4b6d      	ldr	r3, [pc, #436]	; (8004444 <__ieee754_rem_pio2+0x32c>)
 800428e:	1e6a      	subs	r2, r5, #1
 8004290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004294:	4553      	cmp	r3, sl
 8004296:	d008      	beq.n	80042aa <__ieee754_rem_pio2+0x192>
 8004298:	4632      	mov	r2, r6
 800429a:	463b      	mov	r3, r7
 800429c:	4640      	mov	r0, r8
 800429e:	4649      	mov	r1, r9
 80042a0:	f7fb ff5a 	bl	8000158 <__aeabi_dsub>
 80042a4:	e9c4 0100 	strd	r0, r1, [r4]
 80042a8:	e013      	b.n	80042d2 <__ieee754_rem_pio2+0x1ba>
 80042aa:	463b      	mov	r3, r7
 80042ac:	4632      	mov	r2, r6
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fb ff51 	bl	8000158 <__aeabi_dsub>
 80042b6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80042c0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80042c4:	f1ba 0f10 	cmp.w	sl, #16
 80042c8:	dc1f      	bgt.n	800430a <__ieee754_rem_pio2+0x1f2>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	e9c4 2300 	strd	r2, r3, [r4]
 80042d2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80042d6:	4640      	mov	r0, r8
 80042d8:	4653      	mov	r3, sl
 80042da:	4649      	mov	r1, r9
 80042dc:	f7fb ff3c 	bl	8000158 <__aeabi_dsub>
 80042e0:	4632      	mov	r2, r6
 80042e2:	463b      	mov	r3, r7
 80042e4:	f7fb ff38 	bl	8000158 <__aeabi_dsub>
 80042e8:	460b      	mov	r3, r1
 80042ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80042ee:	9904      	ldr	r1, [sp, #16]
 80042f0:	4602      	mov	r2, r0
 80042f2:	2900      	cmp	r1, #0
 80042f4:	f6bf af47 	bge.w	8004186 <__ieee754_rem_pio2+0x6e>
 80042f8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80042fc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004300:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004304:	60e3      	str	r3, [r4, #12]
 8004306:	426d      	negs	r5, r5
 8004308:	e73d      	b.n	8004186 <__ieee754_rem_pio2+0x6e>
 800430a:	a33f      	add	r3, pc, #252	; (adr r3, 8004408 <__ieee754_rem_pio2+0x2f0>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004314:	f7fc f8d8 	bl	80004c8 <__aeabi_dmul>
 8004318:	4606      	mov	r6, r0
 800431a:	460f      	mov	r7, r1
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4640      	mov	r0, r8
 8004322:	4649      	mov	r1, r9
 8004324:	f7fb ff18 	bl	8000158 <__aeabi_dsub>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4682      	mov	sl, r0
 800432e:	468b      	mov	fp, r1
 8004330:	4640      	mov	r0, r8
 8004332:	4649      	mov	r1, r9
 8004334:	f7fb ff10 	bl	8000158 <__aeabi_dsub>
 8004338:	4632      	mov	r2, r6
 800433a:	463b      	mov	r3, r7
 800433c:	f7fb ff0c 	bl	8000158 <__aeabi_dsub>
 8004340:	a333      	add	r3, pc, #204	; (adr r3, 8004410 <__ieee754_rem_pio2+0x2f8>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	4606      	mov	r6, r0
 8004348:	460f      	mov	r7, r1
 800434a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800434e:	f7fc f8bb 	bl	80004c8 <__aeabi_dmul>
 8004352:	4632      	mov	r2, r6
 8004354:	463b      	mov	r3, r7
 8004356:	f7fb feff 	bl	8000158 <__aeabi_dsub>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4606      	mov	r6, r0
 8004360:	460f      	mov	r7, r1
 8004362:	4650      	mov	r0, sl
 8004364:	4659      	mov	r1, fp
 8004366:	f7fb fef7 	bl	8000158 <__aeabi_dsub>
 800436a:	9a05      	ldr	r2, [sp, #20]
 800436c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b31      	cmp	r3, #49	; 0x31
 8004374:	dc06      	bgt.n	8004384 <__ieee754_rem_pio2+0x26c>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	46d0      	mov	r8, sl
 800437c:	46d9      	mov	r9, fp
 800437e:	e9c4 2300 	strd	r2, r3, [r4]
 8004382:	e7a6      	b.n	80042d2 <__ieee754_rem_pio2+0x1ba>
 8004384:	a326      	add	r3, pc, #152	; (adr r3, 8004420 <__ieee754_rem_pio2+0x308>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800438e:	f7fc f89b 	bl	80004c8 <__aeabi_dmul>
 8004392:	4606      	mov	r6, r0
 8004394:	460f      	mov	r7, r1
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4650      	mov	r0, sl
 800439c:	4659      	mov	r1, fp
 800439e:	f7fb fedb 	bl	8000158 <__aeabi_dsub>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4680      	mov	r8, r0
 80043a8:	4689      	mov	r9, r1
 80043aa:	4650      	mov	r0, sl
 80043ac:	4659      	mov	r1, fp
 80043ae:	f7fb fed3 	bl	8000158 <__aeabi_dsub>
 80043b2:	4632      	mov	r2, r6
 80043b4:	463b      	mov	r3, r7
 80043b6:	f7fb fecf 	bl	8000158 <__aeabi_dsub>
 80043ba:	a31b      	add	r3, pc, #108	; (adr r3, 8004428 <__ieee754_rem_pio2+0x310>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	4606      	mov	r6, r0
 80043c2:	460f      	mov	r7, r1
 80043c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043c8:	f7fc f87e 	bl	80004c8 <__aeabi_dmul>
 80043cc:	4632      	mov	r2, r6
 80043ce:	463b      	mov	r3, r7
 80043d0:	f7fb fec2 	bl	8000158 <__aeabi_dsub>
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	e75e      	b.n	8004298 <__ieee754_rem_pio2+0x180>
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <__ieee754_rem_pio2+0x330>)
 80043dc:	4592      	cmp	sl, r2
 80043de:	dd35      	ble.n	800444c <__ieee754_rem_pio2+0x334>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	f7fb feb8 	bl	8000158 <__aeabi_dsub>
 80043e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043ec:	e9c4 0100 	strd	r0, r1, [r4]
 80043f0:	e6a2      	b.n	8004138 <__ieee754_rem_pio2+0x20>
 80043f2:	bf00      	nop
 80043f4:	f3af 8000 	nop.w
 80043f8:	54400000 	.word	0x54400000
 80043fc:	3ff921fb 	.word	0x3ff921fb
 8004400:	1a626331 	.word	0x1a626331
 8004404:	3dd0b461 	.word	0x3dd0b461
 8004408:	1a600000 	.word	0x1a600000
 800440c:	3dd0b461 	.word	0x3dd0b461
 8004410:	2e037073 	.word	0x2e037073
 8004414:	3ba3198a 	.word	0x3ba3198a
 8004418:	6dc9c883 	.word	0x6dc9c883
 800441c:	3fe45f30 	.word	0x3fe45f30
 8004420:	2e000000 	.word	0x2e000000
 8004424:	3ba3198a 	.word	0x3ba3198a
 8004428:	252049c1 	.word	0x252049c1
 800442c:	397b839a 	.word	0x397b839a
 8004430:	3fe921fb 	.word	0x3fe921fb
 8004434:	4002d97b 	.word	0x4002d97b
 8004438:	3ff921fb 	.word	0x3ff921fb
 800443c:	413921fb 	.word	0x413921fb
 8004440:	3fe00000 	.word	0x3fe00000
 8004444:	080052f4 	.word	0x080052f4
 8004448:	7fefffff 	.word	0x7fefffff
 800444c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004450:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004454:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004458:	460f      	mov	r7, r1
 800445a:	4606      	mov	r6, r0
 800445c:	f7fc face 	bl	80009fc <__aeabi_d2iz>
 8004460:	f7fb ffc8 	bl	80003f4 <__aeabi_i2d>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4630      	mov	r0, r6
 800446a:	4639      	mov	r1, r7
 800446c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004470:	f7fb fe72 	bl	8000158 <__aeabi_dsub>
 8004474:	2200      	movs	r2, #0
 8004476:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <__ieee754_rem_pio2+0x3d8>)
 8004478:	f7fc f826 	bl	80004c8 <__aeabi_dmul>
 800447c:	460f      	mov	r7, r1
 800447e:	4606      	mov	r6, r0
 8004480:	f7fc fabc 	bl	80009fc <__aeabi_d2iz>
 8004484:	f7fb ffb6 	bl	80003f4 <__aeabi_i2d>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4630      	mov	r0, r6
 800448e:	4639      	mov	r1, r7
 8004490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004494:	f7fb fe60 	bl	8000158 <__aeabi_dsub>
 8004498:	2200      	movs	r2, #0
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <__ieee754_rem_pio2+0x3d8>)
 800449c:	f7fc f814 	bl	80004c8 <__aeabi_dmul>
 80044a0:	f04f 0803 	mov.w	r8, #3
 80044a4:	2600      	movs	r6, #0
 80044a6:	2700      	movs	r7, #0
 80044a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044ac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80044b0:	4632      	mov	r2, r6
 80044b2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80044b6:	463b      	mov	r3, r7
 80044b8:	46c2      	mov	sl, r8
 80044ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80044be:	f7fc fa6b 	bl	8000998 <__aeabi_dcmpeq>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d1f4      	bne.n	80044b0 <__ieee754_rem_pio2+0x398>
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <__ieee754_rem_pio2+0x3dc>)
 80044c8:	462a      	mov	r2, r5
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2302      	movs	r3, #2
 80044ce:	4621      	mov	r1, r4
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	a806      	add	r0, sp, #24
 80044d4:	4653      	mov	r3, sl
 80044d6:	f000 f8cd 	bl	8004674 <__kernel_rem_pio2>
 80044da:	9b04      	ldr	r3, [sp, #16]
 80044dc:	4605      	mov	r5, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f6bf ae51 	bge.w	8004186 <__ieee754_rem_pio2+0x6e>
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044ea:	6063      	str	r3, [r4, #4]
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	e707      	b.n	8004300 <__ieee754_rem_pio2+0x1e8>
 80044f0:	41700000 	.word	0x41700000
 80044f4:	08005374 	.word	0x08005374

080044f8 <__kernel_cos>:
 80044f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004500:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004504:	4680      	mov	r8, r0
 8004506:	460f      	mov	r7, r1
 8004508:	e9cd 2300 	strd	r2, r3, [sp]
 800450c:	da04      	bge.n	8004518 <__kernel_cos+0x20>
 800450e:	f7fc fa75 	bl	80009fc <__aeabi_d2iz>
 8004512:	2800      	cmp	r0, #0
 8004514:	f000 8086 	beq.w	8004624 <__kernel_cos+0x12c>
 8004518:	4642      	mov	r2, r8
 800451a:	463b      	mov	r3, r7
 800451c:	4640      	mov	r0, r8
 800451e:	4639      	mov	r1, r7
 8004520:	f7fb ffd2 	bl	80004c8 <__aeabi_dmul>
 8004524:	2200      	movs	r2, #0
 8004526:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <__kernel_cos+0x168>)
 8004528:	4604      	mov	r4, r0
 800452a:	460d      	mov	r5, r1
 800452c:	f7fb ffcc 	bl	80004c8 <__aeabi_dmul>
 8004530:	a33f      	add	r3, pc, #252	; (adr r3, 8004630 <__kernel_cos+0x138>)
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	4682      	mov	sl, r0
 8004538:	468b      	mov	fp, r1
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fb ffc3 	bl	80004c8 <__aeabi_dmul>
 8004542:	a33d      	add	r3, pc, #244	; (adr r3, 8004638 <__kernel_cos+0x140>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fb fe08 	bl	800015c <__adddf3>
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	f7fb ffba 	bl	80004c8 <__aeabi_dmul>
 8004554:	a33a      	add	r3, pc, #232	; (adr r3, 8004640 <__kernel_cos+0x148>)
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f7fb fdfd 	bl	8000158 <__aeabi_dsub>
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	f7fb ffb1 	bl	80004c8 <__aeabi_dmul>
 8004566:	a338      	add	r3, pc, #224	; (adr r3, 8004648 <__kernel_cos+0x150>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fb fdf6 	bl	800015c <__adddf3>
 8004570:	4622      	mov	r2, r4
 8004572:	462b      	mov	r3, r5
 8004574:	f7fb ffa8 	bl	80004c8 <__aeabi_dmul>
 8004578:	a335      	add	r3, pc, #212	; (adr r3, 8004650 <__kernel_cos+0x158>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fb fdeb 	bl	8000158 <__aeabi_dsub>
 8004582:	4622      	mov	r2, r4
 8004584:	462b      	mov	r3, r5
 8004586:	f7fb ff9f 	bl	80004c8 <__aeabi_dmul>
 800458a:	a333      	add	r3, pc, #204	; (adr r3, 8004658 <__kernel_cos+0x160>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fb fde4 	bl	800015c <__adddf3>
 8004594:	4622      	mov	r2, r4
 8004596:	462b      	mov	r3, r5
 8004598:	f7fb ff96 	bl	80004c8 <__aeabi_dmul>
 800459c:	4622      	mov	r2, r4
 800459e:	462b      	mov	r3, r5
 80045a0:	f7fb ff92 	bl	80004c8 <__aeabi_dmul>
 80045a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045a8:	4604      	mov	r4, r0
 80045aa:	460d      	mov	r5, r1
 80045ac:	4640      	mov	r0, r8
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fb ff8a 	bl	80004c8 <__aeabi_dmul>
 80045b4:	460b      	mov	r3, r1
 80045b6:	4602      	mov	r2, r0
 80045b8:	4629      	mov	r1, r5
 80045ba:	4620      	mov	r0, r4
 80045bc:	f7fb fdcc 	bl	8000158 <__aeabi_dsub>
 80045c0:	4b28      	ldr	r3, [pc, #160]	; (8004664 <__kernel_cos+0x16c>)
 80045c2:	4680      	mov	r8, r0
 80045c4:	429e      	cmp	r6, r3
 80045c6:	4689      	mov	r9, r1
 80045c8:	dc0e      	bgt.n	80045e8 <__kernel_cos+0xf0>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4650      	mov	r0, sl
 80045d0:	4659      	mov	r1, fp
 80045d2:	f7fb fdc1 	bl	8000158 <__aeabi_dsub>
 80045d6:	4602      	mov	r2, r0
 80045d8:	2000      	movs	r0, #0
 80045da:	460b      	mov	r3, r1
 80045dc:	4922      	ldr	r1, [pc, #136]	; (8004668 <__kernel_cos+0x170>)
 80045de:	f7fb fdbb 	bl	8000158 <__aeabi_dsub>
 80045e2:	b003      	add	sp, #12
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	2400      	movs	r4, #0
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <__kernel_cos+0x174>)
 80045ec:	4622      	mov	r2, r4
 80045ee:	429e      	cmp	r6, r3
 80045f0:	bfcc      	ite	gt
 80045f2:	4d1f      	ldrgt	r5, [pc, #124]	; (8004670 <__kernel_cos+0x178>)
 80045f4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80045f8:	462b      	mov	r3, r5
 80045fa:	2000      	movs	r0, #0
 80045fc:	491a      	ldr	r1, [pc, #104]	; (8004668 <__kernel_cos+0x170>)
 80045fe:	f7fb fdab 	bl	8000158 <__aeabi_dsub>
 8004602:	4622      	mov	r2, r4
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	462b      	mov	r3, r5
 800460a:	4650      	mov	r0, sl
 800460c:	4659      	mov	r1, fp
 800460e:	f7fb fda3 	bl	8000158 <__aeabi_dsub>
 8004612:	4642      	mov	r2, r8
 8004614:	464b      	mov	r3, r9
 8004616:	f7fb fd9f 	bl	8000158 <__aeabi_dsub>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	e7dc      	b.n	80045de <__kernel_cos+0xe6>
 8004624:	2000      	movs	r0, #0
 8004626:	4910      	ldr	r1, [pc, #64]	; (8004668 <__kernel_cos+0x170>)
 8004628:	e7db      	b.n	80045e2 <__kernel_cos+0xea>
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w
 8004630:	be8838d4 	.word	0xbe8838d4
 8004634:	bda8fae9 	.word	0xbda8fae9
 8004638:	bdb4b1c4 	.word	0xbdb4b1c4
 800463c:	3e21ee9e 	.word	0x3e21ee9e
 8004640:	809c52ad 	.word	0x809c52ad
 8004644:	3e927e4f 	.word	0x3e927e4f
 8004648:	19cb1590 	.word	0x19cb1590
 800464c:	3efa01a0 	.word	0x3efa01a0
 8004650:	16c15177 	.word	0x16c15177
 8004654:	3f56c16c 	.word	0x3f56c16c
 8004658:	5555554c 	.word	0x5555554c
 800465c:	3fa55555 	.word	0x3fa55555
 8004660:	3fe00000 	.word	0x3fe00000
 8004664:	3fd33332 	.word	0x3fd33332
 8004668:	3ff00000 	.word	0x3ff00000
 800466c:	3fe90000 	.word	0x3fe90000
 8004670:	3fd20000 	.word	0x3fd20000

08004674 <__kernel_rem_pio2>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800467c:	9308      	str	r3, [sp, #32]
 800467e:	9101      	str	r1, [sp, #4]
 8004680:	4bc0      	ldr	r3, [pc, #768]	; (8004984 <__kernel_rem_pio2+0x310>)
 8004682:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004684:	f112 0f14 	cmn.w	r2, #20
 8004688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800468c:	bfa8      	it	ge
 800468e:	1ed4      	subge	r4, r2, #3
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	9b08      	ldr	r3, [sp, #32]
 8004694:	bfb8      	it	lt
 8004696:	2400      	movlt	r4, #0
 8004698:	f103 33ff 	add.w	r3, r3, #4294967295
 800469c:	9306      	str	r3, [sp, #24]
 800469e:	bfa4      	itt	ge
 80046a0:	2318      	movge	r3, #24
 80046a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80046a6:	f06f 0317 	mvn.w	r3, #23
 80046aa:	fb04 3303 	mla	r3, r4, r3, r3
 80046ae:	eb03 0a02 	add.w	sl, r3, r2
 80046b2:	9a06      	ldr	r2, [sp, #24]
 80046b4:	9b04      	ldr	r3, [sp, #16]
 80046b6:	1aa7      	subs	r7, r4, r2
 80046b8:	eb03 0802 	add.w	r8, r3, r2
 80046bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80046be:	2500      	movs	r5, #0
 80046c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	9009      	str	r0, [sp, #36]	; 0x24
 80046ca:	ae20      	add	r6, sp, #128	; 0x80
 80046cc:	4545      	cmp	r5, r8
 80046ce:	dd19      	ble.n	8004704 <__kernel_rem_pio2+0x90>
 80046d0:	9b08      	ldr	r3, [sp, #32]
 80046d2:	aa20      	add	r2, sp, #128	; 0x80
 80046d4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80046d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80046dc:	f1c3 0301 	rsb	r3, r3, #1
 80046e0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80046e4:	9307      	str	r3, [sp, #28]
 80046e6:	9b07      	ldr	r3, [sp, #28]
 80046e8:	9a04      	ldr	r2, [sp, #16]
 80046ea:	4443      	add	r3, r8
 80046ec:	429a      	cmp	r2, r3
 80046ee:	db35      	blt.n	800475c <__kernel_rem_pio2+0xe8>
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	2200      	movs	r2, #0
 80046f4:	f1a3 0908 	sub.w	r9, r3, #8
 80046f8:	2300      	movs	r3, #0
 80046fa:	462f      	mov	r7, r5
 80046fc:	2600      	movs	r6, #0
 80046fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004702:	e01f      	b.n	8004744 <__kernel_rem_pio2+0xd0>
 8004704:	42ef      	cmn	r7, r5
 8004706:	d40b      	bmi.n	8004720 <__kernel_rem_pio2+0xac>
 8004708:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800470c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004710:	f7fb fe70 	bl	80003f4 <__aeabi_i2d>
 8004714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004718:	e8e6 0102 	strd	r0, r1, [r6], #8
 800471c:	3501      	adds	r5, #1
 800471e:	e7d5      	b.n	80046cc <__kernel_rem_pio2+0x58>
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	e7f8      	b.n	8004718 <__kernel_rem_pio2+0xa4>
 8004726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800472e:	f7fb fecb 	bl	80004c8 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800473a:	f7fb fd0f 	bl	800015c <__adddf3>
 800473e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004742:	3601      	adds	r6, #1
 8004744:	9b06      	ldr	r3, [sp, #24]
 8004746:	3f08      	subs	r7, #8
 8004748:	429e      	cmp	r6, r3
 800474a:	ddec      	ble.n	8004726 <__kernel_rem_pio2+0xb2>
 800474c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004750:	3508      	adds	r5, #8
 8004752:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004756:	f108 0801 	add.w	r8, r8, #1
 800475a:	e7c4      	b.n	80046e6 <__kernel_rem_pio2+0x72>
 800475c:	9b04      	ldr	r3, [sp, #16]
 800475e:	aa0c      	add	r2, sp, #48	; 0x30
 8004760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004764:	930b      	str	r3, [sp, #44]	; 0x2c
 8004766:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004768:	9f04      	ldr	r7, [sp, #16]
 800476a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800476e:	930a      	str	r3, [sp, #40]	; 0x28
 8004770:	463e      	mov	r6, r7
 8004772:	ab98      	add	r3, sp, #608	; 0x260
 8004774:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004778:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800477c:	f8cd b008 	str.w	fp, [sp, #8]
 8004780:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004784:	2e00      	cmp	r6, #0
 8004786:	dc71      	bgt.n	800486c <__kernel_rem_pio2+0x1f8>
 8004788:	4652      	mov	r2, sl
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	f000 fbf7 	bl	8004f80 <scalbn>
 8004792:	2200      	movs	r2, #0
 8004794:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004798:	4604      	mov	r4, r0
 800479a:	460d      	mov	r5, r1
 800479c:	f7fb fe94 	bl	80004c8 <__aeabi_dmul>
 80047a0:	f000 fb6e 	bl	8004e80 <floor>
 80047a4:	2200      	movs	r2, #0
 80047a6:	4b78      	ldr	r3, [pc, #480]	; (8004988 <__kernel_rem_pio2+0x314>)
 80047a8:	f7fb fe8e 	bl	80004c8 <__aeabi_dmul>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	f7fb fcd0 	bl	8000158 <__aeabi_dsub>
 80047b8:	460d      	mov	r5, r1
 80047ba:	4604      	mov	r4, r0
 80047bc:	f7fc f91e 	bl	80009fc <__aeabi_d2iz>
 80047c0:	9007      	str	r0, [sp, #28]
 80047c2:	f7fb fe17 	bl	80003f4 <__aeabi_i2d>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fb fcc3 	bl	8000158 <__aeabi_dsub>
 80047d2:	f1ba 0f00 	cmp.w	sl, #0
 80047d6:	4680      	mov	r8, r0
 80047d8:	4689      	mov	r9, r1
 80047da:	dd70      	ble.n	80048be <__kernel_rem_pio2+0x24a>
 80047dc:	1e7a      	subs	r2, r7, #1
 80047de:	ab0c      	add	r3, sp, #48	; 0x30
 80047e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80047e4:	9c07      	ldr	r4, [sp, #28]
 80047e6:	f1ca 0118 	rsb	r1, sl, #24
 80047ea:	fa40 f301 	asr.w	r3, r0, r1
 80047ee:	441c      	add	r4, r3
 80047f0:	408b      	lsls	r3, r1
 80047f2:	1ac0      	subs	r0, r0, r3
 80047f4:	ab0c      	add	r3, sp, #48	; 0x30
 80047f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80047fa:	f1ca 0317 	rsb	r3, sl, #23
 80047fe:	9407      	str	r4, [sp, #28]
 8004800:	fa40 f303 	asr.w	r3, r0, r3
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dd66      	ble.n	80048da <__kernel_rem_pio2+0x266>
 800480c:	2200      	movs	r2, #0
 800480e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004812:	4614      	mov	r4, r2
 8004814:	9b07      	ldr	r3, [sp, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	9307      	str	r3, [sp, #28]
 800481a:	4297      	cmp	r7, r2
 800481c:	f300 809f 	bgt.w	800495e <__kernel_rem_pio2+0x2ea>
 8004820:	f1ba 0f00 	cmp.w	sl, #0
 8004824:	dd07      	ble.n	8004836 <__kernel_rem_pio2+0x1c2>
 8004826:	f1ba 0f01 	cmp.w	sl, #1
 800482a:	f000 80b9 	beq.w	80049a0 <__kernel_rem_pio2+0x32c>
 800482e:	f1ba 0f02 	cmp.w	sl, #2
 8004832:	f000 80bf 	beq.w	80049b4 <__kernel_rem_pio2+0x340>
 8004836:	9b02      	ldr	r3, [sp, #8]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d14e      	bne.n	80048da <__kernel_rem_pio2+0x266>
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	2000      	movs	r0, #0
 8004842:	4952      	ldr	r1, [pc, #328]	; (800498c <__kernel_rem_pio2+0x318>)
 8004844:	f7fb fc88 	bl	8000158 <__aeabi_dsub>
 8004848:	4680      	mov	r8, r0
 800484a:	4689      	mov	r9, r1
 800484c:	2c00      	cmp	r4, #0
 800484e:	d044      	beq.n	80048da <__kernel_rem_pio2+0x266>
 8004850:	4652      	mov	r2, sl
 8004852:	2000      	movs	r0, #0
 8004854:	494d      	ldr	r1, [pc, #308]	; (800498c <__kernel_rem_pio2+0x318>)
 8004856:	f000 fb93 	bl	8004f80 <scalbn>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	f7fb fc79 	bl	8000158 <__aeabi_dsub>
 8004866:	4680      	mov	r8, r0
 8004868:	4689      	mov	r9, r1
 800486a:	e036      	b.n	80048da <__kernel_rem_pio2+0x266>
 800486c:	2200      	movs	r2, #0
 800486e:	4b48      	ldr	r3, [pc, #288]	; (8004990 <__kernel_rem_pio2+0x31c>)
 8004870:	4620      	mov	r0, r4
 8004872:	4629      	mov	r1, r5
 8004874:	f7fb fe28 	bl	80004c8 <__aeabi_dmul>
 8004878:	f7fc f8c0 	bl	80009fc <__aeabi_d2iz>
 800487c:	f7fb fdba 	bl	80003f4 <__aeabi_i2d>
 8004880:	2200      	movs	r2, #0
 8004882:	4b44      	ldr	r3, [pc, #272]	; (8004994 <__kernel_rem_pio2+0x320>)
 8004884:	4680      	mov	r8, r0
 8004886:	4689      	mov	r9, r1
 8004888:	f7fb fe1e 	bl	80004c8 <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fb fc60 	bl	8000158 <__aeabi_dsub>
 8004898:	f7fc f8b0 	bl	80009fc <__aeabi_d2iz>
 800489c:	9b02      	ldr	r3, [sp, #8]
 800489e:	3e01      	subs	r6, #1
 80048a0:	f843 0b04 	str.w	r0, [r3], #4
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80048a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048ac:	4640      	mov	r0, r8
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	4649      	mov	r1, r9
 80048b4:	f7fb fc52 	bl	800015c <__adddf3>
 80048b8:	4604      	mov	r4, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	e762      	b.n	8004784 <__kernel_rem_pio2+0x110>
 80048be:	d105      	bne.n	80048cc <__kernel_rem_pio2+0x258>
 80048c0:	1e7b      	subs	r3, r7, #1
 80048c2:	aa0c      	add	r2, sp, #48	; 0x30
 80048c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80048c8:	15c3      	asrs	r3, r0, #23
 80048ca:	e79b      	b.n	8004804 <__kernel_rem_pio2+0x190>
 80048cc:	2200      	movs	r2, #0
 80048ce:	4b32      	ldr	r3, [pc, #200]	; (8004998 <__kernel_rem_pio2+0x324>)
 80048d0:	f7fc f880 	bl	80009d4 <__aeabi_dcmpge>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d13f      	bne.n	8004958 <__kernel_rem_pio2+0x2e4>
 80048d8:	9002      	str	r0, [sp, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	2300      	movs	r3, #0
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f7fc f859 	bl	8000998 <__aeabi_dcmpeq>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f000 80b5 	beq.w	8004a56 <__kernel_rem_pio2+0x3e2>
 80048ec:	1e7c      	subs	r4, r7, #1
 80048ee:	4623      	mov	r3, r4
 80048f0:	2200      	movs	r2, #0
 80048f2:	9904      	ldr	r1, [sp, #16]
 80048f4:	428b      	cmp	r3, r1
 80048f6:	da64      	bge.n	80049c2 <__kernel_rem_pio2+0x34e>
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d078      	beq.n	80049ee <__kernel_rem_pio2+0x37a>
 80048fc:	ab0c      	add	r3, sp, #48	; 0x30
 80048fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004902:	f1aa 0a18 	sub.w	sl, sl, #24
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80a3 	beq.w	8004a52 <__kernel_rem_pio2+0x3de>
 800490c:	4652      	mov	r2, sl
 800490e:	2000      	movs	r0, #0
 8004910:	491e      	ldr	r1, [pc, #120]	; (800498c <__kernel_rem_pio2+0x318>)
 8004912:	f000 fb35 	bl	8004f80 <scalbn>
 8004916:	46a2      	mov	sl, r4
 8004918:	4606      	mov	r6, r0
 800491a:	460f      	mov	r7, r1
 800491c:	f04f 0800 	mov.w	r8, #0
 8004920:	00e3      	lsls	r3, r4, #3
 8004922:	9306      	str	r3, [sp, #24]
 8004924:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8004990 <__kernel_rem_pio2+0x31c>
 8004928:	ab70      	add	r3, sp, #448	; 0x1c0
 800492a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800492e:	f1ba 0f00 	cmp.w	sl, #0
 8004932:	f280 80c6 	bge.w	8004ac2 <__kernel_rem_pio2+0x44e>
 8004936:	4627      	mov	r7, r4
 8004938:	f04f 0800 	mov.w	r8, #0
 800493c:	2f00      	cmp	r7, #0
 800493e:	f2c0 80f3 	blt.w	8004b28 <__kernel_rem_pio2+0x4b4>
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <__kernel_rem_pio2+0x328>)
 8004944:	f04f 0a00 	mov.w	sl, #0
 8004948:	461d      	mov	r5, r3
 800494a:	ab70      	add	r3, sp, #448	; 0x1c0
 800494c:	f04f 0b00 	mov.w	fp, #0
 8004950:	2600      	movs	r6, #0
 8004952:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004956:	e0d9      	b.n	8004b0c <__kernel_rem_pio2+0x498>
 8004958:	2302      	movs	r3, #2
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	e756      	b.n	800480c <__kernel_rem_pio2+0x198>
 800495e:	f8db 3000 	ldr.w	r3, [fp]
 8004962:	b954      	cbnz	r4, 800497a <__kernel_rem_pio2+0x306>
 8004964:	b123      	cbz	r3, 8004970 <__kernel_rem_pio2+0x2fc>
 8004966:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800496a:	f8cb 3000 	str.w	r3, [fp]
 800496e:	2301      	movs	r3, #1
 8004970:	461c      	mov	r4, r3
 8004972:	3201      	adds	r2, #1
 8004974:	f10b 0b04 	add.w	fp, fp, #4
 8004978:	e74f      	b.n	800481a <__kernel_rem_pio2+0x1a6>
 800497a:	1acb      	subs	r3, r1, r3
 800497c:	f8cb 3000 	str.w	r3, [fp]
 8004980:	4623      	mov	r3, r4
 8004982:	e7f5      	b.n	8004970 <__kernel_rem_pio2+0x2fc>
 8004984:	080054c0 	.word	0x080054c0
 8004988:	40200000 	.word	0x40200000
 800498c:	3ff00000 	.word	0x3ff00000
 8004990:	3e700000 	.word	0x3e700000
 8004994:	41700000 	.word	0x41700000
 8004998:	3fe00000 	.word	0x3fe00000
 800499c:	08005480 	.word	0x08005480
 80049a0:	1e7a      	subs	r2, r7, #1
 80049a2:	ab0c      	add	r3, sp, #48	; 0x30
 80049a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80049ac:	a90c      	add	r1, sp, #48	; 0x30
 80049ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80049b2:	e740      	b.n	8004836 <__kernel_rem_pio2+0x1c2>
 80049b4:	1e7a      	subs	r2, r7, #1
 80049b6:	ab0c      	add	r3, sp, #48	; 0x30
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80049c0:	e7f4      	b.n	80049ac <__kernel_rem_pio2+0x338>
 80049c2:	a90c      	add	r1, sp, #48	; 0x30
 80049c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	430a      	orrs	r2, r1
 80049cc:	e791      	b.n	80048f2 <__kernel_rem_pio2+0x27e>
 80049ce:	3401      	adds	r4, #1
 80049d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d0fa      	beq.n	80049ce <__kernel_rem_pio2+0x35a>
 80049d8:	9b08      	ldr	r3, [sp, #32]
 80049da:	1c7e      	adds	r6, r7, #1
 80049dc:	18fd      	adds	r5, r7, r3
 80049de:	ab20      	add	r3, sp, #128	; 0x80
 80049e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80049e4:	443c      	add	r4, r7
 80049e6:	42b4      	cmp	r4, r6
 80049e8:	da04      	bge.n	80049f4 <__kernel_rem_pio2+0x380>
 80049ea:	4627      	mov	r7, r4
 80049ec:	e6c0      	b.n	8004770 <__kernel_rem_pio2+0xfc>
 80049ee:	2401      	movs	r4, #1
 80049f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f2:	e7ed      	b.n	80049d0 <__kernel_rem_pio2+0x35c>
 80049f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f6:	462f      	mov	r7, r5
 80049f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80049fc:	f7fb fcfa 	bl	80003f4 <__aeabi_i2d>
 8004a00:	f04f 0b00 	mov.w	fp, #0
 8004a04:	f04f 0800 	mov.w	r8, #0
 8004a08:	f04f 0900 	mov.w	r9, #0
 8004a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8004a12:	3b08      	subs	r3, #8
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	9b06      	ldr	r3, [sp, #24]
 8004a18:	459b      	cmp	fp, r3
 8004a1a:	dd07      	ble.n	8004a2c <__kernel_rem_pio2+0x3b8>
 8004a1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8004a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a22:	463d      	mov	r5, r7
 8004a24:	e9c3 8900 	strd	r8, r9, [r3]
 8004a28:	3601      	adds	r6, #1
 8004a2a:	e7dc      	b.n	80049e6 <__kernel_rem_pio2+0x372>
 8004a2c:	9902      	ldr	r1, [sp, #8]
 8004a2e:	f10b 0b01 	add.w	fp, fp, #1
 8004a32:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004a36:	9102      	str	r1, [sp, #8]
 8004a38:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8004a3c:	f7fb fd44 	bl	80004c8 <__aeabi_dmul>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4640      	mov	r0, r8
 8004a46:	4649      	mov	r1, r9
 8004a48:	f7fb fb88 	bl	800015c <__adddf3>
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	4689      	mov	r9, r1
 8004a50:	e7e1      	b.n	8004a16 <__kernel_rem_pio2+0x3a2>
 8004a52:	3c01      	subs	r4, #1
 8004a54:	e752      	b.n	80048fc <__kernel_rem_pio2+0x288>
 8004a56:	f1ca 0200 	rsb	r2, sl, #0
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f000 fa8f 	bl	8004f80 <scalbn>
 8004a62:	2200      	movs	r2, #0
 8004a64:	4ba5      	ldr	r3, [pc, #660]	; (8004cfc <__kernel_rem_pio2+0x688>)
 8004a66:	4604      	mov	r4, r0
 8004a68:	460d      	mov	r5, r1
 8004a6a:	f7fb ffb3 	bl	80009d4 <__aeabi_dcmpge>
 8004a6e:	b1f8      	cbz	r0, 8004ab0 <__kernel_rem_pio2+0x43c>
 8004a70:	2200      	movs	r2, #0
 8004a72:	4ba3      	ldr	r3, [pc, #652]	; (8004d00 <__kernel_rem_pio2+0x68c>)
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fd26 	bl	80004c8 <__aeabi_dmul>
 8004a7c:	f7fb ffbe 	bl	80009fc <__aeabi_d2iz>
 8004a80:	4606      	mov	r6, r0
 8004a82:	f7fb fcb7 	bl	80003f4 <__aeabi_i2d>
 8004a86:	2200      	movs	r2, #0
 8004a88:	4b9c      	ldr	r3, [pc, #624]	; (8004cfc <__kernel_rem_pio2+0x688>)
 8004a8a:	f7fb fd1d 	bl	80004c8 <__aeabi_dmul>
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4602      	mov	r2, r0
 8004a92:	4629      	mov	r1, r5
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7fb fb5f 	bl	8000158 <__aeabi_dsub>
 8004a9a:	f7fb ffaf 	bl	80009fc <__aeabi_d2iz>
 8004a9e:	1c7c      	adds	r4, r7, #1
 8004aa0:	ab0c      	add	r3, sp, #48	; 0x30
 8004aa2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004aa6:	f10a 0a18 	add.w	sl, sl, #24
 8004aaa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8004aae:	e72d      	b.n	800490c <__kernel_rem_pio2+0x298>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fb ffa2 	bl	80009fc <__aeabi_d2iz>
 8004ab8:	ab0c      	add	r3, sp, #48	; 0x30
 8004aba:	463c      	mov	r4, r7
 8004abc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004ac0:	e724      	b.n	800490c <__kernel_rem_pio2+0x298>
 8004ac2:	ab0c      	add	r3, sp, #48	; 0x30
 8004ac4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004ac8:	f7fb fc94 	bl	80003f4 <__aeabi_i2d>
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	f7fb fcfa 	bl	80004c8 <__aeabi_dmul>
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004ada:	464b      	mov	r3, r9
 8004adc:	4630      	mov	r0, r6
 8004ade:	4639      	mov	r1, r7
 8004ae0:	f7fb fcf2 	bl	80004c8 <__aeabi_dmul>
 8004ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ae8:	4606      	mov	r6, r0
 8004aea:	460f      	mov	r7, r1
 8004aec:	e71f      	b.n	800492e <__kernel_rem_pio2+0x2ba>
 8004aee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004af2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004af6:	f7fb fce7 	bl	80004c8 <__aeabi_dmul>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4650      	mov	r0, sl
 8004b00:	4659      	mov	r1, fp
 8004b02:	f7fb fb2b 	bl	800015c <__adddf3>
 8004b06:	4682      	mov	sl, r0
 8004b08:	468b      	mov	fp, r1
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	429e      	cmp	r6, r3
 8004b10:	dc01      	bgt.n	8004b16 <__kernel_rem_pio2+0x4a2>
 8004b12:	45b0      	cmp	r8, r6
 8004b14:	daeb      	bge.n	8004aee <__kernel_rem_pio2+0x47a>
 8004b16:	ab48      	add	r3, sp, #288	; 0x120
 8004b18:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004b1c:	e9c3 ab00 	strd	sl, fp, [r3]
 8004b20:	3f01      	subs	r7, #1
 8004b22:	f108 0801 	add.w	r8, r8, #1
 8004b26:	e709      	b.n	800493c <__kernel_rem_pio2+0x2c8>
 8004b28:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	dc09      	bgt.n	8004b42 <__kernel_rem_pio2+0x4ce>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dc34      	bgt.n	8004b9c <__kernel_rem_pio2+0x528>
 8004b32:	d05e      	beq.n	8004bf2 <__kernel_rem_pio2+0x57e>
 8004b34:	9b07      	ldr	r3, [sp, #28]
 8004b36:	f003 0007 	and.w	r0, r3, #7
 8004b3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b42:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d1f5      	bne.n	8004b34 <__kernel_rem_pio2+0x4c0>
 8004b48:	9a06      	ldr	r2, [sp, #24]
 8004b4a:	ab48      	add	r3, sp, #288	; 0x120
 8004b4c:	441a      	add	r2, r3
 8004b4e:	4615      	mov	r5, r2
 8004b50:	4692      	mov	sl, r2
 8004b52:	46a3      	mov	fp, r4
 8004b54:	f1bb 0f00 	cmp.w	fp, #0
 8004b58:	dc7a      	bgt.n	8004c50 <__kernel_rem_pio2+0x5dc>
 8004b5a:	46aa      	mov	sl, r5
 8004b5c:	46a3      	mov	fp, r4
 8004b5e:	f1bb 0f01 	cmp.w	fp, #1
 8004b62:	f300 8094 	bgt.w	8004c8e <__kernel_rem_pio2+0x61a>
 8004b66:	2700      	movs	r7, #0
 8004b68:	463e      	mov	r6, r7
 8004b6a:	2c01      	cmp	r4, #1
 8004b6c:	f300 80ae 	bgt.w	8004ccc <__kernel_rem_pio2+0x658>
 8004b70:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004b74:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 80b0 	bne.w	8004ce0 <__kernel_rem_pio2+0x66c>
 8004b80:	4603      	mov	r3, r0
 8004b82:	462a      	mov	r2, r5
 8004b84:	9801      	ldr	r0, [sp, #4]
 8004b86:	e9c0 2300 	strd	r2, r3, [r0]
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004b92:	463a      	mov	r2, r7
 8004b94:	4633      	mov	r3, r6
 8004b96:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004b9a:	e7cb      	b.n	8004b34 <__kernel_rem_pio2+0x4c0>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	9a06      	ldr	r2, [sp, #24]
 8004ba0:	ab48      	add	r3, sp, #288	; 0x120
 8004ba2:	441a      	add	r2, r3
 8004ba4:	4615      	mov	r5, r2
 8004ba6:	46a0      	mov	r8, r4
 8004ba8:	4601      	mov	r1, r0
 8004baa:	f1b8 0f00 	cmp.w	r8, #0
 8004bae:	da3c      	bge.n	8004c2a <__kernel_rem_pio2+0x5b6>
 8004bb0:	9b02      	ldr	r3, [sp, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d040      	beq.n	8004c38 <__kernel_rem_pio2+0x5c4>
 8004bb6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004bba:	4602      	mov	r2, r0
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	9d01      	ldr	r5, [sp, #4]
 8004bc0:	2601      	movs	r6, #1
 8004bc2:	e9c5 2300 	strd	r2, r3, [r5]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004bcc:	f7fb fac4 	bl	8000158 <__aeabi_dsub>
 8004bd0:	4684      	mov	ip, r0
 8004bd2:	460f      	mov	r7, r1
 8004bd4:	ad48      	add	r5, sp, #288	; 0x120
 8004bd6:	42b4      	cmp	r4, r6
 8004bd8:	f105 0508 	add.w	r5, r5, #8
 8004bdc:	da2e      	bge.n	8004c3c <__kernel_rem_pio2+0x5c8>
 8004bde:	9b02      	ldr	r3, [sp, #8]
 8004be0:	b10b      	cbz	r3, 8004be6 <__kernel_rem_pio2+0x572>
 8004be2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004be6:	4662      	mov	r2, ip
 8004be8:	463b      	mov	r3, r7
 8004bea:	9901      	ldr	r1, [sp, #4]
 8004bec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004bf0:	e7a0      	b.n	8004b34 <__kernel_rem_pio2+0x4c0>
 8004bf2:	9a06      	ldr	r2, [sp, #24]
 8004bf4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004bf6:	ab48      	add	r3, sp, #288	; 0x120
 8004bf8:	441a      	add	r2, r3
 8004bfa:	4615      	mov	r5, r2
 8004bfc:	4637      	mov	r7, r6
 8004bfe:	2c00      	cmp	r4, #0
 8004c00:	da09      	bge.n	8004c16 <__kernel_rem_pio2+0x5a2>
 8004c02:	9b02      	ldr	r3, [sp, #8]
 8004c04:	b10b      	cbz	r3, 8004c0a <__kernel_rem_pio2+0x596>
 8004c06:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	9901      	ldr	r1, [sp, #4]
 8004c10:	e9c1 2300 	strd	r2, r3, [r1]
 8004c14:	e78e      	b.n	8004b34 <__kernel_rem_pio2+0x4c0>
 8004c16:	4630      	mov	r0, r6
 8004c18:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004c1c:	4639      	mov	r1, r7
 8004c1e:	f7fb fa9d 	bl	800015c <__adddf3>
 8004c22:	3c01      	subs	r4, #1
 8004c24:	4606      	mov	r6, r0
 8004c26:	460f      	mov	r7, r1
 8004c28:	e7e9      	b.n	8004bfe <__kernel_rem_pio2+0x58a>
 8004c2a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004c2e:	f7fb fa95 	bl	800015c <__adddf3>
 8004c32:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c36:	e7b8      	b.n	8004baa <__kernel_rem_pio2+0x536>
 8004c38:	460d      	mov	r5, r1
 8004c3a:	e7be      	b.n	8004bba <__kernel_rem_pio2+0x546>
 8004c3c:	4660      	mov	r0, ip
 8004c3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb fa8a 	bl	800015c <__adddf3>
 8004c48:	3601      	adds	r6, #1
 8004c4a:	4684      	mov	ip, r0
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	e7c2      	b.n	8004bd6 <__kernel_rem_pio2+0x562>
 8004c50:	e9da 6700 	ldrd	r6, r7, [sl]
 8004c54:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004c58:	4632      	mov	r2, r6
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4649      	mov	r1, r9
 8004c60:	f7fb fa7c 	bl	800015c <__adddf3>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	4649      	mov	r1, r9
 8004c70:	f7fb fa72 	bl	8000158 <__aeabi_dsub>
 8004c74:	4632      	mov	r2, r6
 8004c76:	463b      	mov	r3, r7
 8004c78:	f7fb fa70 	bl	800015c <__adddf3>
 8004c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c80:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004c84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c88:	e9ca 2300 	strd	r2, r3, [sl]
 8004c8c:	e762      	b.n	8004b54 <__kernel_rem_pio2+0x4e0>
 8004c8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004c92:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004c96:	4642      	mov	r2, r8
 8004c98:	464b      	mov	r3, r9
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	f7fb fa5d 	bl	800015c <__adddf3>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb fa53 	bl	8000158 <__aeabi_dsub>
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	f7fb fa51 	bl	800015c <__adddf3>
 8004cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cbe:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cc6:	e9ca 2300 	strd	r2, r3, [sl]
 8004cca:	e748      	b.n	8004b5e <__kernel_rem_pio2+0x4ea>
 8004ccc:	4638      	mov	r0, r7
 8004cce:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	f7fb fa42 	bl	800015c <__adddf3>
 8004cd8:	3c01      	subs	r4, #1
 8004cda:	4607      	mov	r7, r0
 8004cdc:	460e      	mov	r6, r1
 8004cde:	e744      	b.n	8004b6a <__kernel_rem_pio2+0x4f6>
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004ce6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004cea:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004cee:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004cf2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004cf6:	601d      	str	r5, [r3, #0]
 8004cf8:	615e      	str	r6, [r3, #20]
 8004cfa:	e71b      	b.n	8004b34 <__kernel_rem_pio2+0x4c0>
 8004cfc:	41700000 	.word	0x41700000
 8004d00:	3e700000 	.word	0x3e700000
 8004d04:	00000000 	.word	0x00000000

08004d08 <__kernel_sin>:
 8004d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	e9cd 2300 	strd	r2, r3, [sp]
 8004d12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d16:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004d1a:	4682      	mov	sl, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004d20:	da03      	bge.n	8004d2a <__kernel_sin+0x22>
 8004d22:	f7fb fe6b 	bl	80009fc <__aeabi_d2iz>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d050      	beq.n	8004dcc <__kernel_sin+0xc4>
 8004d2a:	4652      	mov	r2, sl
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	4650      	mov	r0, sl
 8004d30:	4621      	mov	r1, r4
 8004d32:	f7fb fbc9 	bl	80004c8 <__aeabi_dmul>
 8004d36:	4606      	mov	r6, r0
 8004d38:	460f      	mov	r7, r1
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4650      	mov	r0, sl
 8004d40:	4621      	mov	r1, r4
 8004d42:	f7fb fbc1 	bl	80004c8 <__aeabi_dmul>
 8004d46:	a33e      	add	r3, pc, #248	; (adr r3, 8004e40 <__kernel_sin+0x138>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	4689      	mov	r9, r1
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb fbb8 	bl	80004c8 <__aeabi_dmul>
 8004d58:	a33b      	add	r3, pc, #236	; (adr r3, 8004e48 <__kernel_sin+0x140>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb f9fb 	bl	8000158 <__aeabi_dsub>
 8004d62:	4632      	mov	r2, r6
 8004d64:	463b      	mov	r3, r7
 8004d66:	f7fb fbaf 	bl	80004c8 <__aeabi_dmul>
 8004d6a:	a339      	add	r3, pc, #228	; (adr r3, 8004e50 <__kernel_sin+0x148>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb f9f4 	bl	800015c <__adddf3>
 8004d74:	4632      	mov	r2, r6
 8004d76:	463b      	mov	r3, r7
 8004d78:	f7fb fba6 	bl	80004c8 <__aeabi_dmul>
 8004d7c:	a336      	add	r3, pc, #216	; (adr r3, 8004e58 <__kernel_sin+0x150>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f7fb f9e9 	bl	8000158 <__aeabi_dsub>
 8004d86:	4632      	mov	r2, r6
 8004d88:	463b      	mov	r3, r7
 8004d8a:	f7fb fb9d 	bl	80004c8 <__aeabi_dmul>
 8004d8e:	a334      	add	r3, pc, #208	; (adr r3, 8004e60 <__kernel_sin+0x158>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f7fb f9e2 	bl	800015c <__adddf3>
 8004d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d9c:	b9dd      	cbnz	r5, 8004dd6 <__kernel_sin+0xce>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4630      	mov	r0, r6
 8004da4:	4639      	mov	r1, r7
 8004da6:	f7fb fb8f 	bl	80004c8 <__aeabi_dmul>
 8004daa:	a32f      	add	r3, pc, #188	; (adr r3, 8004e68 <__kernel_sin+0x160>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb f9d2 	bl	8000158 <__aeabi_dsub>
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	f7fb fb86 	bl	80004c8 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4650      	mov	r0, sl
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	f7fb f9ca 	bl	800015c <__adddf3>
 8004dc8:	4682      	mov	sl, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	4650      	mov	r0, sl
 8004dce:	4621      	mov	r1, r4
 8004dd0:	b006      	add	sp, #24
 8004dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ddc:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <__kernel_sin+0x168>)
 8004dde:	f7fb fb73 	bl	80004c8 <__aeabi_dmul>
 8004de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004de6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dea:	4640      	mov	r0, r8
 8004dec:	4649      	mov	r1, r9
 8004dee:	f7fb fb6b 	bl	80004c8 <__aeabi_dmul>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfa:	f7fb f9ad 	bl	8000158 <__aeabi_dsub>
 8004dfe:	4632      	mov	r2, r6
 8004e00:	463b      	mov	r3, r7
 8004e02:	f7fb fb61 	bl	80004c8 <__aeabi_dmul>
 8004e06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e0a:	f7fb f9a5 	bl	8000158 <__aeabi_dsub>
 8004e0e:	a316      	add	r3, pc, #88	; (adr r3, 8004e68 <__kernel_sin+0x160>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	4640      	mov	r0, r8
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	f7fb fb54 	bl	80004c8 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4630      	mov	r0, r6
 8004e26:	4639      	mov	r1, r7
 8004e28:	f7fb f998 	bl	800015c <__adddf3>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4650      	mov	r0, sl
 8004e32:	4621      	mov	r1, r4
 8004e34:	f7fb f990 	bl	8000158 <__aeabi_dsub>
 8004e38:	e7c6      	b.n	8004dc8 <__kernel_sin+0xc0>
 8004e3a:	bf00      	nop
 8004e3c:	f3af 8000 	nop.w
 8004e40:	5acfd57c 	.word	0x5acfd57c
 8004e44:	3de5d93a 	.word	0x3de5d93a
 8004e48:	8a2b9ceb 	.word	0x8a2b9ceb
 8004e4c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004e50:	57b1fe7d 	.word	0x57b1fe7d
 8004e54:	3ec71de3 	.word	0x3ec71de3
 8004e58:	19c161d5 	.word	0x19c161d5
 8004e5c:	3f2a01a0 	.word	0x3f2a01a0
 8004e60:	1110f8a6 	.word	0x1110f8a6
 8004e64:	3f811111 	.word	0x3f811111
 8004e68:	55555549 	.word	0x55555549
 8004e6c:	3fc55555 	.word	0x3fc55555
 8004e70:	3fe00000 	.word	0x3fe00000

08004e74 <fabs>:
 8004e74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004e78:	4770      	bx	lr
 8004e7a:	0000      	movs	r0, r0
 8004e7c:	0000      	movs	r0, r0
	...

08004e80 <floor>:
 8004e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004e88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004e8c:	2e13      	cmp	r6, #19
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4607      	mov	r7, r0
 8004e94:	460c      	mov	r4, r1
 8004e96:	4605      	mov	r5, r0
 8004e98:	dc34      	bgt.n	8004f04 <floor+0x84>
 8004e9a:	2e00      	cmp	r6, #0
 8004e9c:	da15      	bge.n	8004eca <floor+0x4a>
 8004e9e:	a334      	add	r3, pc, #208	; (adr r3, 8004f70 <floor+0xf0>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f7fb f95a 	bl	800015c <__adddf3>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f7fb fd9c 	bl	80009e8 <__aeabi_dcmpgt>
 8004eb0:	b140      	cbz	r0, 8004ec4 <floor+0x44>
 8004eb2:	2c00      	cmp	r4, #0
 8004eb4:	da59      	bge.n	8004f6a <floor+0xea>
 8004eb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004eba:	ea57 0503 	orrs.w	r5, r7, r3
 8004ebe:	d001      	beq.n	8004ec4 <floor+0x44>
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	4c2d      	ldr	r4, [pc, #180]	; (8004f78 <floor+0xf8>)
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	462f      	mov	r7, r5
 8004ec8:	e025      	b.n	8004f16 <floor+0x96>
 8004eca:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <floor+0xfc>)
 8004ecc:	fa42 f806 	asr.w	r8, r2, r6
 8004ed0:	ea01 0208 	and.w	r2, r1, r8
 8004ed4:	4302      	orrs	r2, r0
 8004ed6:	d01e      	beq.n	8004f16 <floor+0x96>
 8004ed8:	a325      	add	r3, pc, #148	; (adr r3, 8004f70 <floor+0xf0>)
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f7fb f93d 	bl	800015c <__adddf3>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f7fb fd7f 	bl	80009e8 <__aeabi_dcmpgt>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d0ea      	beq.n	8004ec4 <floor+0x44>
 8004eee:	2c00      	cmp	r4, #0
 8004ef0:	bfbe      	ittt	lt
 8004ef2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004ef6:	fa43 f606 	asrlt.w	r6, r3, r6
 8004efa:	19a4      	addlt	r4, r4, r6
 8004efc:	2500      	movs	r5, #0
 8004efe:	ea24 0408 	bic.w	r4, r4, r8
 8004f02:	e7df      	b.n	8004ec4 <floor+0x44>
 8004f04:	2e33      	cmp	r6, #51	; 0x33
 8004f06:	dd0a      	ble.n	8004f1e <floor+0x9e>
 8004f08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f0c:	d103      	bne.n	8004f16 <floor+0x96>
 8004f0e:	f7fb f925 	bl	800015c <__adddf3>
 8004f12:	4607      	mov	r7, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4638      	mov	r0, r7
 8004f18:	4619      	mov	r1, r3
 8004f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004f26:	fa22 f808 	lsr.w	r8, r2, r8
 8004f2a:	ea18 0f00 	tst.w	r8, r0
 8004f2e:	d0f2      	beq.n	8004f16 <floor+0x96>
 8004f30:	a30f      	add	r3, pc, #60	; (adr r3, 8004f70 <floor+0xf0>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb f911 	bl	800015c <__adddf3>
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f7fb fd53 	bl	80009e8 <__aeabi_dcmpgt>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d0be      	beq.n	8004ec4 <floor+0x44>
 8004f46:	2c00      	cmp	r4, #0
 8004f48:	da02      	bge.n	8004f50 <floor+0xd0>
 8004f4a:	2e14      	cmp	r6, #20
 8004f4c:	d103      	bne.n	8004f56 <floor+0xd6>
 8004f4e:	3401      	adds	r4, #1
 8004f50:	ea25 0508 	bic.w	r5, r5, r8
 8004f54:	e7b6      	b.n	8004ec4 <floor+0x44>
 8004f56:	2301      	movs	r3, #1
 8004f58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004f5c:	fa03 f606 	lsl.w	r6, r3, r6
 8004f60:	4435      	add	r5, r6
 8004f62:	42bd      	cmp	r5, r7
 8004f64:	bf38      	it	cc
 8004f66:	18e4      	addcc	r4, r4, r3
 8004f68:	e7f2      	b.n	8004f50 <floor+0xd0>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	462c      	mov	r4, r5
 8004f6e:	e7a9      	b.n	8004ec4 <floor+0x44>
 8004f70:	8800759c 	.word	0x8800759c
 8004f74:	7e37e43c 	.word	0x7e37e43c
 8004f78:	bff00000 	.word	0xbff00000
 8004f7c:	000fffff 	.word	0x000fffff

08004f80 <scalbn>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004f86:	4604      	mov	r4, r0
 8004f88:	460d      	mov	r5, r1
 8004f8a:	4617      	mov	r7, r2
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	b996      	cbnz	r6, 8004fb6 <scalbn+0x36>
 8004f90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f94:	4303      	orrs	r3, r0
 8004f96:	d039      	beq.n	800500c <scalbn+0x8c>
 8004f98:	4b35      	ldr	r3, [pc, #212]	; (8005070 <scalbn+0xf0>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f7fb fa94 	bl	80004c8 <__aeabi_dmul>
 8004fa0:	4b34      	ldr	r3, [pc, #208]	; (8005074 <scalbn+0xf4>)
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	429f      	cmp	r7, r3
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	da0f      	bge.n	8004fca <scalbn+0x4a>
 8004faa:	a32d      	add	r3, pc, #180	; (adr r3, 8005060 <scalbn+0xe0>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb fa8a 	bl	80004c8 <__aeabi_dmul>
 8004fb4:	e006      	b.n	8004fc4 <scalbn+0x44>
 8004fb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004fba:	4296      	cmp	r6, r2
 8004fbc:	d10a      	bne.n	8004fd4 <scalbn+0x54>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	f7fb f8cc 	bl	800015c <__adddf3>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	e020      	b.n	800500c <scalbn+0x8c>
 8004fca:	460b      	mov	r3, r1
 8004fcc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004fd0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004fd4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004fd8:	19b9      	adds	r1, r7, r6
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	dd0e      	ble.n	8004ffc <scalbn+0x7c>
 8004fde:	a322      	add	r3, pc, #136	; (adr r3, 8005068 <scalbn+0xe8>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004fe8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004fec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004ff0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004ff4:	4820      	ldr	r0, [pc, #128]	; (8005078 <scalbn+0xf8>)
 8004ff6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004ffa:	e7d9      	b.n	8004fb0 <scalbn+0x30>
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	dd08      	ble.n	8005012 <scalbn+0x92>
 8005000:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005008:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800500c:	4620      	mov	r0, r4
 800500e:	4629      	mov	r1, r5
 8005010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005012:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005016:	da16      	bge.n	8005046 <scalbn+0xc6>
 8005018:	f24c 3350 	movw	r3, #50000	; 0xc350
 800501c:	429f      	cmp	r7, r3
 800501e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005022:	dd08      	ble.n	8005036 <scalbn+0xb6>
 8005024:	4c15      	ldr	r4, [pc, #84]	; (800507c <scalbn+0xfc>)
 8005026:	4814      	ldr	r0, [pc, #80]	; (8005078 <scalbn+0xf8>)
 8005028:	f363 74df 	bfi	r4, r3, #31, #1
 800502c:	a30e      	add	r3, pc, #56	; (adr r3, 8005068 <scalbn+0xe8>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	4621      	mov	r1, r4
 8005034:	e7bc      	b.n	8004fb0 <scalbn+0x30>
 8005036:	4c12      	ldr	r4, [pc, #72]	; (8005080 <scalbn+0x100>)
 8005038:	4812      	ldr	r0, [pc, #72]	; (8005084 <scalbn+0x104>)
 800503a:	f363 74df 	bfi	r4, r3, #31, #1
 800503e:	a308      	add	r3, pc, #32	; (adr r3, 8005060 <scalbn+0xe0>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	e7f5      	b.n	8005032 <scalbn+0xb2>
 8005046:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800504a:	3136      	adds	r1, #54	; 0x36
 800504c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005050:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	2200      	movs	r2, #0
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <scalbn+0x108>)
 800505c:	e7a8      	b.n	8004fb0 <scalbn+0x30>
 800505e:	bf00      	nop
 8005060:	c2f8f359 	.word	0xc2f8f359
 8005064:	01a56e1f 	.word	0x01a56e1f
 8005068:	8800759c 	.word	0x8800759c
 800506c:	7e37e43c 	.word	0x7e37e43c
 8005070:	43500000 	.word	0x43500000
 8005074:	ffff3cb0 	.word	0xffff3cb0
 8005078:	8800759c 	.word	0x8800759c
 800507c:	7e37e43c 	.word	0x7e37e43c
 8005080:	01a56e1f 	.word	0x01a56e1f
 8005084:	c2f8f359 	.word	0xc2f8f359
 8005088:	3c900000 	.word	0x3c900000

0800508c <_init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr

08005098 <_fini>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr
