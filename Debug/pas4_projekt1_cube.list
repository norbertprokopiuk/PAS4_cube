
pas4_projekt1_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007e58  08007e58  00017e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008280  08008280  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008280  08008280  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08008288  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200000e8  0800836c  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800836c  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f78  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  00032085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019530  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134de  00000000  00000000  0004eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00093b50  00000000  00000000  0006201e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000f5b6e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001098  00000000  00000000  000f5bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005060  00000000  00000000  000f6c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e8 	.word	0x200000e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e3c 	.word	0x08007e3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ec 	.word	0x200000ec
 800014c:	08007e3c 	.word	0x08007e3c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_frsub>:
 8000c80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	e002      	b.n	8000c8c <__addsf3>
 8000c86:	bf00      	nop

08000c88 <__aeabi_fsub>:
 8000c88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c8c <__addsf3>:
 8000c8c:	0042      	lsls	r2, r0, #1
 8000c8e:	bf1f      	itttt	ne
 8000c90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c94:	ea92 0f03 	teqne	r2, r3
 8000c98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca0:	d06a      	beq.n	8000d78 <__addsf3+0xec>
 8000ca2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ca6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000caa:	bfc1      	itttt	gt
 8000cac:	18d2      	addgt	r2, r2, r3
 8000cae:	4041      	eorgt	r1, r0
 8000cb0:	4048      	eorgt	r0, r1
 8000cb2:	4041      	eorgt	r1, r0
 8000cb4:	bfb8      	it	lt
 8000cb6:	425b      	neglt	r3, r3
 8000cb8:	2b19      	cmp	r3, #25
 8000cba:	bf88      	it	hi
 8000cbc:	4770      	bxhi	lr
 8000cbe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cca:	bf18      	it	ne
 8000ccc:	4240      	negne	r0, r0
 8000cce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cd2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4249      	negne	r1, r1
 8000cde:	ea92 0f03 	teq	r2, r3
 8000ce2:	d03f      	beq.n	8000d64 <__addsf3+0xd8>
 8000ce4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cec:	eb10 000c 	adds.w	r0, r0, ip
 8000cf0:	f1c3 0320 	rsb	r3, r3, #32
 8000cf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__addsf3+0x78>
 8000cfe:	4249      	negs	r1, r1
 8000d00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d08:	d313      	bcc.n	8000d32 <__addsf3+0xa6>
 8000d0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d0e:	d306      	bcc.n	8000d1e <__addsf3+0x92>
 8000d10:	0840      	lsrs	r0, r0, #1
 8000d12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d16:	f102 0201 	add.w	r2, r2, #1
 8000d1a:	2afe      	cmp	r2, #254	; 0xfe
 8000d1c:	d251      	bcs.n	8000dc2 <__addsf3+0x136>
 8000d1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	ea40 0003 	orr.w	r0, r0, r3
 8000d30:	4770      	bx	lr
 8000d32:	0049      	lsls	r1, r1, #1
 8000d34:	eb40 0000 	adc.w	r0, r0, r0
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	bf28      	it	cs
 8000d3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d40:	d2ed      	bcs.n	8000d1e <__addsf3+0x92>
 8000d42:	fab0 fc80 	clz	ip, r0
 8000d46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d52:	bfaa      	itet	ge
 8000d54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d58:	4252      	neglt	r2, r2
 8000d5a:	4318      	orrge	r0, r3
 8000d5c:	bfbc      	itt	lt
 8000d5e:	40d0      	lsrlt	r0, r2
 8000d60:	4318      	orrlt	r0, r3
 8000d62:	4770      	bx	lr
 8000d64:	f092 0f00 	teq	r2, #0
 8000d68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d6c:	bf06      	itte	eq
 8000d6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d72:	3201      	addeq	r2, #1
 8000d74:	3b01      	subne	r3, #1
 8000d76:	e7b5      	b.n	8000ce4 <__addsf3+0x58>
 8000d78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d80:	bf18      	it	ne
 8000d82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d86:	d021      	beq.n	8000dcc <__addsf3+0x140>
 8000d88:	ea92 0f03 	teq	r2, r3
 8000d8c:	d004      	beq.n	8000d98 <__addsf3+0x10c>
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	bf08      	it	eq
 8000d94:	4608      	moveq	r0, r1
 8000d96:	4770      	bx	lr
 8000d98:	ea90 0f01 	teq	r0, r1
 8000d9c:	bf1c      	itt	ne
 8000d9e:	2000      	movne	r0, #0
 8000da0:	4770      	bxne	lr
 8000da2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000da6:	d104      	bne.n	8000db2 <__addsf3+0x126>
 8000da8:	0040      	lsls	r0, r0, #1
 8000daa:	bf28      	it	cs
 8000dac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000db6:	bf3c      	itt	cc
 8000db8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dbc:	4770      	bxcc	lr
 8000dbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dca:	4770      	bx	lr
 8000dcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd0:	bf16      	itet	ne
 8000dd2:	4608      	movne	r0, r1
 8000dd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd8:	4601      	movne	r1, r0
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	bf06      	itte	eq
 8000dde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000de2:	ea90 0f01 	teqeq	r0, r1
 8000de6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_ui2f>:
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e004      	b.n	8000dfc <__aeabi_i2f+0x8>
 8000df2:	bf00      	nop

08000df4 <__aeabi_i2f>:
 8000df4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df8:	bf48      	it	mi
 8000dfa:	4240      	negmi	r0, r0
 8000dfc:	ea5f 0c00 	movs.w	ip, r0
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e08:	4601      	mov	r1, r0
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	e01c      	b.n	8000e4a <__aeabi_l2f+0x2a>

08000e10 <__aeabi_ul2f>:
 8000e10:	ea50 0201 	orrs.w	r2, r0, r1
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e00a      	b.n	8000e34 <__aeabi_l2f+0x14>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_l2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e2c:	d502      	bpl.n	8000e34 <__aeabi_l2f+0x14>
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	ea5f 0c01 	movs.w	ip, r1
 8000e38:	bf02      	ittt	eq
 8000e3a:	4684      	moveq	ip, r0
 8000e3c:	4601      	moveq	r1, r0
 8000e3e:	2000      	moveq	r0, #0
 8000e40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e44:	bf08      	it	eq
 8000e46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e4e:	fabc f28c 	clz	r2, ip
 8000e52:	3a08      	subs	r2, #8
 8000e54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e58:	db10      	blt.n	8000e7c <__aeabi_l2f+0x5c>
 8000e5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5e:	4463      	add	r3, ip
 8000e60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e64:	f1c2 0220 	rsb	r2, r2, #32
 8000e68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e70:	eb43 0002 	adc.w	r0, r3, r2
 8000e74:	bf08      	it	eq
 8000e76:	f020 0001 	biceq.w	r0, r0, #1
 8000e7a:	4770      	bx	lr
 8000e7c:	f102 0220 	add.w	r2, r2, #32
 8000e80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e84:	f1c2 0220 	rsb	r2, r2, #32
 8000e88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e90:	eb43 0002 	adc.w	r0, r3, r2
 8000e94:	bf08      	it	eq
 8000e96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e9a:	4770      	bx	lr

08000e9c <__gesf2>:
 8000e9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ea0:	e006      	b.n	8000eb0 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__lesf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	e002      	b.n	8000eb0 <__cmpsf2+0x4>
 8000eaa:	bf00      	nop

08000eac <__cmpsf2>:
 8000eac:	f04f 0c01 	mov.w	ip, #1
 8000eb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	bf18      	it	ne
 8000ec2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec6:	d011      	beq.n	8000eec <__cmpsf2+0x40>
 8000ec8:	b001      	add	sp, #4
 8000eca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ece:	bf18      	it	ne
 8000ed0:	ea90 0f01 	teqne	r0, r1
 8000ed4:	bf58      	it	pl
 8000ed6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eda:	bf88      	it	hi
 8000edc:	17c8      	asrhi	r0, r1, #31
 8000ede:	bf38      	it	cc
 8000ee0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee4:	bf18      	it	ne
 8000ee6:	f040 0001 	orrne.w	r0, r0, #1
 8000eea:	4770      	bx	lr
 8000eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef0:	d102      	bne.n	8000ef8 <__cmpsf2+0x4c>
 8000ef2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef6:	d105      	bne.n	8000f04 <__cmpsf2+0x58>
 8000ef8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000efc:	d1e4      	bne.n	8000ec8 <__cmpsf2+0x1c>
 8000efe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f02:	d0e1      	beq.n	8000ec8 <__cmpsf2+0x1c>
 8000f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__aeabi_cfrcmple>:
 8000f0c:	4684      	mov	ip, r0
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4661      	mov	r1, ip
 8000f12:	e7ff      	b.n	8000f14 <__aeabi_cfcmpeq>

08000f14 <__aeabi_cfcmpeq>:
 8000f14:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f16:	f7ff ffc9 	bl	8000eac <__cmpsf2>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	bf48      	it	mi
 8000f1e:	f110 0f00 	cmnmi.w	r0, #0
 8000f22:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f24 <__aeabi_fcmpeq>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff fff4 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2001      	moveq	r0, #1
 8000f30:	2000      	movne	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmplt>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffea 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f40:	bf34      	ite	cc
 8000f42:	2001      	movcc	r0, #1
 8000f44:	2000      	movcs	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmple>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffe0 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpge>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffd2 	bl	8000f0c <__aeabi_cfrcmple>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpgt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffc8 	bl	8000f0c <__aeabi_cfrcmple>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <lcd_cmd>:
static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

SPI_HandleTypeDef hspi2;

void lcd_cmd(uint8_t cmd)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2106      	movs	r1, #6
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <lcd_cmd+0x34>)
 8000f98:	f002 fd27 	bl	80039ea <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000f9c:	1df9      	adds	r1, r7, #7
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <lcd_cmd+0x38>)
 8000fa6:	f004 faaf 	bl	8005508 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2106      	movs	r1, #6
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <lcd_cmd+0x34>)
 8000fb0:	f002 fd1b 	bl	80039ea <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	20000324 	.word	0x20000324

08000fc4 <lcd_setup>:

void lcd_setup(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2108      	movs	r1, #8
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <lcd_setup+0x3c>)
 8000fce:	f002 fd0c 	bl	80039ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <lcd_setup+0x3c>)
 8000fd8:	f002 fd07 	bl	80039ea <HAL_GPIO_WritePin>

	lcd_cmd(PCD8544_FUNCTION_SET | 1);//wlaczone funkcje rozszerzone
 8000fdc:	2021      	movs	r0, #33	; 0x21
 8000fde:	f7ff ffd3 	bl	8000f88 <lcd_cmd>
	lcd_cmd(PCD8544_H_BIAS | 3);
 8000fe2:	2013      	movs	r0, #19
 8000fe4:	f7ff ffd0 	bl	8000f88 <lcd_cmd>
	lcd_cmd(PCD8544_H_VOP | 0x3f);
 8000fe8:	20bf      	movs	r0, #191	; 0xbf
 8000fea:	f7ff ffcd 	bl	8000f88 <lcd_cmd>
	lcd_cmd(PCD8544_FUNCTION_SET);
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f7ff ffca 	bl	8000f88 <lcd_cmd>
	lcd_cmd(PCD8544_DISP_NORMAL);
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f7ff ffc7 	bl	8000f88 <lcd_cmd>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40011000 	.word	0x40011000

08001004 <lcd_clear>:

void lcd_clear(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
 8001008:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800100c:	2100      	movs	r1, #0
 800100e:	4802      	ldr	r0, [pc, #8]	; (8001018 <lcd_clear+0x14>)
 8001010:	f005 fdf0 	bl	8006bf4 <memset>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000104 	.word	0x20000104

0800101c <lcd_draw_text>:

void lcd_draw_text(int row, int col, const char* text)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t* pbuf = &lcd_buffer[row * 84 + col];
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2254      	movs	r2, #84	; 0x54
 800102c:	fb02 f203 	mul.w	r2, r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4413      	add	r3, r2
 8001034:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <lcd_draw_text+0x84>)
 8001036:	4413      	add	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 800103a:	e023      	b.n	8001084 <lcd_draw_text+0x68>
		int ch = *text++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f1a3 0220 	sub.w	r2, r3, #32
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <lcd_draw_text+0x88>)
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	e00a      	b.n	8001074 <lcd_draw_text+0x58>
			*pbuf++ = *font++;
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	1c53      	adds	r3, r2, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	1c59      	adds	r1, r3, #1
 8001068:	61b9      	str	r1, [r7, #24]
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++) {
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3301      	adds	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	2b04      	cmp	r3, #4
 8001078:	ddf1      	ble.n	800105e <lcd_draw_text+0x42>
		}
		*pbuf++ = 0;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	61ba      	str	r2, [r7, #24]
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <lcd_draw_text+0x78>
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <lcd_draw_text+0x8c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d3d3      	bcc.n	800103c <lcd_draw_text+0x20>
	}
}
 8001094:	bf00      	nop
 8001096:	3724      	adds	r7, #36	; 0x24
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000104 	.word	0x20000104
 80010a4:	08007eac 	.word	0x08007eac
 80010a8:	200002f6 	.word	0x200002f6

080010ac <lcd_copy>:

void lcd_copy(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2102      	movs	r1, #2
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <lcd_copy+0x38>)
 80010b6:	f002 fc98 	bl	80039ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2104      	movs	r1, #4
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <lcd_copy+0x38>)
 80010c0:	f002 fc93 	bl	80039ea <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80010cc:	4906      	ldr	r1, [pc, #24]	; (80010e8 <lcd_copy+0x3c>)
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <lcd_copy+0x40>)
 80010d0:	f004 fa1a 	bl	8005508 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <lcd_copy+0x38>)
 80010da:	f002 fc86 	bl	80039ea <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40011000 	.word	0x40011000
 80010e8:	20000104 	.word	0x20000104
 80010ec:	20000324 	.word	0x20000324

080010f0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
uint8_t I2C_odczyt_rejestru(uint8_t rejestr);
int16_t I2C_odczyt_wartosci(uint8_t rejestr);
void I2C_zapis_rejestr(uint8_t rejestr, uint8_t value);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //przerwanie timer 3
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) { // Jeżeli przerwanie pochodzi od timera nr. 3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a82      	ldr	r2, [pc, #520]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	f040 80f1 	bne.w	80012e6 <HAL_TIM_PeriodElapsedCallback+0x1f6>
		time++; //zliczam czas z dokładnośćia do 0.1 s
 8001104:	4b81      	ldr	r3, [pc, #516]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a80      	ldr	r2, [pc, #512]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800110c:	6013      	str	r3, [r2, #0]
		angular_velocity = delta_rot / 0.1;
 800110e:	4b80      	ldr	r3, [pc, #512]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	a376      	add	r3, pc, #472	; (adr r3, 80012f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fbb3 	bl	8000884 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	497c      	ldr	r1, [pc, #496]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = delta_D / 0.1;
 8001128:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800112a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800112e:	a370      	add	r3, pc, #448	; (adr r3, 80012f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fba6 	bl	8000884 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4977      	ldr	r1, [pc, #476]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800113e:	e9c1 2300 	strd	r2, r3, [r1]
		delta_v = velocity - last_v;
 8001142:	4b76      	ldr	r3, [pc, #472]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff f8b7 	bl	80002c0 <__aeabi_dsub>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4973      	ldr	r1, [pc, #460]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
		acceleration = delta_v / 0.1;
 800115c:	4b71      	ldr	r3, [pc, #452]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800115e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001162:	a363      	add	r3, pc, #396	; (adr r3, 80012f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fb8c 	bl	8000884 <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	496d      	ldr	r1, [pc, #436]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001172:	e9c1 2300 	strd	r2, r3, [r1]
		delta_rot = 0;
 8001176:	4966      	ldr	r1, [pc, #408]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9c1 2300 	strd	r2, r3, [r1]
		delta_D = 0;
 8001184:	4964      	ldr	r1, [pc, #400]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	e9c1 2300 	strd	r2, r3, [r1]
		last_v = velocity;
 8001192:	4b62      	ldr	r3, [pc, #392]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	4961      	ldr	r1, [pc, #388]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800119a:	e9c1 2300 	strd	r2, r3, [r1]
		//odczyt danych z acc
		a_x = I2C_odczyt_wartosci(ACC_X);
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f000 f8f4 	bl	800138c <I2C_odczyt_wartosci>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b60      	ldr	r3, [pc, #384]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011aa:	801a      	strh	r2, [r3, #0]
		a_y = I2C_odczyt_wartosci(ACC_Y);
 80011ac:	202a      	movs	r0, #42	; 0x2a
 80011ae:	f000 f8ed 	bl	800138c <I2C_odczyt_wartosci>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011b8:	801a      	strh	r2, [r3, #0]
		a_x_c = a_x * 2.0 / 32678.0;
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9cb 	bl	800055c <__aeabi_i2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	f7ff f87b 	bl	80002c4 <__adddf3>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	a348      	add	r3, pc, #288	; (adr r3, 80012f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fb52 	bl	8000884 <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcfa 	bl	8000be0 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a51      	ldr	r2, [pc, #324]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011f0:	6013      	str	r3, [r2, #0]
		a_y_c = a_y * 2.0 / 32678.0;
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9af 	bl	800055c <__aeabi_i2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	f7ff f85f 	bl	80002c4 <__adddf3>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a33a      	add	r3, pc, #232	; (adr r3, 80012f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fb36 	bl	8000884 <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fcde 	bl	8000be0 <__aeabi_d2f>
 8001224:	4603      	mov	r3, r0
 8001226:	4a44      	ldr	r2, [pc, #272]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001228:	6013      	str	r3, [r2, #0]
		//z budowy akcelerometru wynika ze os y akcelerometru pokrywa się z osią x odometrii podobnie jest z osią x,y. Oś Z jest nieistotna
		delta_a_x_c = a_x_c - last_a_x_c;
 800122a:	4b42      	ldr	r3, [pc, #264]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a43      	ldr	r2, [pc, #268]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd27 	bl	8000c88 <__aeabi_fsub>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001240:	601a      	str	r2, [r3, #0]
		delta_a_y_c = a_y_c - last_a_y_c;
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd1b 	bl	8000c88 <__aeabi_fsub>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001258:	601a      	str	r2, [r3, #0]
		acc_acceleration = (int) (sqrt(
				delta_a_x_c * delta_a_x_c + delta_a_y_c * delta_a_y_c) * 9810);
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a38      	ldr	r2, [pc, #224]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff73 	bl	8000150 <__aeabi_fmul>
 800126a:	4603      	mov	r3, r0
 800126c:	461c      	mov	r4, r3
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a35      	ldr	r2, [pc, #212]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ff69 	bl	8000150 <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	4619      	mov	r1, r3
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fd02 	bl	8000c8c <__addsf3>
 8001288:	4603      	mov	r3, r0
		acc_acceleration = (int) (sqrt(
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f978 	bl	8000580 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f005 fd3c 	bl	8006d14 <sqrt>
				delta_a_x_c * delta_a_x_c + delta_a_y_c * delta_a_y_c) * 9810);
 800129c:	a318      	add	r3, pc, #96	; (adr r3, 8001300 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9c5 	bl	8000630 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
		acc_acceleration = (int) (sqrt(
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc6f 	bl	8000b90 <__aeabi_d2iz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012b6:	6013      	str	r3, [r2, #0]
		if (delta_a_y_c < 0)
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe39 	bl	8000f38 <__aeabi_fcmplt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x1e6>
			acc_acceleration = acc_acceleration * -1;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	425b      	negs	r3, r3
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012d4:	6013      	str	r3, [r2, #0]
		last_a_x_c = a_x_c;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012dc:	6013      	str	r3, [r2, #0]
		last_a_y_c = a_y_c;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012e4:	6013      	str	r3, [r2, #0]
	}

}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fb99999 	.word	0x3fb99999
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40dfe980 	.word	0x40dfe980
 8001300:	00000000 	.word	0x00000000
 8001304:	40c32900 	.word	0x40c32900
 8001308:	40000400 	.word	0x40000400
 800130c:	200002fc 	.word	0x200002fc
 8001310:	200005d8 	.word	0x200005d8
 8001314:	20000318 	.word	0x20000318
 8001318:	200005e0 	.word	0x200005e0
 800131c:	20000310 	.word	0x20000310
 8001320:	20000520 	.word	0x20000520
 8001324:	20000528 	.word	0x20000528
 8001328:	200005d0 	.word	0x200005d0
 800132c:	20000402 	.word	0x20000402
 8001330:	20000398 	.word	0x20000398
 8001334:	200005c4 	.word	0x200005c4
 8001338:	20000404 	.word	0x20000404
 800133c:	2000039c 	.word	0x2000039c
 8001340:	200004b0 	.word	0x200004b0
 8001344:	200004ac 	.word	0x200004ac
 8001348:	200004b8 	.word	0x200004b8
 800134c:	200005c0 	.word	0x200005c0

08001350 <I2C_odczyt_rejestru>:
uint8_t I2C_odczyt_rejestru(uint8_t rejestr) //dla wygody aby podawać tylko rejestr który chce odczytac
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDRESS, rejestr, 1, &value, sizeof(value),
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	b29a      	uxth	r2, r3
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	213a      	movs	r1, #58	; 0x3a
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <I2C_odczyt_rejestru+0x38>)
 8001378:	f002 fdb0 	bl	8003edc <HAL_I2C_Mem_Read>
	HAL_MAX_DELAY);
	return value;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200003a0 	.word	0x200003a0

0800138c <I2C_odczyt_wartosci>:
int16_t I2C_odczyt_wartosci(uint8_t rejestr) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af04      	add	r7, sp, #16
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	int16_t value = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDRESS, rejestr | 0x80, 1, (uint8_t*) &value,
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	f107 030e 	add.w	r3, r7, #14
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	213a      	movs	r1, #58	; 0x3a
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <I2C_odczyt_wartosci+0x40>)
 80013ba:	f002 fd8f 	bl	8003edc <HAL_I2C_Mem_Read>
			sizeof(value), HAL_MAX_DELAY);

	return value;
 80013be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200003a0 	.word	0x200003a0

080013d0 <I2C_zapis_rejestr>:

void I2C_zapis_rejestr(uint8_t rejestr, uint8_t value) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	4603      	mov	r3, r0
 80013d8:	460a      	mov	r2, r1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	4613      	mov	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, ACC_ADDRESS, rejestr, 1, &value, sizeof(value),
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	1dbb      	adds	r3, r7, #6
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	213a      	movs	r1, #58	; 0x3a
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <I2C_zapis_rejestr+0x34>)
 80013f8:	f002 fc76 	bl	8003ce8 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200003a0 	.word	0x200003a0

08001408 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800140c:	f001 fccc 	bl	8002da8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001410:	f000 ffb0 	bl	8002374 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001414:	f001 f9ee 	bl	80027f4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001418:	f001 f9c2 	bl	80027a0 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800141c:	f001 f89c 	bl	8002558 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001420:	f001 f8f2 	bl	8002608 <MX_TIM2_Init>
	MX_SPI2_Init();
 8001424:	f001 f862 	bl	80024ec <MX_SPI2_Init>
	MX_TIM3_Init();
 8001428:	f001 f942 	bl	80026b0 <MX_TIM3_Init>
	MX_ADC1_Init();
 800142c:	f000 fff2 	bl	8002414 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001430:	f001 f82e 	bl	8002490 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4847      	ldr	r0, [pc, #284]	; (8001554 <main+0x14c>)
 8001438:	f004 fc86 	bl	8005d48 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4846      	ldr	r0, [pc, #280]	; (8001558 <main+0x150>)
 8001440:	f004 fc82 	bl	8005d48 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	210c      	movs	r1, #12
 8001448:	4844      	ldr	r0, [pc, #272]	; (800155c <main+0x154>)
 800144a:	f002 face 	bl	80039ea <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi2);
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <main+0x158>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <main+0x158>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800145c:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800145e:	2104      	movs	r1, #4
 8001460:	4840      	ldr	r0, [pc, #256]	; (8001564 <main+0x15c>)
 8001462:	f004 fb2d 	bl	8005ac0 <HAL_TIM_PWM_Start>

	HAL_ADC_Start(&hadc1);
 8001466:	4840      	ldr	r0, [pc, #256]	; (8001568 <main+0x160>)
 8001468:	f001 fdd8 	bl	800301c <HAL_ADC_Start>

	if (I2C_odczyt_rejestru(0xf) == 0x49) //sprawdzanie czy nucleo wykryło akcelerometr
 800146c:	200f      	movs	r0, #15
 800146e:	f7ff ff6f 	bl	8001350 <I2C_odczyt_rejestru>
 8001472:	4603      	mov	r3, r0
 8001474:	2b49      	cmp	r3, #73	; 0x49
 8001476:	d103      	bne.n	8001480 <main+0x78>
		is_acc_ready = 1;
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <main+0x164>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e002      	b.n	8001486 <main+0x7e>
	else
		is_acc_ready = -1;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <main+0x164>)
 8001482:	22ff      	movs	r2, #255	; 0xff
 8001484:	701a      	strb	r2, [r3, #0]
	if (is_acc_ready == 1)
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <main+0x164>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d103      	bne.n	8001496 <main+0x8e>
		I2C_zapis_rejestr(ACC_CTRL1, 0x40 | 0x07); // predkosc 25Hz i aktywacja odczytów z osi x, y i z
 800148e:	2147      	movs	r1, #71	; 0x47
 8001490:	2020      	movs	r0, #32
 8001492:	f7ff ff9d 	bl	80013d0 <I2C_zapis_rejestr>
	//domyslny punkt odniesienia akcelerometru to 2g oznacza to zakres pomiarowy (-2^15, 2^15)->(-2g,2g)

	lcd_setup();
 8001496:	f7ff fd95 	bl	8000fc4 <lcd_setup>
	lcd_draw_text(0, 0, "PAS 4");
 800149a:	4a35      	ldr	r2, [pc, #212]	; (8001570 <main+0x168>)
 800149c:	2100      	movs	r1, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fdbc 	bl	800101c <lcd_draw_text>
	lcd_draw_text(1, 0, "Projekt nr 1");
 80014a4:	4a33      	ldr	r2, [pc, #204]	; (8001574 <main+0x16c>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fdb7 	bl	800101c <lcd_draw_text>
	lcd_draw_text(2, 0, "Obs. enkoderow");
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <main+0x170>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	2002      	movs	r0, #2
 80014b4:	f7ff fdb2 	bl	800101c <lcd_draw_text>
	lcd_draw_text(3, 0, "Norbert");
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <main+0x174>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	2003      	movs	r0, #3
 80014be:	f7ff fdad 	bl	800101c <lcd_draw_text>
	lcd_draw_text(4, 0, "Prokopiuk");
 80014c2:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <main+0x178>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	2004      	movs	r0, #4
 80014c8:	f7ff fda8 	bl	800101c <lcd_draw_text>
	lcd_draw_text(5, 0, "299024");
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <main+0x17c>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	2005      	movs	r0, #5
 80014d2:	f7ff fda3 	bl	800101c <lcd_draw_text>
	lcd_copy();
 80014d6:	f7ff fde9 	bl	80010ac <lcd_copy>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <main+0x154>)
 80014e0:	f002 fa6c 	bl	80039bc <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d114      	bne.n	8001514 <main+0x10c>
			i++;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <main+0x180>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <main+0x180>)
 80014f4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 80014f6:	481b      	ldr	r0, [pc, #108]	; (8001564 <main+0x15c>)
 80014f8:	f004 fa38 	bl	800596c <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2120      	movs	r1, #32
 8001500:	4822      	ldr	r0, [pc, #136]	; (800158c <main+0x184>)
 8001502:	f002 fa72 	bl	80039ea <HAL_GPIO_WritePin>
			if (i > 1)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <main+0x180>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d902      	bls.n	8001514 <main+0x10c>
				i = 0;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <main+0x180>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
		}
		if (i >= 1) {
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <main+0x180>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0de      	beq.n	80014da <main+0xd2>
			pulse_count_1 = TIM1->CNT;
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <main+0x188>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <main+0x18c>)
 8001524:	801a      	strh	r2, [r3, #0]
			pulse_count_2 = TIM2->CNT;
 8001526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <main+0x190>)
 8001530:	801a      	strh	r2, [r3, #0]
			napiecie1 = HAL_ADC_GetValue(&hadc1);
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <main+0x160>)
 8001534:	f001 fe20 	bl	8003178 <HAL_ADC_GetValue>
 8001538:	4603      	mov	r3, r0
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <main+0x194>)
 800153c:	6013      	str	r3, [r2, #0]
			if (napiecie1 <= 310)
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <main+0x194>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8001546:	d82d      	bhi.n	80015a4 <main+0x19c>
				TIM3->CCR2 = 999;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <main+0x198>)
 800154a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800154e:	639a      	str	r2, [r3, #56]	; 0x38
 8001550:	e02b      	b.n	80015aa <main+0x1a2>
 8001552:	bf00      	nop
 8001554:	200004d0 	.word	0x200004d0
 8001558:	20000530 	.word	0x20000530
 800155c:	40011000 	.word	0x40011000
 8001560:	20000324 	.word	0x20000324
 8001564:	20000410 	.word	0x20000410
 8001568:	20000460 	.word	0x20000460
 800156c:	20000306 	.word	0x20000306
 8001570:	08007e58 	.word	0x08007e58
 8001574:	08007e60 	.word	0x08007e60
 8001578:	08007e70 	.word	0x08007e70
 800157c:	08007e80 	.word	0x08007e80
 8001580:	08007e88 	.word	0x08007e88
 8001584:	08007e94 	.word	0x08007e94
 8001588:	20000490 	.word	0x20000490
 800158c:	40010800 	.word	0x40010800
 8001590:	40012c00 	.word	0x40012c00
 8001594:	20000518 	.word	0x20000518
 8001598:	200005c8 	.word	0x200005c8
 800159c:	2000045c 	.word	0x2000045c
 80015a0:	40000400 	.word	0x40000400
			else
				TIM3->CCR2 = 0;
 80015a4:	4bb4      	ldr	r3, [pc, #720]	; (8001878 <main+0x470>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38

			if ((pulse_count_1 != last_state_1 || pulse_count_2 != last_state_2)) {
 80015aa:	4bb4      	ldr	r3, [pc, #720]	; (800187c <main+0x474>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	4bb3      	ldr	r3, [pc, #716]	; (8001880 <main+0x478>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d109      	bne.n	80015d0 <main+0x1c8>
 80015bc:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <main+0x47c>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	4bb0      	ldr	r3, [pc, #704]	; (8001888 <main+0x480>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	f000 8182 	beq.w	80018d4 <main+0x4cc>

				dp1 = (pulse_count_1 - last_state_1) % 100;
 80015d0:	4baa      	ldr	r3, [pc, #680]	; (800187c <main+0x474>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	4ba9      	ldr	r3, [pc, #676]	; (8001880 <main+0x478>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4aaa      	ldr	r2, [pc, #680]	; (800188c <main+0x484>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	1151      	asrs	r1, r2, #5
 80015e8:	17da      	asrs	r2, r3, #31
 80015ea:	1a8a      	subs	r2, r1, r2
 80015ec:	2164      	movs	r1, #100	; 0x64
 80015ee:	fb01 f202 	mul.w	r2, r1, r2
 80015f2:	1a9a      	subs	r2, r3, r2
 80015f4:	b212      	sxth	r2, r2
 80015f6:	4ba6      	ldr	r3, [pc, #664]	; (8001890 <main+0x488>)
 80015f8:	801a      	strh	r2, [r3, #0]
				dp2 = (pulse_count_2 - last_state_2) % 100;
 80015fa:	4ba2      	ldr	r3, [pc, #648]	; (8001884 <main+0x47c>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4ba1      	ldr	r3, [pc, #644]	; (8001888 <main+0x480>)
 8001604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4aa0      	ldr	r2, [pc, #640]	; (800188c <main+0x484>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	1151      	asrs	r1, r2, #5
 8001612:	17da      	asrs	r2, r3, #31
 8001614:	1a8a      	subs	r2, r1, r2
 8001616:	2164      	movs	r1, #100	; 0x64
 8001618:	fb01 f202 	mul.w	r2, r1, r2
 800161c:	1a9a      	subs	r2, r3, r2
 800161e:	b212      	sxth	r2, r2
 8001620:	4b9c      	ldr	r3, [pc, #624]	; (8001894 <main+0x48c>)
 8001622:	801a      	strh	r2, [r3, #0]

				Dl = Dl + (3.1415 * dp1) * d_kola / 1200;
 8001624:	4b9a      	ldr	r3, [pc, #616]	; (8001890 <main+0x488>)
 8001626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff96 	bl	800055c <__aeabi_i2d>
 8001630:	a38d      	add	r3, pc, #564	; (adr r3, 8001868 <main+0x460>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe fffb 	bl	8000630 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	4b95      	ldr	r3, [pc, #596]	; (8001898 <main+0x490>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe fff2 	bl	8000630 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b90      	ldr	r3, [pc, #576]	; (800189c <main+0x494>)
 800165a:	f7ff f913 	bl	8000884 <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	4b8e      	ldr	r3, [pc, #568]	; (80018a0 <main+0x498>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe fe2a 	bl	80002c4 <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	498a      	ldr	r1, [pc, #552]	; (80018a0 <main+0x498>)
 8001676:	e9c1 2300 	strd	r2, r3, [r1]
				Dp = Dp + (3.1415 * dp2) * d_kola / 1200;
 800167a:	4b86      	ldr	r3, [pc, #536]	; (8001894 <main+0x48c>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff6b 	bl	800055c <__aeabi_i2d>
 8001686:	a378      	add	r3, pc, #480	; (adr r3, 8001868 <main+0x460>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffd0 	bl	8000630 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	4b7f      	ldr	r3, [pc, #508]	; (8001898 <main+0x490>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ffc7 	bl	8000630 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b7b      	ldr	r3, [pc, #492]	; (800189c <main+0x494>)
 80016b0:	f7ff f8e8 	bl	8000884 <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <main+0x49c>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe fdff 	bl	80002c4 <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4976      	ldr	r1, [pc, #472]	; (80018a4 <main+0x49c>)
 80016cc:	e9c1 2300 	strd	r2, r3, [r1]

				D = (Dl + Dp) / 2;
 80016d0:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <main+0x498>)
 80016d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <main+0x49c>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fdf2 	bl	80002c4 <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f0:	f7ff f8c8 	bl	8000884 <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	496b      	ldr	r1, [pc, #428]	; (80018a8 <main+0x4a0>)
 80016fa:	e9c1 2300 	strd	r2, r3, [r1]
				rot = (Dp - Dl) / rozstaw;
 80016fe:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <main+0x49c>)
 8001700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <main+0x498>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe fdd9 	bl	80002c0 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <main+0x4a4>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7ff f8b2 	bl	8000884 <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4962      	ldr	r1, [pc, #392]	; (80018b0 <main+0x4a8>)
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
				delta_rot = rot - last_rot;
 800172a:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <main+0x4a8>)
 800172c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001730:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <main+0x4ac>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fdc3 	bl	80002c0 <__aeabi_dsub>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	495e      	ldr	r1, [pc, #376]	; (80018b8 <main+0x4b0>)
 8001740:	e9c1 2300 	strd	r2, r3, [r1]
				if (rot >= 2 * 3.1415) {
 8001744:	4b5a      	ldr	r3, [pc, #360]	; (80018b0 <main+0x4a8>)
 8001746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174a:	a349      	add	r3, pc, #292	; (adr r3, 8001870 <main+0x468>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f9f4 	bl	8000b3c <__aeabi_dcmpge>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <main+0x36c>
					rot = rot - 2 * 3.1415;
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <main+0x4a8>)
 800175c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001760:	a343      	add	r3, pc, #268	; (adr r3, 8001870 <main+0x468>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fdab 	bl	80002c0 <__aeabi_dsub>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4950      	ldr	r1, [pc, #320]	; (80018b0 <main+0x4a8>)
 8001770:	e9c1 2300 	strd	r2, r3, [r1]
				}
				rot_d = rot * 180 / 3.1415;
 8001774:	4b4e      	ldr	r3, [pc, #312]	; (80018b0 <main+0x4a8>)
 8001776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <main+0x4b4>)
 8001780:	f7fe ff56 	bl	8000630 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	a336      	add	r3, pc, #216	; (adr r3, 8001868 <main+0x460>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7ff f877 	bl	8000884 <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4949      	ldr	r1, [pc, #292]	; (80018c0 <main+0x4b8>)
 800179c:	e9c1 2300 	strd	r2, r3, [r1]
				delta_D = D - D_last;
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <main+0x4a0>)
 80017a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <main+0x4bc>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fd88 	bl	80002c0 <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4944      	ldr	r1, [pc, #272]	; (80018c8 <main+0x4c0>)
 80017b6:	e9c1 2300 	strd	r2, r3, [r1]
				x_n = x_n + (D - D_last) * cos(rot);
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <main+0x4a0>)
 80017bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <main+0x4bc>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe fd7b 	bl	80002c0 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <main+0x4a8>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f005 fa12 	bl	8006c04 <cos>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe ff22 	bl	8000630 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <main+0x4c4>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fd63 	bl	80002c4 <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4932      	ldr	r1, [pc, #200]	; (80018cc <main+0x4c4>)
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
				y_n = y_n + (D - D_last) * sin(rot);
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <main+0x4a0>)
 800180a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <main+0x4bc>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd54 	bl	80002c0 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4614      	mov	r4, r2
 800181e:	461d      	mov	r5, r3
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <main+0x4a8>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f005 fa2d 	bl	8006c88 <sin>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fefb 	bl	8000630 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <main+0x4c8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe fd3c 	bl	80002c4 <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	491f      	ldr	r1, [pc, #124]	; (80018d0 <main+0x4c8>)
 8001852:	e9c1 2300 	strd	r2, r3, [r1]
				last_rot = rot;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <main+0x4a8>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	4915      	ldr	r1, [pc, #84]	; (80018b4 <main+0x4ac>)
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
 8001862:	e037      	b.n	80018d4 <main+0x4cc>
 8001864:	f3af 8000 	nop.w
 8001868:	c083126f 	.word	0xc083126f
 800186c:	400921ca 	.word	0x400921ca
 8001870:	c083126f 	.word	0xc083126f
 8001874:	401921ca 	.word	0x401921ca
 8001878:	40000400 	.word	0x40000400
 800187c:	20000518 	.word	0x20000518
 8001880:	20000320 	.word	0x20000320
 8001884:	200005c8 	.word	0x200005c8
 8001888:	20000322 	.word	0x20000322
 800188c:	51eb851f 	.word	0x51eb851f
 8001890:	200004a8 	.word	0x200004a8
 8001894:	20000400 	.word	0x20000400
 8001898:	20000060 	.word	0x20000060
 800189c:	4092c000 	.word	0x4092c000
 80018a0:	200005b8 	.word	0x200005b8
 80018a4:	200004a0 	.word	0x200004a0
 80018a8:	20000380 	.word	0x20000380
 80018ac:	20000068 	.word	0x20000068
 80018b0:	20000390 	.word	0x20000390
 80018b4:	200004c0 	.word	0x200004c0
 80018b8:	200005d8 	.word	0x200005d8
 80018bc:	40668000 	.word	0x40668000
 80018c0:	200003f8 	.word	0x200003f8
 80018c4:	20000498 	.word	0x20000498
 80018c8:	200005e0 	.word	0x200005e0
 80018cc:	20000408 	.word	0x20000408
 80018d0:	200004c8 	.word	0x200004c8
			}

			//obliczanie czasu i innych zmiennych do aktualizacji napisów
			//pozycja
			x_e = (int) x_n;
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <main+0x630>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff f957 	bl	8000b90 <__aeabi_d2iz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <main+0x634>)
 80018e8:	801a      	strh	r2, [r3, #0]
			y_e = (int) y_n;
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <main+0x638>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f94c 	bl	8000b90 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <main+0x63c>)
 80018fe:	801a      	strh	r2, [r3, #0]

			//predkosc

			v_e = (int) velocity * 10;
 8001900:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <main+0x640>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f941 	bl	8000b90 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	b29b      	uxth	r3, r3
 800191c:	b21a      	sxth	r2, r3
 800191e:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <main+0x644>)
 8001920:	801a      	strh	r2, [r3, #0]

			//czas
			milsec = time % 10;
 8001922:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <main+0x648>)
 8001924:	6819      	ldr	r1, [r3, #0]
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <main+0x64c>)
 8001928:	fba3 2301 	umull	r2, r3, r3, r1
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	1aca      	subs	r2, r1, r3
 8001938:	b292      	uxth	r2, r2
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <main+0x650>)
 800193c:	801a      	strh	r2, [r3, #0]
			sec = (time - milsec) / 10;
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <main+0x648>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <main+0x650>)
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <main+0x64c>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	08db      	lsrs	r3, r3, #3
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <main+0x654>)
 8001954:	801a      	strh	r2, [r3, #0]

			//rotacja
			rot_e = (int) 10 * rot_d;
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <main+0x658>)
 8001958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <main+0x65c>)
 8001962:	f7fe fe65 	bl	8000630 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f90f 	bl	8000b90 <__aeabi_d2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <main+0x660>)
 8001978:	801a      	strh	r2, [r3, #0]

			if (rot_e >= 1800)
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <main+0x660>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001984:	db0a      	blt.n	800199c <main+0x594>
				rot_e = rot_e - 3600;
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <main+0x660>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21a      	sxth	r2, r3
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <main+0x660>)
 8001998:	801a      	strh	r2, [r3, #0]
 800199a:	e00f      	b.n	80019bc <main+0x5b4>
			else if (rot_e <= -1800)
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <main+0x660>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 80019a6:	dc09      	bgt.n	80019bc <main+0x5b4>
				rot_e = rot_e + 3600;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <main+0x660>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <main+0x660>)
 80019ba:	801a      	strh	r2, [r3, #0]

			if (rot_e >= 0)
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <main+0x660>)
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db03      	blt.n	80019ce <main+0x5c6>
				napis2[4] = '+';
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <main+0x664>)
 80019c8:	222b      	movs	r2, #43	; 0x2b
 80019ca:	711a      	strb	r2, [r3, #4]
 80019cc:	e002      	b.n	80019d4 <main+0x5cc>
			else
				napis2[4] = '-';
 80019ce:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <main+0x664>)
 80019d0:	222d      	movs	r2, #45	; 0x2d
 80019d2:	711a      	strb	r2, [r3, #4]

			rot_e = abs(rot_e);
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <main+0x660>)
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bfb8      	it	lt
 80019de:	425b      	neglt	r3, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <main+0x660>)
 80019e6:	801a      	strh	r2, [r3, #0]
			//predkosc katowa

			ang_e = (int) 1000 * angular_velocity;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <main+0x668>)
 80019ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <main+0x66c>)
 80019f4:	f7fe fe1c 	bl	8000630 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8c6 	bl	8000b90 <__aeabi_d2iz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <main+0x670>)
 8001a0a:	801a      	strh	r2, [r3, #0]

			//aktualizacja opisow
			//pozycja
			if (x_e >= 0)
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <main+0x634>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db03      	blt.n	8001a1e <main+0x616>
				napis1[4] = '+';
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <main+0x674>)
 8001a18:	222b      	movs	r2, #43	; 0x2b
 8001a1a:	711a      	strb	r2, [r3, #4]
 8001a1c:	e002      	b.n	8001a24 <main+0x61c>
			else
				napis1[4] = '-';
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <main+0x674>)
 8001a20:	222d      	movs	r2, #45	; 0x2d
 8001a22:	711a      	strb	r2, [r3, #4]
			if (y_e >= 0)
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <main+0x63c>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db28      	blt.n	8001a80 <main+0x678>
				napis1[9] = '+';
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <main+0x674>)
 8001a30:	222b      	movs	r2, #43	; 0x2b
 8001a32:	725a      	strb	r2, [r3, #9]
 8001a34:	e027      	b.n	8001a86 <main+0x67e>
 8001a36:	bf00      	nop
 8001a38:	20000408 	.word	0x20000408
 8001a3c:	20000458 	.word	0x20000458
 8001a40:	200004c8 	.word	0x200004c8
 8001a44:	200003f4 	.word	0x200003f4
 8001a48:	20000310 	.word	0x20000310
 8001a4c:	2000039a 	.word	0x2000039a
 8001a50:	200002fc 	.word	0x200002fc
 8001a54:	cccccccd 	.word	0xcccccccd
 8001a58:	20000308 	.word	0x20000308
 8001a5c:	20000300 	.word	0x20000300
 8001a60:	200003f8 	.word	0x200003f8
 8001a64:	40240000 	.word	0x40240000
 8001a68:	20000302 	.word	0x20000302
 8001a6c:	20000010 	.word	0x20000010
 8001a70:	20000318 	.word	0x20000318
 8001a74:	408f4000 	.word	0x408f4000
 8001a78:	20000304 	.word	0x20000304
 8001a7c:	20000000 	.word	0x20000000
			else
				napis1[9] = '-';
 8001a80:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <main+0x828>)
 8001a82:	222d      	movs	r2, #45	; 0x2d
 8001a84:	725a      	strb	r2, [r3, #9]
			x_e = abs(x_e);
 8001a86:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <main+0x82c>)
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bfb8      	it	lt
 8001a90:	425b      	neglt	r3, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <main+0x82c>)
 8001a98:	801a      	strh	r2, [r3, #0]
			y_e = abs(y_e);
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <main+0x830>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bfb8      	it	lt
 8001aa4:	425b      	neglt	r3, r3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <main+0x830>)
 8001aac:	801a      	strh	r2, [r3, #0]
			//x
			napis1[5] = '0' + (x_e - x_e % 100) / 100;
 8001aae:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <main+0x82c>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <main+0x82c>)
 8001ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abc:	4a5f      	ldr	r2, [pc, #380]	; (8001c3c <main+0x834>)
 8001abe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac2:	1151      	asrs	r1, r2, #5
 8001ac4:	17da      	asrs	r2, r3, #31
 8001ac6:	1a8a      	subs	r2, r1, r2
 8001ac8:	2164      	movs	r1, #100	; 0x64
 8001aca:	fb01 f202 	mul.w	r2, r1, r2
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	1ac3      	subs	r3, r0, r3
 8001ad4:	4a59      	ldr	r2, [pc, #356]	; (8001c3c <main+0x834>)
 8001ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8001ada:	1152      	asrs	r2, r2, #5
 8001adc:	17db      	asrs	r3, r3, #31
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3330      	adds	r3, #48	; 0x30
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <main+0x828>)
 8001ae8:	715a      	strb	r2, [r3, #5]
			napis1[6] = '0' + (x_e % 100 - x_e % 10) / 10;
 8001aea:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <main+0x82c>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <main+0x834>)
 8001af2:	fb82 1203 	smull	r1, r2, r2, r3
 8001af6:	1151      	asrs	r1, r2, #5
 8001af8:	17da      	asrs	r2, r3, #31
 8001afa:	1a8a      	subs	r2, r1, r2
 8001afc:	2164      	movs	r1, #100	; 0x64
 8001afe:	fb01 f202 	mul.w	r2, r1, r2
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <main+0x82c>)
 8001b0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <main+0x838>)
 8001b10:	fb83 1302 	smull	r1, r3, r3, r2
 8001b14:	1099      	asrs	r1, r3, #2
 8001b16:	17d3      	asrs	r3, r2, #31
 8001b18:	1ac9      	subs	r1, r1, r3
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	1ac3      	subs	r3, r0, r3
 8001b28:	4a45      	ldr	r2, [pc, #276]	; (8001c40 <main+0x838>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	1092      	asrs	r2, r2, #2
 8001b30:	17db      	asrs	r3, r3, #31
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	3330      	adds	r3, #48	; 0x30
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <main+0x828>)
 8001b3c:	719a      	strb	r2, [r3, #6]
			napis1[7] = '0' + x_e % 10;
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <main+0x82c>)
 8001b40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <main+0x838>)
 8001b46:	fb83 1302 	smull	r1, r3, r3, r2
 8001b4a:	1099      	asrs	r1, r3, #2
 8001b4c:	17d3      	asrs	r3, r2, #31
 8001b4e:	1ac9      	subs	r1, r1, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	3330      	adds	r3, #48	; 0x30
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <main+0x828>)
 8001b64:	71da      	strb	r2, [r3, #7]
			//y
			napis1[10] = '0' + (y_e - y_e % 100) / 100;
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <main+0x830>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <main+0x830>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <main+0x834>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	1151      	asrs	r1, r2, #5
 8001b7c:	17da      	asrs	r2, r3, #31
 8001b7e:	1a8a      	subs	r2, r1, r2
 8001b80:	2164      	movs	r1, #100	; 0x64
 8001b82:	fb01 f202 	mul.w	r2, r1, r2
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	1ac3      	subs	r3, r0, r3
 8001b8c:	4a2b      	ldr	r2, [pc, #172]	; (8001c3c <main+0x834>)
 8001b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b92:	1152      	asrs	r2, r2, #5
 8001b94:	17db      	asrs	r3, r3, #31
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3330      	adds	r3, #48	; 0x30
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <main+0x828>)
 8001ba0:	729a      	strb	r2, [r3, #10]
			napis1[11] = '0' + (y_e % 100 - y_e % 10) / 10;
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <main+0x830>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <main+0x834>)
 8001baa:	fb82 1203 	smull	r1, r2, r2, r3
 8001bae:	1151      	asrs	r1, r2, #5
 8001bb0:	17da      	asrs	r2, r3, #31
 8001bb2:	1a8a      	subs	r2, r1, r2
 8001bb4:	2164      	movs	r1, #100	; 0x64
 8001bb6:	fb01 f202 	mul.w	r2, r1, r2
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <main+0x830>)
 8001bc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <main+0x838>)
 8001bc8:	fb83 1302 	smull	r1, r3, r3, r2
 8001bcc:	1099      	asrs	r1, r3, #2
 8001bce:	17d3      	asrs	r3, r2, #31
 8001bd0:	1ac9      	subs	r1, r1, r3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	1ac3      	subs	r3, r0, r3
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <main+0x838>)
 8001be2:	fb82 1203 	smull	r1, r2, r2, r3
 8001be6:	1092      	asrs	r2, r2, #2
 8001be8:	17db      	asrs	r3, r3, #31
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3330      	adds	r3, #48	; 0x30
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <main+0x828>)
 8001bf4:	72da      	strb	r2, [r3, #11]
			napis1[12] = '0' + y_e % 10;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <main+0x830>)
 8001bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <main+0x838>)
 8001bfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001c02:	1099      	asrs	r1, r3, #2
 8001c04:	17d3      	asrs	r3, r2, #31
 8001c06:	1ac9      	subs	r1, r1, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3330      	adds	r3, #48	; 0x30
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <main+0x828>)
 8001c1c:	731a      	strb	r2, [r3, #12]

			//predkosc
			if (v_e >= 0)
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <main+0x83c>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db11      	blt.n	8001c4c <main+0x844>
				napis3[4] = '+';
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <main+0x840>)
 8001c2a:	222b      	movs	r2, #43	; 0x2b
 8001c2c:	711a      	strb	r2, [r3, #4]
 8001c2e:	e010      	b.n	8001c52 <main+0x84a>
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000458 	.word	0x20000458
 8001c38:	200003f4 	.word	0x200003f4
 8001c3c:	51eb851f 	.word	0x51eb851f
 8001c40:	66666667 	.word	0x66666667
 8001c44:	2000039a 	.word	0x2000039a
 8001c48:	20000020 	.word	0x20000020
			else
				napis3[4] = '-';
 8001c4c:	4bc3      	ldr	r3, [pc, #780]	; (8001f5c <main+0xb54>)
 8001c4e:	222d      	movs	r2, #45	; 0x2d
 8001c50:	711a      	strb	r2, [r3, #4]
			v_e = abs(v_e);
 8001c52:	4bc3      	ldr	r3, [pc, #780]	; (8001f60 <main+0xb58>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bfb8      	it	lt
 8001c5c:	425b      	neglt	r3, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	4bbf      	ldr	r3, [pc, #764]	; (8001f60 <main+0xb58>)
 8001c64:	801a      	strh	r2, [r3, #0]
			napis3[5] = '0' + (v_e - v_e % 100) / 100;
 8001c66:	4bbe      	ldr	r3, [pc, #760]	; (8001f60 <main+0xb58>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4bbc      	ldr	r3, [pc, #752]	; (8001f60 <main+0xb58>)
 8001c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c74:	4abb      	ldr	r2, [pc, #748]	; (8001f64 <main+0xb5c>)
 8001c76:	fb82 1203 	smull	r1, r2, r2, r3
 8001c7a:	1151      	asrs	r1, r2, #5
 8001c7c:	17da      	asrs	r2, r3, #31
 8001c7e:	1a8a      	subs	r2, r1, r2
 8001c80:	2164      	movs	r1, #100	; 0x64
 8001c82:	fb01 f202 	mul.w	r2, r1, r2
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	1ac3      	subs	r3, r0, r3
 8001c8c:	4ab5      	ldr	r2, [pc, #724]	; (8001f64 <main+0xb5c>)
 8001c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c92:	1152      	asrs	r2, r2, #5
 8001c94:	17db      	asrs	r3, r3, #31
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3330      	adds	r3, #48	; 0x30
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4baf      	ldr	r3, [pc, #700]	; (8001f5c <main+0xb54>)
 8001ca0:	715a      	strb	r2, [r3, #5]
			napis3[6] = '0' + (v_e % 100 - v_e % 10) / 10;
 8001ca2:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <main+0xb58>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	4aae      	ldr	r2, [pc, #696]	; (8001f64 <main+0xb5c>)
 8001caa:	fb82 1203 	smull	r1, r2, r2, r3
 8001cae:	1151      	asrs	r1, r2, #5
 8001cb0:	17da      	asrs	r2, r3, #31
 8001cb2:	1a8a      	subs	r2, r1, r2
 8001cb4:	2164      	movs	r1, #100	; 0x64
 8001cb6:	fb01 f202 	mul.w	r2, r1, r2
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4ba7      	ldr	r3, [pc, #668]	; (8001f60 <main+0xb58>)
 8001cc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cc6:	4ba8      	ldr	r3, [pc, #672]	; (8001f68 <main+0xb60>)
 8001cc8:	fb83 1302 	smull	r1, r3, r3, r2
 8001ccc:	1099      	asrs	r1, r3, #2
 8001cce:	17d3      	asrs	r3, r2, #31
 8001cd0:	1ac9      	subs	r1, r1, r3
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	1ac3      	subs	r3, r0, r3
 8001ce0:	4aa1      	ldr	r2, [pc, #644]	; (8001f68 <main+0xb60>)
 8001ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce6:	1092      	asrs	r2, r2, #2
 8001ce8:	17db      	asrs	r3, r3, #31
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3330      	adds	r3, #48	; 0x30
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b9a      	ldr	r3, [pc, #616]	; (8001f5c <main+0xb54>)
 8001cf4:	719a      	strb	r2, [r3, #6]
			napis3[8] = '0' + v_e % 10;
 8001cf6:	4b9a      	ldr	r3, [pc, #616]	; (8001f60 <main+0xb58>)
 8001cf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cfc:	4b9a      	ldr	r3, [pc, #616]	; (8001f68 <main+0xb60>)
 8001cfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001d02:	1099      	asrs	r1, r3, #2
 8001d04:	17d3      	asrs	r3, r2, #31
 8001d06:	1ac9      	subs	r1, r1, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3330      	adds	r3, #48	; 0x30
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b90      	ldr	r3, [pc, #576]	; (8001f5c <main+0xb54>)
 8001d1c:	721a      	strb	r2, [r3, #8]

			//rotacja
			napis2[5] = '0' + (rot_e - rot_e % 1000) / 1000;
 8001d1e:	4b93      	ldr	r3, [pc, #588]	; (8001f6c <main+0xb64>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	4618      	mov	r0, r3
 8001d26:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <main+0xb64>)
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <main+0xb68>)
 8001d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d32:	1191      	asrs	r1, r2, #6
 8001d34:	17da      	asrs	r2, r3, #31
 8001d36:	1a8a      	subs	r2, r1, r2
 8001d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d3c:	fb01 f202 	mul.w	r2, r1, r2
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	1ac3      	subs	r3, r0, r3
 8001d46:	4a8a      	ldr	r2, [pc, #552]	; (8001f70 <main+0xb68>)
 8001d48:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4c:	1192      	asrs	r2, r2, #6
 8001d4e:	17db      	asrs	r3, r3, #31
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3330      	adds	r3, #48	; 0x30
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <main+0xb6c>)
 8001d5a:	715a      	strb	r2, [r3, #5]
			napis2[6] = '0' + (rot_e % 1000 - rot_e % 100) / 100;
 8001d5c:	4b83      	ldr	r3, [pc, #524]	; (8001f6c <main+0xb64>)
 8001d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d62:	4a83      	ldr	r2, [pc, #524]	; (8001f70 <main+0xb68>)
 8001d64:	fb82 1203 	smull	r1, r2, r2, r3
 8001d68:	1191      	asrs	r1, r2, #6
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	1a8a      	subs	r2, r1, r2
 8001d6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d72:	fb01 f202 	mul.w	r2, r1, r2
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <main+0xb64>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	4a78      	ldr	r2, [pc, #480]	; (8001f64 <main+0xb5c>)
 8001d84:	fb82 1203 	smull	r1, r2, r2, r3
 8001d88:	1151      	asrs	r1, r2, #5
 8001d8a:	17da      	asrs	r2, r3, #31
 8001d8c:	1a8a      	subs	r2, r1, r2
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	fb01 f202 	mul.w	r2, r1, r2
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	1ac3      	subs	r3, r0, r3
 8001d9a:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <main+0xb5c>)
 8001d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001da0:	1152      	asrs	r2, r2, #5
 8001da2:	17db      	asrs	r3, r3, #31
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3330      	adds	r3, #48	; 0x30
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <main+0xb6c>)
 8001dae:	719a      	strb	r2, [r3, #6]
			napis2[7] = '0' + (rot_e % 100 - rot_e % 10) / 10;
 8001db0:	4b6e      	ldr	r3, [pc, #440]	; (8001f6c <main+0xb64>)
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	4a6b      	ldr	r2, [pc, #428]	; (8001f64 <main+0xb5c>)
 8001db8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbc:	1151      	asrs	r1, r2, #5
 8001dbe:	17da      	asrs	r2, r3, #31
 8001dc0:	1a8a      	subs	r2, r1, r2
 8001dc2:	2164      	movs	r1, #100	; 0x64
 8001dc4:	fb01 f202 	mul.w	r2, r1, r2
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <main+0xb64>)
 8001dd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <main+0xb60>)
 8001dd6:	fb83 1302 	smull	r1, r3, r3, r2
 8001dda:	1099      	asrs	r1, r3, #2
 8001ddc:	17d3      	asrs	r3, r2, #31
 8001dde:	1ac9      	subs	r1, r1, r3
 8001de0:	460b      	mov	r3, r1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	1ac3      	subs	r3, r0, r3
 8001dee:	4a5e      	ldr	r2, [pc, #376]	; (8001f68 <main+0xb60>)
 8001df0:	fb82 1203 	smull	r1, r2, r2, r3
 8001df4:	1092      	asrs	r2, r2, #2
 8001df6:	17db      	asrs	r3, r3, #31
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3330      	adds	r3, #48	; 0x30
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <main+0xb6c>)
 8001e02:	71da      	strb	r2, [r3, #7]
			napis2[9] = '0' + rot_e % 10;
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <main+0xb64>)
 8001e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e0a:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <main+0xb60>)
 8001e0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e10:	1099      	asrs	r1, r3, #2
 8001e12:	17d3      	asrs	r3, r2, #31
 8001e14:	1ac9      	subs	r1, r1, r3
 8001e16:	460b      	mov	r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3330      	adds	r3, #48	; 0x30
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <main+0xb6c>)
 8001e2a:	725a      	strb	r2, [r3, #9]

			//predkosc katowa
			if (ang_e == 0) {
 8001e2c:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <main+0xb70>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <main+0xa4e>
				napis4[3] = '+';
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <main+0xb74>)
 8001e38:	222b      	movs	r2, #43	; 0x2b
 8001e3a:	70da      	strb	r2, [r3, #3]
				napis4[4] = '0';
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <main+0xb74>)
 8001e3e:	2230      	movs	r2, #48	; 0x30
 8001e40:	711a      	strb	r2, [r3, #4]
				napis4[6] = '0';
 8001e42:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <main+0xb74>)
 8001e44:	2230      	movs	r2, #48	; 0x30
 8001e46:	719a      	strb	r2, [r3, #6]
				napis4[7] = '0';
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <main+0xb74>)
 8001e4a:	2230      	movs	r2, #48	; 0x30
 8001e4c:	71da      	strb	r2, [r3, #7]
				napis4[8] = '0';
 8001e4e:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <main+0xb74>)
 8001e50:	2230      	movs	r2, #48	; 0x30
 8001e52:	721a      	strb	r2, [r3, #8]
 8001e54:	e071      	b.n	8001f3a <main+0xb32>
			} else {
				if (ang_e >= 0)
 8001e56:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <main+0xb70>)
 8001e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db03      	blt.n	8001e68 <main+0xa60>
					napis4[3] = '+';
 8001e60:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <main+0xb74>)
 8001e62:	222b      	movs	r2, #43	; 0x2b
 8001e64:	70da      	strb	r2, [r3, #3]
 8001e66:	e002      	b.n	8001e6e <main+0xa66>
				else
					napis4[3] = '-';
 8001e68:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <main+0xb74>)
 8001e6a:	222d      	movs	r2, #45	; 0x2d
 8001e6c:	70da      	strb	r2, [r3, #3]
				ang_e = abs(ang_e);
 8001e6e:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <main+0xb70>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bfb8      	it	lt
 8001e78:	425b      	neglt	r3, r3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <main+0xb70>)
 8001e80:	801a      	strh	r2, [r3, #0]
				napis4[6] = '0' + (ang_e - ang_e % 100) / 100;
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <main+0xb70>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <main+0xb70>)
 8001e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e90:	4a34      	ldr	r2, [pc, #208]	; (8001f64 <main+0xb5c>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	1151      	asrs	r1, r2, #5
 8001e98:	17da      	asrs	r2, r3, #31
 8001e9a:	1a8a      	subs	r2, r1, r2
 8001e9c:	2164      	movs	r1, #100	; 0x64
 8001e9e:	fb01 f202 	mul.w	r2, r1, r2
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	1ac3      	subs	r3, r0, r3
 8001ea8:	4a2e      	ldr	r2, [pc, #184]	; (8001f64 <main+0xb5c>)
 8001eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8001eae:	1152      	asrs	r2, r2, #5
 8001eb0:	17db      	asrs	r3, r3, #31
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3330      	adds	r3, #48	; 0x30
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <main+0xb74>)
 8001ebc:	719a      	strb	r2, [r3, #6]
				napis4[7] = '0' + (ang_e % 100 - ang_e % 10) / 10;
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <main+0xb70>)
 8001ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <main+0xb5c>)
 8001ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eca:	1151      	asrs	r1, r2, #5
 8001ecc:	17da      	asrs	r2, r3, #31
 8001ece:	1a8a      	subs	r2, r1, r2
 8001ed0:	2164      	movs	r1, #100	; 0x64
 8001ed2:	fb01 f202 	mul.w	r2, r1, r2
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <main+0xb70>)
 8001ede:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <main+0xb60>)
 8001ee4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee8:	1099      	asrs	r1, r3, #2
 8001eea:	17d3      	asrs	r3, r2, #31
 8001eec:	1ac9      	subs	r1, r1, r3
 8001eee:	460b      	mov	r3, r1
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	1ac3      	subs	r3, r0, r3
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <main+0xb60>)
 8001efe:	fb82 1203 	smull	r1, r2, r2, r3
 8001f02:	1092      	asrs	r2, r2, #2
 8001f04:	17db      	asrs	r3, r3, #31
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3330      	adds	r3, #48	; 0x30
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <main+0xb74>)
 8001f10:	71da      	strb	r2, [r3, #7]
				napis4[8] = '0' + ang_e % 10;
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <main+0xb70>)
 8001f14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <main+0xb60>)
 8001f1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f1e:	1099      	asrs	r1, r3, #2
 8001f20:	17d3      	asrs	r3, r2, #31
 8001f22:	1ac9      	subs	r1, r1, r3
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3330      	adds	r3, #48	; 0x30
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <main+0xb74>)
 8001f38:	721a      	strb	r2, [r3, #8]
			}
			//przyspieszenia
			if (acceleration >= 0)
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <main+0xb78>)
 8001f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	f7fe fdf8 	bl	8000b3c <__aeabi_dcmpge>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01a      	beq.n	8001f88 <main+0xb80>
				napis5[1] = '+';
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <main+0xb7c>)
 8001f54:	222b      	movs	r2, #43	; 0x2b
 8001f56:	705a      	strb	r2, [r3, #1]
 8001f58:	e019      	b.n	8001f8e <main+0xb86>
 8001f5a:	bf00      	nop
 8001f5c:	20000020 	.word	0x20000020
 8001f60:	2000039a 	.word	0x2000039a
 8001f64:	51eb851f 	.word	0x51eb851f
 8001f68:	66666667 	.word	0x66666667
 8001f6c:	20000302 	.word	0x20000302
 8001f70:	10624dd3 	.word	0x10624dd3
 8001f74:	20000010 	.word	0x20000010
 8001f78:	20000304 	.word	0x20000304
 8001f7c:	20000030 	.word	0x20000030
 8001f80:	200005d0 	.word	0x200005d0
 8001f84:	20000040 	.word	0x20000040
			else
				napis5[1] = '-';
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <main+0xb98>)
 8001f8a:	222d      	movs	r2, #45	; 0x2d
 8001f8c:	705a      	strb	r2, [r3, #1]
			if (acc_acceleration >= 0)
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <main+0xb9c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db08      	blt.n	8001fa8 <main+0xba0>
				napis5[8] = '+';
 8001f96:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <main+0xb98>)
 8001f98:	222b      	movs	r2, #43	; 0x2b
 8001f9a:	721a      	strb	r2, [r3, #8]
 8001f9c:	e007      	b.n	8001fae <main+0xba6>
 8001f9e:	bf00      	nop
 8001fa0:	20000040 	.word	0x20000040
 8001fa4:	200005c0 	.word	0x200005c0
			else
				napis5[8] = '-';
 8001fa8:	4bc2      	ldr	r3, [pc, #776]	; (80022b4 <main+0xeac>)
 8001faa:	222d      	movs	r2, #45	; 0x2d
 8001fac:	721a      	strb	r2, [r3, #8]
			acc_e = abs((int) acceleration);
 8001fae:	4bc2      	ldr	r3, [pc, #776]	; (80022b8 <main+0xeb0>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fdea 	bl	8000b90 <__aeabi_d2iz>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bfb8      	it	lt
 8001fc2:	425b      	neglt	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4bbd      	ldr	r3, [pc, #756]	; (80022bc <main+0xeb4>)
 8001fc8:	801a      	strh	r2, [r3, #0]

			//obliczone
			napis5[2] = '0' + (acc_e - acc_e % 1000) / 1000;
 8001fca:	4bbc      	ldr	r3, [pc, #752]	; (80022bc <main+0xeb4>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4bba      	ldr	r3, [pc, #744]	; (80022bc <main+0xeb4>)
 8001fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd8:	4ab9      	ldr	r2, [pc, #740]	; (80022c0 <main+0xeb8>)
 8001fda:	fb82 1203 	smull	r1, r2, r2, r3
 8001fde:	1191      	asrs	r1, r2, #6
 8001fe0:	17da      	asrs	r2, r3, #31
 8001fe2:	1a8a      	subs	r2, r1, r2
 8001fe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fe8:	fb01 f202 	mul.w	r2, r1, r2
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	1ac3      	subs	r3, r0, r3
 8001ff2:	4ab3      	ldr	r2, [pc, #716]	; (80022c0 <main+0xeb8>)
 8001ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff8:	1192      	asrs	r2, r2, #6
 8001ffa:	17db      	asrs	r3, r3, #31
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3330      	adds	r3, #48	; 0x30
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4bab      	ldr	r3, [pc, #684]	; (80022b4 <main+0xeac>)
 8002006:	709a      	strb	r2, [r3, #2]
			napis5[3] = '0' + (acc_e % 1000 - acc_e % 100) / 100;
 8002008:	4bac      	ldr	r3, [pc, #688]	; (80022bc <main+0xeb4>)
 800200a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200e:	4aac      	ldr	r2, [pc, #688]	; (80022c0 <main+0xeb8>)
 8002010:	fb82 1203 	smull	r1, r2, r2, r3
 8002014:	1191      	asrs	r1, r2, #6
 8002016:	17da      	asrs	r2, r3, #31
 8002018:	1a8a      	subs	r2, r1, r2
 800201a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800201e:	fb01 f202 	mul.w	r2, r1, r2
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	b21b      	sxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	4ba4      	ldr	r3, [pc, #656]	; (80022bc <main+0xeb4>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	4aa5      	ldr	r2, [pc, #660]	; (80022c4 <main+0xebc>)
 8002030:	fb82 1203 	smull	r1, r2, r2, r3
 8002034:	1151      	asrs	r1, r2, #5
 8002036:	17da      	asrs	r2, r3, #31
 8002038:	1a8a      	subs	r2, r1, r2
 800203a:	2164      	movs	r1, #100	; 0x64
 800203c:	fb01 f202 	mul.w	r2, r1, r2
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	1ac3      	subs	r3, r0, r3
 8002046:	4a9f      	ldr	r2, [pc, #636]	; (80022c4 <main+0xebc>)
 8002048:	fb82 1203 	smull	r1, r2, r2, r3
 800204c:	1152      	asrs	r2, r2, #5
 800204e:	17db      	asrs	r3, r3, #31
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3330      	adds	r3, #48	; 0x30
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b96      	ldr	r3, [pc, #600]	; (80022b4 <main+0xeac>)
 800205a:	70da      	strb	r2, [r3, #3]
			napis5[4] = '0' + (acc_e % 100 - acc_e % 10) / 10;
 800205c:	4b97      	ldr	r3, [pc, #604]	; (80022bc <main+0xeb4>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	4a98      	ldr	r2, [pc, #608]	; (80022c4 <main+0xebc>)
 8002064:	fb82 1203 	smull	r1, r2, r2, r3
 8002068:	1151      	asrs	r1, r2, #5
 800206a:	17da      	asrs	r2, r3, #31
 800206c:	1a8a      	subs	r2, r1, r2
 800206e:	2164      	movs	r1, #100	; 0x64
 8002070:	fb01 f202 	mul.w	r2, r1, r2
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	b21b      	sxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	4b90      	ldr	r3, [pc, #576]	; (80022bc <main+0xeb4>)
 800207c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002080:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <main+0xec0>)
 8002082:	fb83 1302 	smull	r1, r3, r3, r2
 8002086:	1099      	asrs	r1, r3, #2
 8002088:	17d3      	asrs	r3, r2, #31
 800208a:	1ac9      	subs	r1, r1, r3
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b21b      	sxth	r3, r3
 8002098:	1ac3      	subs	r3, r0, r3
 800209a:	4a8b      	ldr	r2, [pc, #556]	; (80022c8 <main+0xec0>)
 800209c:	fb82 1203 	smull	r1, r2, r2, r3
 80020a0:	1092      	asrs	r2, r2, #2
 80020a2:	17db      	asrs	r3, r3, #31
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3330      	adds	r3, #48	; 0x30
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b81      	ldr	r3, [pc, #516]	; (80022b4 <main+0xeac>)
 80020ae:	711a      	strb	r2, [r3, #4]
			napis5[6] = '0' + acc_e % 10;
 80020b0:	4b82      	ldr	r3, [pc, #520]	; (80022bc <main+0xeb4>)
 80020b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020b6:	4b84      	ldr	r3, [pc, #528]	; (80022c8 <main+0xec0>)
 80020b8:	fb83 1302 	smull	r1, r3, r3, r2
 80020bc:	1099      	asrs	r1, r3, #2
 80020be:	17d3      	asrs	r3, r2, #31
 80020c0:	1ac9      	subs	r1, r1, r3
 80020c2:	460b      	mov	r3, r1
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3330      	adds	r3, #48	; 0x30
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b77      	ldr	r3, [pc, #476]	; (80022b4 <main+0xeac>)
 80020d6:	719a      	strb	r2, [r3, #6]
			acc_a_e = abs(acc_acceleration);
 80020d8:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <main+0xec4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bfb8      	it	lt
 80020e0:	425b      	neglt	r3, r3
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <main+0xec8>)
 80020e6:	801a      	strh	r2, [r3, #0]
			napis5[9] = '0' + (acc_a_e - acc_a_e % 1000) / 1000;
 80020e8:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <main+0xec8>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	4618      	mov	r0, r3
 80020f0:	4b77      	ldr	r3, [pc, #476]	; (80022d0 <main+0xec8>)
 80020f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f6:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <main+0xeb8>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1191      	asrs	r1, r2, #6
 80020fe:	17da      	asrs	r2, r3, #31
 8002100:	1a8a      	subs	r2, r1, r2
 8002102:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002106:	fb01 f202 	mul.w	r2, r1, r2
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	1ac3      	subs	r3, r0, r3
 8002110:	4a6b      	ldr	r2, [pc, #428]	; (80022c0 <main+0xeb8>)
 8002112:	fb82 1203 	smull	r1, r2, r2, r3
 8002116:	1192      	asrs	r2, r2, #6
 8002118:	17db      	asrs	r3, r3, #31
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3330      	adds	r3, #48	; 0x30
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <main+0xeac>)
 8002124:	725a      	strb	r2, [r3, #9]
			napis5[10] = '0' + (acc_a_e % 1000 - acc_a_e % 100) / 100;
 8002126:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <main+0xec8>)
 8002128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212c:	4a64      	ldr	r2, [pc, #400]	; (80022c0 <main+0xeb8>)
 800212e:	fb82 1203 	smull	r1, r2, r2, r3
 8002132:	1191      	asrs	r1, r2, #6
 8002134:	17da      	asrs	r2, r3, #31
 8002136:	1a8a      	subs	r2, r1, r2
 8002138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800213c:	fb01 f202 	mul.w	r2, r1, r2
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <main+0xec8>)
 8002148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214c:	4a5d      	ldr	r2, [pc, #372]	; (80022c4 <main+0xebc>)
 800214e:	fb82 1203 	smull	r1, r2, r2, r3
 8002152:	1151      	asrs	r1, r2, #5
 8002154:	17da      	asrs	r2, r3, #31
 8002156:	1a8a      	subs	r2, r1, r2
 8002158:	2164      	movs	r1, #100	; 0x64
 800215a:	fb01 f202 	mul.w	r2, r1, r2
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	1ac3      	subs	r3, r0, r3
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <main+0xebc>)
 8002166:	fb82 1203 	smull	r1, r2, r2, r3
 800216a:	1152      	asrs	r2, r2, #5
 800216c:	17db      	asrs	r3, r3, #31
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3330      	adds	r3, #48	; 0x30
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <main+0xeac>)
 8002178:	729a      	strb	r2, [r3, #10]
			napis5[11] = '0' + (acc_a_e % 100 - acc_a_e % 10) / 10;
 800217a:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <main+0xec8>)
 800217c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002180:	4a50      	ldr	r2, [pc, #320]	; (80022c4 <main+0xebc>)
 8002182:	fb82 1203 	smull	r1, r2, r2, r3
 8002186:	1151      	asrs	r1, r2, #5
 8002188:	17da      	asrs	r2, r3, #31
 800218a:	1a8a      	subs	r2, r1, r2
 800218c:	2164      	movs	r1, #100	; 0x64
 800218e:	fb01 f202 	mul.w	r2, r1, r2
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <main+0xec8>)
 800219a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <main+0xec0>)
 80021a0:	fb83 1302 	smull	r1, r3, r3, r2
 80021a4:	1099      	asrs	r1, r3, #2
 80021a6:	17d3      	asrs	r3, r2, #31
 80021a8:	1ac9      	subs	r1, r1, r3
 80021aa:	460b      	mov	r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	1ac3      	subs	r3, r0, r3
 80021b8:	4a43      	ldr	r2, [pc, #268]	; (80022c8 <main+0xec0>)
 80021ba:	fb82 1203 	smull	r1, r2, r2, r3
 80021be:	1092      	asrs	r2, r2, #2
 80021c0:	17db      	asrs	r3, r3, #31
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3330      	adds	r3, #48	; 0x30
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <main+0xeac>)
 80021cc:	72da      	strb	r2, [r3, #11]
			napis5[13] = '0' + acc_a_e % 10;
 80021ce:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <main+0xec8>)
 80021d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <main+0xec0>)
 80021d6:	fb83 1302 	smull	r1, r3, r3, r2
 80021da:	1099      	asrs	r1, r3, #2
 80021dc:	17d3      	asrs	r3, r2, #31
 80021de:	1ac9      	subs	r1, r1, r3
 80021e0:	460b      	mov	r3, r1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3330      	adds	r3, #48	; 0x30
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <main+0xeac>)
 80021f4:	735a      	strb	r2, [r3, #13]
			//czas
			napis6[8] = '0' + sec % 10;
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <main+0xecc>)
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <main+0xed0>)
 80021fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002200:	08d9      	lsrs	r1, r3, #3
 8002202:	460b      	mov	r3, r1
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3330      	adds	r3, #48	; 0x30
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <main+0xed4>)
 8002216:	721a      	strb	r2, [r3, #8]
			napis6[7] = '0' + (sec % 100 - sec % 10) / 10;
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <main+0xecc>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <main+0xebc>)
 800221e:	fba2 1203 	umull	r1, r2, r2, r3
 8002222:	0952      	lsrs	r2, r2, #5
 8002224:	2164      	movs	r1, #100	; 0x64
 8002226:	fb01 f202 	mul.w	r2, r1, r2
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <main+0xecc>)
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <main+0xed0>)
 8002236:	fba3 1302 	umull	r1, r3, r3, r2
 800223a:	08d9      	lsrs	r1, r3, #3
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	1ac3      	subs	r3, r0, r3
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <main+0xec0>)
 800224c:	fb82 1203 	smull	r1, r2, r2, r3
 8002250:	1092      	asrs	r2, r2, #2
 8002252:	17db      	asrs	r3, r3, #31
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3330      	adds	r3, #48	; 0x30
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <main+0xed4>)
 800225e:	71da      	strb	r2, [r3, #7]
			napis6[6] = '0' + (sec - sec % 100) / 100;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <main+0xecc>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <main+0xecc>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <main+0xebc>)
 800226c:	fba2 1203 	umull	r1, r2, r2, r3
 8002270:	0952      	lsrs	r2, r2, #5
 8002272:	2164      	movs	r1, #100	; 0x64
 8002274:	fb01 f202 	mul.w	r2, r1, r2
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	1ac3      	subs	r3, r0, r3
 800227e:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <main+0xebc>)
 8002280:	fb82 1203 	smull	r1, r2, r2, r3
 8002284:	1152      	asrs	r2, r2, #5
 8002286:	17db      	asrs	r3, r3, #31
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3330      	adds	r3, #48	; 0x30
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <main+0xed4>)
 8002292:	719a      	strb	r2, [r3, #6]
			napis6[10] = '0' + milsec;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <main+0xed8>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3330      	adds	r3, #48	; 0x30
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <main+0xed4>)
 80022a0:	729a      	strb	r2, [r3, #10]

			lcd_clear();
 80022a2:	f7fe feaf 	bl	8001004 <lcd_clear>
			lcd_draw_text(0, 0, napis1);
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <main+0xedc>)
 80022a8:	2100      	movs	r1, #0
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe feb6 	bl	800101c <lcd_draw_text>
 80022b0:	e01a      	b.n	80022e8 <main+0xee0>
 80022b2:	bf00      	nop
 80022b4:	20000040 	.word	0x20000040
 80022b8:	200005d0 	.word	0x200005d0
 80022bc:	20000388 	.word	0x20000388
 80022c0:	10624dd3 	.word	0x10624dd3
 80022c4:	51eb851f 	.word	0x51eb851f
 80022c8:	66666667 	.word	0x66666667
 80022cc:	200005c0 	.word	0x200005c0
 80022d0:	200004b4 	.word	0x200004b4
 80022d4:	20000300 	.word	0x20000300
 80022d8:	cccccccd 	.word	0xcccccccd
 80022dc:	20000050 	.word	0x20000050
 80022e0:	20000308 	.word	0x20000308
 80022e4:	20000000 	.word	0x20000000
			lcd_draw_text(1, 0, napis2);
 80022e8:	4a17      	ldr	r2, [pc, #92]	; (8002348 <main+0xf40>)
 80022ea:	2100      	movs	r1, #0
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7fe fe95 	bl	800101c <lcd_draw_text>
			lcd_draw_text(2, 0, napis3);
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <main+0xf44>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	2002      	movs	r0, #2
 80022f8:	f7fe fe90 	bl	800101c <lcd_draw_text>
			lcd_draw_text(3, 0, napis4);
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <main+0xf48>)
 80022fe:	2100      	movs	r1, #0
 8002300:	2003      	movs	r0, #3
 8002302:	f7fe fe8b 	bl	800101c <lcd_draw_text>
			lcd_draw_text(4, 0, napis5);
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <main+0xf4c>)
 8002308:	2100      	movs	r1, #0
 800230a:	2004      	movs	r0, #4
 800230c:	f7fe fe86 	bl	800101c <lcd_draw_text>
			lcd_draw_text(5, 0, napis6);
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <main+0xf50>)
 8002312:	2100      	movs	r1, #0
 8002314:	2005      	movs	r0, #5
 8002316:	f7fe fe81 	bl	800101c <lcd_draw_text>
			lcd_copy();
 800231a:	f7fe fec7 	bl	80010ac <lcd_copy>
			last_state_1 = pulse_count_1;
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <main+0xf54>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	b21a      	sxth	r2, r3
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <main+0xf58>)
 8002328:	801a      	strh	r2, [r3, #0]
			last_state_2 = pulse_count_2;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <main+0xf5c>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <main+0xf60>)
 8002334:	801a      	strh	r2, [r3, #0]
			D_last = D;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <main+0xf64>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <main+0xf68>)
 800233e:	e9c1 2300 	strd	r2, r3, [r1]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8002342:	f7ff b8ca 	b.w	80014da <main+0xd2>
 8002346:	bf00      	nop
 8002348:	20000010 	.word	0x20000010
 800234c:	20000020 	.word	0x20000020
 8002350:	20000030 	.word	0x20000030
 8002354:	20000040 	.word	0x20000040
 8002358:	20000050 	.word	0x20000050
 800235c:	20000518 	.word	0x20000518
 8002360:	20000320 	.word	0x20000320
 8002364:	200005c8 	.word	0x200005c8
 8002368:	20000322 	.word	0x20000322
 800236c:	20000380 	.word	0x20000380
 8002370:	20000498 	.word	0x20000498

08002374 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	; 0x50
 8002378:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800237a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237e:	2228      	movs	r2, #40	; 0x28
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f004 fc36 	bl	8006bf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a8:	2301      	movs	r3, #1
 80023aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ac:	2310      	movs	r3, #16
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fb51 	bl	8004a60 <HAL_RCC_OscConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0x54>
		Error_Handler();
 80023c4:	f000 fa98 	bl	80028f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023c8:	230f      	movs	r3, #15
 80023ca:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 fdbc 	bl	8004f60 <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0x7e>
		Error_Handler();
 80023ee:	f000 fa83 	bl	80028f8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023f2:	2302      	movs	r3, #2
 80023f4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 ff49 	bl	8005294 <HAL_RCCEx_PeriphCLKConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <SystemClock_Config+0x98>
		Error_Handler();
 8002408:	f000 fa76 	bl	80028f8 <Error_Handler>
	}
}
 800240c:	bf00      	nop
 800240e:	3750      	adds	r7, #80	; 0x50
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_ADC1_Init+0x74>)
 8002426:	4a19      	ldr	r2, [pc, #100]	; (800248c <MX_ADC1_Init+0x78>)
 8002428:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <MX_ADC1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <MX_ADC1_Init+0x74>)
 8002432:	2201      	movs	r2, #1
 8002434:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_ADC1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MX_ADC1_Init+0x74>)
 800243e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002442:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <MX_ADC1_Init+0x74>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MX_ADC1_Init+0x74>)
 800244c:	2201      	movs	r2, #1
 800244e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <MX_ADC1_Init+0x74>)
 8002452:	f000 fd0b 	bl	8002e6c <HAL_ADC_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800245c:	f000 fa4c 	bl	80028f8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002460:	2304      	movs	r3, #4
 8002462:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002464:	2301      	movs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002468:	2302      	movs	r3, #2
 800246a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_ADC1_Init+0x74>)
 8002472:	f000 fe8d 	bl	8003190 <HAL_ADC_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800247c:	f000 fa3c 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000460 	.word	0x20000460
 800248c:	40012400 	.word	0x40012400

08002490 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <MX_I2C1_Init+0x50>)
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <MX_I2C1_Init+0x54>)
 8002498:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_I2C1_Init+0x50>)
 800249c:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <MX_I2C1_Init+0x58>)
 800249e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024ce:	f001 fac7 	bl	8003a60 <HAL_I2C_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80024d8:	f000 fa0e 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200003a0 	.word	0x200003a0
 80024e4:	40005400 	.word	0x40005400
 80024e8:	000186a0 	.word	0x000186a0

080024ec <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_SPI2_Init+0x64>)
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <MX_SPI2_Init+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_SPI2_Init+0x64>)
 80024f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024fc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_SPI2_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_SPI2_Init+0x64>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_SPI2_Init+0x64>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_SPI2_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_SPI2_Init+0x64>)
 8002518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_SPI2_Init+0x64>)
 8002520:	2210      	movs	r2, #16
 8002522:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <MX_SPI2_Init+0x64>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <MX_SPI2_Init+0x64>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <MX_SPI2_Init+0x64>)
 8002532:	2200      	movs	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_SPI2_Init+0x64>)
 8002538:	220a      	movs	r2, #10
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <MX_SPI2_Init+0x64>)
 800253e:	f002 ff5f 	bl	8005400 <HAL_SPI_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_SPI2_Init+0x60>
		Error_Handler();
 8002548:	f000 f9d6 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000324 	.word	0x20000324
 8002554:	40003800 	.word	0x40003800

08002558 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f004 fb44 	bl	8006bf4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <MX_TIM1_Init+0xa8>)
 8002576:	4a23      	ldr	r2, [pc, #140]	; (8002604 <MX_TIM1_Init+0xac>)
 8002578:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <MX_TIM1_Init+0xa8>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <MX_TIM1_Init+0xa8>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1201;
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <MX_TIM1_Init+0xa8>)
 8002588:	f240 42b1 	movw	r2, #1201	; 0x4b1
 800258c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MX_TIM1_Init+0xa8>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_TIM1_Init+0xa8>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <MX_TIM1_Init+0xa8>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025a0:	2303      	movs	r3, #3
 80025a2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025a8:	2301      	movs	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 80025b0:	230f      	movs	r3, #15
 80025b2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025b8:	2301      	movs	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 80025c0:	230f      	movs	r3, #15
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4619      	mov	r1, r3
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_TIM1_Init+0xa8>)
 80025cc:	f003 fb1a 	bl	8005c04 <HAL_TIM_Encoder_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM1_Init+0x82>
		Error_Handler();
 80025d6:	f000 f98f 	bl	80028f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_TIM1_Init+0xa8>)
 80025e8:	f004 f98e 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80025f2:	f000 f981 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200004d0 	.word	0x200004d0
 8002604:	40012c00 	.word	0x40012c00

08002608 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f004 faec 	bl	8006bf4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_TIM2_Init+0xa4>)
 8002626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800262a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <MX_TIM2_Init+0xa4>)
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_TIM2_Init+0xa4>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1201;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_TIM2_Init+0xa4>)
 800263a:	f240 42b1 	movw	r2, #1201	; 0x4b1
 800263e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_TIM2_Init+0xa4>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_TIM2_Init+0xa4>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800264c:	2303      	movs	r3, #3
 800264e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 800265c:	230f      	movs	r3, #15
 800265e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002664:	2301      	movs	r3, #1
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 800266c:	230f      	movs	r3, #15
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4619      	mov	r1, r3
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_TIM2_Init+0xa4>)
 8002678:	f003 fac4 	bl	8005c04 <HAL_TIM_Encoder_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002682:	f000 f939 	bl	80028f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4806      	ldr	r0, [pc, #24]	; (80026ac <MX_TIM2_Init+0xa4>)
 8002694:	f004 f938 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800269e:	f000 f92b 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	3730      	adds	r7, #48	; 0x30
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000530 	.word	0x20000530

080026b0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08e      	sub	sp, #56	; 0x38
 80026b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <MX_TIM3_Init+0xe8>)
 80026e2:	4a2e      	ldr	r2, [pc, #184]	; (800279c <MX_TIM3_Init+0xec>)
 80026e4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 799;
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <MX_TIM3_Init+0xe8>)
 80026e8:	f240 321f 	movw	r2, #799	; 0x31f
 80026ec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <MX_TIM3_Init+0xe8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <MX_TIM3_Init+0xe8>)
 80026f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026fa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <MX_TIM3_Init+0xe8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <MX_TIM3_Init+0xe8>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002708:	4823      	ldr	r0, [pc, #140]	; (8002798 <MX_TIM3_Init+0xe8>)
 800270a:	f003 f8df 	bl	80058cc <HAL_TIM_Base_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM3_Init+0x68>
		Error_Handler();
 8002714:	f000 f8f0 	bl	80028f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800271e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002722:	4619      	mov	r1, r3
 8002724:	481c      	ldr	r0, [pc, #112]	; (8002798 <MX_TIM3_Init+0xe8>)
 8002726:	f003 fd63 	bl	80061f0 <HAL_TIM_ConfigClockSource>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM3_Init+0x84>
		Error_Handler();
 8002730:	f000 f8e2 	bl	80028f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <MX_TIM3_Init+0xe8>)
 8002736:	f003 f96b 	bl	8005a10 <HAL_TIM_PWM_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM3_Init+0x94>
		Error_Handler();
 8002740:	f000 f8da 	bl	80028f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4619      	mov	r1, r3
 8002752:	4811      	ldr	r0, [pc, #68]	; (8002798 <MX_TIM3_Init+0xe8>)
 8002754:	f004 f8d8 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800275e:	f000 f8cb 	bl	80028f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002762:	2360      	movs	r3, #96	; 0x60
 8002764:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2204      	movs	r2, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <MX_TIM3_Init+0xe8>)
 800277a:	f003 fc7b 	bl	8006074 <HAL_TIM_PWM_ConfigChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8002784:	f000 f8b8 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <MX_TIM3_Init+0xe8>)
 800278a:	f000 fa37 	bl	8002bfc <HAL_TIM_MspPostInit>

}
 800278e:	bf00      	nop
 8002790:	3738      	adds	r7, #56	; 0x38
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000410 	.word	0x20000410
 800279c:	40000400 	.word	0x40000400

080027a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <MX_USART2_UART_Init+0x50>)
 80027a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_USART2_UART_Init+0x4c>)
 80027d8:	f004 f906 	bl	80069e8 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80027e2:	f000 f889 	bl	80028f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000578 	.word	0x20000578
 80027f0:	40004400 	.word	0x40004400

080027f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <MX_GPIO_Init+0xf4>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <MX_GPIO_Init+0xf4>)
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <MX_GPIO_Init+0xf4>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <MX_GPIO_Init+0xf4>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <MX_GPIO_Init+0xf4>)
 8002826:	f043 0320 	orr.w	r3, r3, #32
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <MX_GPIO_Init+0xf4>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <MX_GPIO_Init+0xf4>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <MX_GPIO_Init+0xf4>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <MX_GPIO_Init+0xf4>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <MX_GPIO_Init+0xf4>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <MX_GPIO_Init+0xf4>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <MX_GPIO_Init+0xf4>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6,
 8002868:	2200      	movs	r2, #0
 800286a:	214e      	movs	r1, #78	; 0x4e
 800286c:	481f      	ldr	r0, [pc, #124]	; (80028ec <MX_GPIO_Init+0xf8>)
 800286e:	f001 f8bc 	bl	80039ea <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	2120      	movs	r1, #32
 8002876:	481e      	ldr	r0, [pc, #120]	; (80028f0 <MX_GPIO_Init+0xfc>)
 8002878:	f001 f8b7 	bl	80039ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800287c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002880:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <MX_GPIO_Init+0x100>)
 8002884:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	4619      	mov	r1, r3
 8002890:	4816      	ldr	r0, [pc, #88]	; (80028ec <MX_GPIO_Init+0xf8>)
 8002892:	f000 ff0f 	bl	80036b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC1 PC2 PC3 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6;
 8002896:	234e      	movs	r3, #78	; 0x4e
 8002898:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	4619      	mov	r1, r3
 80028ac:	480f      	ldr	r0, [pc, #60]	; (80028ec <MX_GPIO_Init+0xf8>)
 80028ae:	f000 ff01 	bl	80036b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80028b2:	2320      	movs	r3, #32
 80028b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2302      	movs	r3, #2
 80028c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4619      	mov	r1, r3
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <MX_GPIO_Init+0xfc>)
 80028ca:	f000 fef3 	bl	80036b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	2028      	movs	r0, #40	; 0x28
 80028d4:	f000 feb7 	bl	8003646 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028d8:	2028      	movs	r0, #40	; 0x28
 80028da:	f000 fed0 	bl	800367e <HAL_NVIC_EnableIRQ>

}
 80028de:	bf00      	nop
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40010800 	.word	0x40010800
 80028f4:	10110000 	.word	0x10110000

080028f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002900:	e7fe      	b.n	8002900 <Error_Handler+0x8>
	...

08002904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_MspInit+0x5c>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_MspInit+0x5c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6193      	str	r3, [r2, #24]
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_MspInit+0x5c>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_MspInit+0x5c>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_MspInit+0x5c>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	61d3      	str	r3, [r2, #28]
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_MspInit+0x5c>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_MspInit+0x60>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_MspInit+0x60>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000

08002968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_ADC_MspInit+0x6c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d121      	bne.n	80029cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_ADC_MspInit+0x70>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_ADC_MspInit+0x70>)
 800298e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_ADC_MspInit+0x70>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_ADC_MspInit+0x70>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_ADC_MspInit+0x70>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_ADC_MspInit+0x70>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029b8:	2310      	movs	r3, #16
 80029ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029bc:	2303      	movs	r3, #3
 80029be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_ADC_MspInit+0x74>)
 80029c8:	f000 fe74 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40012400 	.word	0x40012400
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010800 	.word	0x40010800

080029e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <HAL_I2C_MspInit+0x70>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_I2C_MspInit+0x74>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <HAL_I2C_MspInit+0x74>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_I2C_MspInit+0x74>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a18:	23c0      	movs	r3, #192	; 0xc0
 8002a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <HAL_I2C_MspInit+0x78>)
 8002a2c:	f000 fe42 	bl	80036b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_I2C_MspInit+0x74>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_I2C_MspInit+0x74>)
 8002a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a3a:	61d3      	str	r3, [r2, #28]
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_I2C_MspInit+0x74>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40005400 	.word	0x40005400
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010c00 	.word	0x40010c00

08002a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d124      	bne.n	8002ac6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a86:	61d3      	str	r3, [r2, #28]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002aac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <HAL_SPI_MspInit+0x7c>)
 8002ac2:	f000 fdf7 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40003800 	.word	0x40003800
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010c00 	.word	0x40010c00

08002adc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2b      	ldr	r2, [pc, #172]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d125      	bne.n	8002b48 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b06:	6193      	str	r3, [r2, #24]
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0318 	add.w	r3, r7, #24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481a      	ldr	r0, [pc, #104]	; (8002bac <HAL_TIM_Encoder_MspInit+0xd0>)
 8002b42:	f000 fdb7 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b46:	e028      	b.n	8002b9a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d123      	bne.n	8002b9a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6193      	str	r3, [r2, #24]
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b82:	2303      	movs	r3, #3
 8002b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 0318 	add.w	r3, r7, #24
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_TIM_Encoder_MspInit+0xd0>)
 8002b96:	f000 fd8d 	bl	80036b4 <HAL_GPIO_Init>
}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	; 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010800 	.word	0x40010800

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_TIM_Base_MspInit+0x44>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d113      	bne.n	8002bea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_TIM_Base_MspInit+0x48>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_TIM_Base_MspInit+0x48>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	61d3      	str	r3, [r2, #28]
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_TIM_Base_MspInit+0x48>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	201d      	movs	r0, #29
 8002be0:	f000 fd31 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002be4:	201d      	movs	r0, #29
 8002be6:	f000 fd4a 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_TIM_MspPostInit+0x58>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d117      	bne.n	8002c4c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_TIM_MspPostInit+0x5c>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <HAL_TIM_MspPostInit+0x5c>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	6193      	str	r3, [r2, #24]
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_TIM_MspPostInit+0x5c>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <HAL_TIM_MspPostInit+0x60>)
 8002c48:	f000 fd34 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010800 	.word	0x40010800

08002c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_UART_MspInit+0x70>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d123      	bne.n	8002cc8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <HAL_UART_MspInit+0x74>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_UART_MspInit+0x74>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8a:	61d3      	str	r3, [r2, #28]
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_UART_MspInit+0x74>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_UART_MspInit+0x74>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_UART_MspInit+0x74>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6193      	str	r3, [r2, #24]
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_UART_MspInit+0x74>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <HAL_UART_MspInit+0x78>)
 8002cc4:	f000 fcf6 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40004400 	.word	0x40004400
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010800 	.word	0x40010800

08002cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <NMI_Handler+0x4>

08002ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <MemManage_Handler+0x4>

08002cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d22:	f000 f887 	bl	8002e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <TIM3_IRQHandler+0x10>)
 8002d32:	f003 f897 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000410 	.word	0x20000410

08002d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d48:	f000 fe68 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d5e:	e003      	b.n	8002d68 <LoopCopyDataInit>

08002d60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d66:	3104      	adds	r1, #4

08002d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d68:	480a      	ldr	r0, [pc, #40]	; (8002d94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d70:	d3f6      	bcc.n	8002d60 <CopyDataInit>
  ldr r2, =_sbss
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d74:	e002      	b.n	8002d7c <LoopFillZerobss>

08002d76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d78:	f842 3b04 	str.w	r3, [r2], #4

08002d7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d80:	d3f9      	bcc.n	8002d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d82:	f7ff ffe5 	bl	8002d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d86:	f003 ff11 	bl	8006bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d8a:	f7fe fb3d 	bl	8001408 <main>
  bx lr
 8002d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d90:	08008288 	.word	0x08008288
  ldr r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d98:	200000e4 	.word	0x200000e4
  ldr r2, =_sbss
 8002d9c:	200000e8 	.word	0x200000e8
  ldr r3, = _ebss
 8002da0:	200005ec 	.word	0x200005ec

08002da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002da4:	e7fe      	b.n	8002da4 <ADC1_2_IRQHandler>
	...

08002da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_Init+0x28>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <HAL_Init+0x28>)
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db8:	2003      	movs	r0, #3
 8002dba:	f000 fc39 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f000 f808 	bl	8002dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc4:	f7ff fd9e 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000

08002dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_InitTick+0x54>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_InitTick+0x58>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4619      	mov	r1, r3
 8002de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fc51 	bl	800369a <HAL_SYSTICK_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00e      	b.n	8002e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b0f      	cmp	r3, #15
 8002e06:	d80a      	bhi.n	8002e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f000 fc19 	bl	8003646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_InitTick+0x5c>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000070 	.word	0x20000070
 8002e2c:	20000078 	.word	0x20000078
 8002e30:	20000074 	.word	0x20000074

08002e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_IncTick+0x1c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_IncTick+0x20>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <HAL_IncTick+0x20>)
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	20000078 	.word	0x20000078
 8002e54:	200005e8 	.word	0x200005e8

08002e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <HAL_GetTick+0x10>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	200005e8 	.word	0x200005e8

08002e6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0be      	b.n	800300c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fd5c 	bl	8002968 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fab7 	bl	8003424 <ADC_ConversionStop_Disable>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8099 	bne.w	8002ffa <HAL_ADC_Init+0x18e>
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 8095 	bne.w	8002ffa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed8:	f023 0302 	bic.w	r3, r3, #2
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7b1b      	ldrb	r3, [r3, #12]
 8002ef2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ef4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f04:	d003      	beq.n	8002f0e <HAL_ADC_Init+0xa2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_ADC_Init+0xa8>
 8002f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f12:	e000      	b.n	8002f16 <HAL_ADC_Init+0xaa>
 8002f14:	2300      	movs	r3, #0
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7d1b      	ldrb	r3, [r3, #20]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d119      	bne.n	8002f58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7b1b      	ldrb	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	035a      	lsls	r2, r3, #13
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e00b      	b.n	8002f58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_ADC_Init+0x1a8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d003      	beq.n	8002f92 <HAL_ADC_Init+0x126>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d104      	bne.n	8002f9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_ADC_Init+0x1ac>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd6:	e018      	b.n	800300a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f023 0312 	bic.w	r3, r3, #18
 8002fe0:	f043 0210 	orr.w	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff8:	e007      	b.n	800300a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	ffe1f7fd 	.word	0xffe1f7fd
 8003018:	ff1f0efe 	.word	0xff1f0efe

0800301c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Start+0x1a>
 8003032:	2302      	movs	r3, #2
 8003034:	e098      	b.n	8003168 <HAL_ADC_Start+0x14c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f99e 	bl	8003380 <ADC_Enable>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 8087 	bne.w	800315e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a41      	ldr	r2, [pc, #260]	; (8003170 <HAL_ADC_Start+0x154>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d105      	bne.n	800307a <HAL_ADC_Start+0x5e>
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_ADC_Start+0x158>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d026      	beq.n	80030e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800309c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030a4:	e01d      	b.n	80030e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <HAL_ADC_Start+0x158>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_Start+0xaa>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <HAL_ADC_Start+0x154>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <HAL_ADC_Start+0xc6>
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_ADC_Start+0x158>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f023 0206 	bic.w	r2, r3, #6
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030fa:	e002      	b.n	8003102 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0202 	mvn.w	r2, #2
 8003112:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800311e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003122:	d113      	bne.n	800314c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_ADC_Start+0x154>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d105      	bne.n	800313a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_ADC_Start+0x158>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	e00c      	b.n	8003166 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e003      	b.n	8003166 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40012800 	.word	0x40012800
 8003174:	40012400 	.word	0x40012400

08003178 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x20>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0dc      	b.n	800336a <HAL_ADC_ConfigChannel+0x1da>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	d81c      	bhi.n	80031fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b05      	subs	r3, #5
 80031d2:	221f      	movs	r2, #31
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	3b05      	subs	r3, #5
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
 80031f8:	e03c      	b.n	8003274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d81c      	bhi.n	800323c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b23      	subs	r3, #35	; 0x23
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	4019      	ands	r1, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	3b23      	subs	r3, #35	; 0x23
 800322e:	fa00 f203 	lsl.w	r2, r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
 800323a:	e01b      	b.n	8003274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b41      	subs	r3, #65	; 0x41
 800324e:	221f      	movs	r2, #31
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4019      	ands	r1, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	; 0x41
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b09      	cmp	r3, #9
 800327a:	d91c      	bls.n	80032b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	4019      	ands	r1, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6898      	ldr	r0, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	3b1e      	subs	r3, #30
 80032a8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e019      	b.n	80032ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	2207      	movs	r2, #7
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4019      	ands	r1, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6898      	ldr	r0, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	fa00 f203 	lsl.w	r2, r0, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d003      	beq.n	80032fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d132      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_ADC_ConfigChannel+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d125      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d126      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003320:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d11a      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_ADC_ConfigChannel+0x1e8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a13      	ldr	r2, [pc, #76]	; (800337c <HAL_ADC_ConfigChannel+0x1ec>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9a      	lsrs	r2, r3, #18
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003340:	e002      	b.n	8003348 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3b01      	subs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f9      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x1b2>
 800334e:	e007      	b.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012400 	.word	0x40012400
 8003378:	20000070 	.word	0x20000070
 800337c:	431bde83 	.word	0x431bde83

08003380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d039      	beq.n	8003412 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <ADC_Enable+0x9c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <ADC_Enable+0xa0>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033bc:	e002      	b.n	80033c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f9      	bne.n	80033be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ca:	f7ff fd45 	bl	8002e58 <HAL_GetTick>
 80033ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033d0:	e018      	b.n	8003404 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d2:	f7ff fd41 	bl	8002e58 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d911      	bls.n	8003404 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d1df      	bne.n	80033d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000070 	.word	0x20000070
 8003420:	431bde83 	.word	0x431bde83

08003424 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d127      	bne.n	800348e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800344e:	f7ff fd03 	bl	8002e58 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003454:	e014      	b.n	8003480 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003456:	f7ff fcff 	bl	8002e58 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d90d      	bls.n	8003480 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f043 0210 	orr.w	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e007      	b.n	8003490 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d0e3      	beq.n	8003456 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4906      	ldr	r1, [pc, #24]	; (8003530 <__NVIC_EnableIRQ+0x34>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff90 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff2d 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff42 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff90 	bl	8003588 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5f 	bl	8003534 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff35 	bl	80034fc <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b08b      	sub	sp, #44	; 0x2c
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	e169      	b.n	800399c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036c8:	2201      	movs	r2, #1
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f040 8158 	bne.w	8003996 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a9a      	ldr	r2, [pc, #616]	; (8003954 <HAL_GPIO_Init+0x2a0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d05e      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 80036f0:	4a98      	ldr	r2, [pc, #608]	; (8003954 <HAL_GPIO_Init+0x2a0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d875      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 80036f6:	4a98      	ldr	r2, [pc, #608]	; (8003958 <HAL_GPIO_Init+0x2a4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d058      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 80036fc:	4a96      	ldr	r2, [pc, #600]	; (8003958 <HAL_GPIO_Init+0x2a4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d86f      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 8003702:	4a96      	ldr	r2, [pc, #600]	; (800395c <HAL_GPIO_Init+0x2a8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d052      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 8003708:	4a94      	ldr	r2, [pc, #592]	; (800395c <HAL_GPIO_Init+0x2a8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d869      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 800370e:	4a94      	ldr	r2, [pc, #592]	; (8003960 <HAL_GPIO_Init+0x2ac>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04c      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 8003714:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_GPIO_Init+0x2ac>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d863      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 800371a:	4a92      	ldr	r2, [pc, #584]	; (8003964 <HAL_GPIO_Init+0x2b0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d046      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 8003720:	4a90      	ldr	r2, [pc, #576]	; (8003964 <HAL_GPIO_Init+0x2b0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d85d      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 8003726:	2b12      	cmp	r3, #18
 8003728:	d82a      	bhi.n	8003780 <HAL_GPIO_Init+0xcc>
 800372a:	2b12      	cmp	r3, #18
 800372c:	d859      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <HAL_GPIO_Init+0x80>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	080037af 	.word	0x080037af
 8003738:	08003789 	.word	0x08003789
 800373c:	0800379b 	.word	0x0800379b
 8003740:	080037dd 	.word	0x080037dd
 8003744:	080037e3 	.word	0x080037e3
 8003748:	080037e3 	.word	0x080037e3
 800374c:	080037e3 	.word	0x080037e3
 8003750:	080037e3 	.word	0x080037e3
 8003754:	080037e3 	.word	0x080037e3
 8003758:	080037e3 	.word	0x080037e3
 800375c:	080037e3 	.word	0x080037e3
 8003760:	080037e3 	.word	0x080037e3
 8003764:	080037e3 	.word	0x080037e3
 8003768:	080037e3 	.word	0x080037e3
 800376c:	080037e3 	.word	0x080037e3
 8003770:	080037e3 	.word	0x080037e3
 8003774:	080037e3 	.word	0x080037e3
 8003778:	08003791 	.word	0x08003791
 800377c:	080037a5 	.word	0x080037a5
 8003780:	4a79      	ldr	r2, [pc, #484]	; (8003968 <HAL_GPIO_Init+0x2b4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003786:	e02c      	b.n	80037e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	623b      	str	r3, [r7, #32]
          break;
 800378e:	e029      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	623b      	str	r3, [r7, #32]
          break;
 8003798:	e024      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	3308      	adds	r3, #8
 80037a0:	623b      	str	r3, [r7, #32]
          break;
 80037a2:	e01f      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	330c      	adds	r3, #12
 80037aa:	623b      	str	r3, [r7, #32]
          break;
 80037ac:	e01a      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037b6:	2304      	movs	r3, #4
 80037b8:	623b      	str	r3, [r7, #32]
          break;
 80037ba:	e013      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c4:	2308      	movs	r3, #8
 80037c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	611a      	str	r2, [r3, #16]
          break;
 80037ce:	e009      	b.n	80037e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037d0:	2308      	movs	r3, #8
 80037d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	615a      	str	r2, [r3, #20]
          break;
 80037da:	e003      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
          break;
 80037e0:	e000      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          break;
 80037e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2bff      	cmp	r3, #255	; 0xff
 80037e8:	d801      	bhi.n	80037ee <HAL_GPIO_Init+0x13a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	e001      	b.n	80037f2 <HAL_GPIO_Init+0x13e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2bff      	cmp	r3, #255	; 0xff
 80037f8:	d802      	bhi.n	8003800 <HAL_GPIO_Init+0x14c>
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	e002      	b.n	8003806 <HAL_GPIO_Init+0x152>
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	3b08      	subs	r3, #8
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	210f      	movs	r1, #15
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	401a      	ands	r2, r3
 8003818:	6a39      	ldr	r1, [r7, #32]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80b1 	beq.w	8003996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <HAL_GPIO_Init+0x2b8>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4a4c      	ldr	r2, [pc, #304]	; (800396c <HAL_GPIO_Init+0x2b8>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6193      	str	r3, [r2, #24]
 8003840:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_GPIO_Init+0x2b8>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800384c:	4a48      	ldr	r2, [pc, #288]	; (8003970 <HAL_GPIO_Init+0x2bc>)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003858:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <HAL_GPIO_Init+0x2c0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_GPIO_Init+0x1ec>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <HAL_GPIO_Init+0x2c4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00d      	beq.n	800389c <HAL_GPIO_Init+0x1e8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3e      	ldr	r2, [pc, #248]	; (800397c <HAL_GPIO_Init+0x2c8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <HAL_GPIO_Init+0x1e4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <HAL_GPIO_Init+0x2cc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_GPIO_Init+0x1e0>
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003894:	2304      	movs	r3, #4
 8003896:	e004      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003898:	2302      	movs	r3, #2
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 80038a0:	2300      	movs	r3, #0
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	f002 0203 	and.w	r2, r2, #3
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	4093      	lsls	r3, r2
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038b2:	492f      	ldr	r1, [pc, #188]	; (8003970 <HAL_GPIO_Init+0x2bc>)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	492c      	ldr	r1, [pc, #176]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	4928      	ldr	r1, [pc, #160]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	4922      	ldr	r1, [pc, #136]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	43db      	mvns	r3, r3
 800390a:	491e      	ldr	r1, [pc, #120]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 800390c:	4013      	ands	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	4918      	ldr	r1, [pc, #96]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	43db      	mvns	r3, r3
 8003932:	4914      	ldr	r1, [pc, #80]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 8003934:	4013      	ands	r3, r2
 8003936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d021      	beq.n	8003988 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_GPIO_Init+0x2d0>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	60cb      	str	r3, [r1, #12]
 8003950:	e021      	b.n	8003996 <HAL_GPIO_Init+0x2e2>
 8003952:	bf00      	nop
 8003954:	10320000 	.word	0x10320000
 8003958:	10310000 	.word	0x10310000
 800395c:	10220000 	.word	0x10220000
 8003960:	10210000 	.word	0x10210000
 8003964:	10120000 	.word	0x10120000
 8003968:	10110000 	.word	0x10110000
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000
 8003974:	40010800 	.word	0x40010800
 8003978:	40010c00 	.word	0x40010c00
 800397c:	40011000 	.word	0x40011000
 8003980:	40011400 	.word	0x40011400
 8003984:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_GPIO_Init+0x304>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	43db      	mvns	r3, r3
 8003990:	4909      	ldr	r1, [pc, #36]	; (80039b8 <HAL_GPIO_Init+0x304>)
 8003992:	4013      	ands	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	3301      	adds	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f47f ae8e 	bne.w	80036c8 <HAL_GPIO_Init+0x14>
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	372c      	adds	r7, #44	; 0x2c
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e001      	b.n	80039de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	807b      	strh	r3, [r7, #2]
 80039f6:	4613      	mov	r3, r2
 80039f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039fa:	787b      	ldrb	r3, [r7, #1]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a06:	e003      	b.n	8003a10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	041a      	lsls	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f806 	bl	8003a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e12b      	b.n	8003cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe ffaa 	bl	80029e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f001 fba0 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8003ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4a81      	ldr	r2, [pc, #516]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d807      	bhi.n	8003ae4 <HAL_I2C_Init+0x84>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <HAL_I2C_Init+0x278>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e006      	b.n	8003af2 <HAL_I2C_Init+0x92>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a7d      	ldr	r2, [pc, #500]	; (8003cdc <HAL_I2C_Init+0x27c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	bf94      	ite	ls
 8003aec:	2301      	movls	r3, #1
 8003aee:	2300      	movhi	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0e7      	b.n	8003cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a78      	ldr	r2, [pc, #480]	; (8003ce0 <HAL_I2C_Init+0x280>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0c9b      	lsrs	r3, r3, #18
 8003b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d802      	bhi.n	8003b34 <HAL_I2C_Init+0xd4>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3301      	adds	r3, #1
 8003b32:	e009      	b.n	8003b48 <HAL_I2C_Init+0xe8>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <HAL_I2C_Init+0x284>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	3301      	adds	r3, #1
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	495c      	ldr	r1, [pc, #368]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d819      	bhi.n	8003b9c <HAL_I2C_Init+0x13c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e59      	subs	r1, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_I2C_Init+0x138>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1e59      	subs	r1, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b96:	e051      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e04f      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d111      	bne.n	8003bc8 <HAL_I2C_Init+0x168>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	440b      	add	r3, r1
 8003bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e012      	b.n	8003bee <HAL_I2C_Init+0x18e>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Init+0x196>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e022      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10e      	bne.n	8003c1c <HAL_I2C_Init+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1e58      	subs	r0, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	440b      	add	r3, r1
 8003c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	e00f      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	0099      	lsls	r1, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	6809      	ldr	r1, [r1, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6911      	ldr	r1, [r2, #16]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68d2      	ldr	r2, [r2, #12]
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	000186a0 	.word	0x000186a0
 8003cd8:	001e847f 	.word	0x001e847f
 8003cdc:	003d08ff 	.word	0x003d08ff
 8003ce0:	431bde83 	.word	0x431bde83
 8003ce4:	10624dd3 	.word	0x10624dd3

08003ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d02:	f7ff f8a9 	bl	8002e58 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	f040 80d9 	bne.w	8003ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2319      	movs	r3, #25
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	496d      	ldr	r1, [pc, #436]	; (8003ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fcc1 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0cc      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Mem_Write+0x56>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0c5      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d007      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da6:	88f8      	ldrh	r0, [r7, #6]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4603      	mov	r3, r0
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 faf8 	bl	80043ac <I2C_RequestMemoryWrite>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d052      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e081      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fd42 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d11b      	bne.n	8003e68 <HAL_I2C_Mem_Write+0x180>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d017      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1aa      	bne.n	8003dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fd2e 	bl	80048d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e016      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	00100002 	.word	0x00100002
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08c      	sub	sp, #48	; 0x30
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	817b      	strh	r3, [r7, #10]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	813b      	strh	r3, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efa:	f7fe ffad 	bl	8002e58 <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	f040 8244 	bne.w	8004396 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	2319      	movs	r3, #25
 8003f14:	2201      	movs	r2, #1
 8003f16:	4982      	ldr	r1, [pc, #520]	; (8004120 <HAL_I2C_Mem_Read+0x244>)
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fbc5 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	e237      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_I2C_Mem_Read+0x5a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e230      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d007      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a62      	ldr	r2, [pc, #392]	; (8004124 <HAL_I2C_Mem_Read+0x248>)
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f9e:	88f8      	ldrh	r0, [r7, #6]
 8003fa0:	893a      	ldrh	r2, [r7, #8]
 8003fa2:	8979      	ldrh	r1, [r7, #10]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	4603      	mov	r3, r0
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fa92 	bl	80044d8 <I2C_RequestMemoryRead>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e1ec      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d113      	bne.n	8003fee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e1c0      	b.n	8004370 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d11e      	bne.n	8004034 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004006:	b672      	cpsid	i
}
 8004008:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004030:	b662      	cpsie	i
}
 8004032:	e035      	b.n	80040a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11e      	bne.n	800407a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800404c:	b672      	cpsid	i
}
 800404e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004076:	b662      	cpsie	i
}
 8004078:	e012      	b.n	80040a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004088:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040a0:	e166      	b.n	8004370 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	f200 811f 	bhi.w	80042ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d123      	bne.n	80040fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fc4d 	bl	8004958 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e167      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040fa:	e139      	b.n	8004370 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	2b02      	cmp	r3, #2
 8004102:	d152      	bne.n	80041aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	2200      	movs	r2, #0
 800410c:	4906      	ldr	r1, [pc, #24]	; (8004128 <HAL_I2C_Mem_Read+0x24c>)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 faca 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e13c      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
 800411e:	bf00      	nop
 8004120:	00100002 	.word	0x00100002
 8004124:	ffff0000 	.word	0xffff0000
 8004128:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
}
 800412e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004172:	b662      	cpsie	i
}
 8004174:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a8:	e0e2      	b.n	8004370 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2200      	movs	r2, #0
 80041b2:	497b      	ldr	r1, [pc, #492]	; (80043a0 <HAL_I2C_Mem_Read+0x4c4>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fa77 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0e9      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
}
 80041d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800420a:	4b66      	ldr	r3, [pc, #408]	; (80043a4 <HAL_I2C_Mem_Read+0x4c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	08db      	lsrs	r3, r3, #3
 8004210:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_I2C_Mem_Read+0x4cc>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0a1a      	lsrs	r2, r3, #8
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00da      	lsls	r2, r3, #3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	3b01      	subs	r3, #1
 8004228:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d118      	bne.n	8004262 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004252:	b662      	cpsie	i
}
 8004254:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e09a      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d1d9      	bne.n	8004224 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042b2:	b662      	cpsie	i
}
 80042b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042e8:	e042      	b.n	8004370 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fb32 	bl	8004958 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e04c      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b04      	cmp	r3, #4
 800433c:	d118      	bne.n	8004370 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f ae94 	bne.w	80040a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	00010004 	.word	0x00010004
 80043a4:	20000070 	.word	0x20000070
 80043a8:	14f8b589 	.word	0x14f8b589

080043ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	460b      	mov	r3, r1
 80043c0:	813b      	strh	r3, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	2200      	movs	r2, #0
 80043de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f960 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fc:	d103      	bne.n	8004406 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e05f      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800440a:	897b      	ldrh	r3, [r7, #10]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	492d      	ldr	r1, [pc, #180]	; (80044d4 <I2C_RequestMemoryWrite+0x128>)
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f998 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e04c      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	6a39      	ldr	r1, [r7, #32]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa02 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b04      	cmp	r3, #4
 800445c:	d107      	bne.n	800446e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e02b      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]
 8004482:	e021      	b.n	80044c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	b29b      	uxth	r3, r3
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f9dc 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d107      	bne.n	80044ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e005      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044be:	893b      	ldrh	r3, [r7, #8]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	00010002 	.word	0x00010002

080044d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2200      	movs	r2, #0
 800451a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f8c2 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d103      	bne.n	8004542 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0aa      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	4952      	ldr	r1, [pc, #328]	; (80046a4 <I2C_RequestMemoryRead+0x1cc>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f8fa 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e097      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f964 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b04      	cmp	r3, #4
 8004598:	d107      	bne.n	80045aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e076      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	611a      	str	r2, [r3, #16]
 80045be:	e021      	b.n	8004604 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d0:	6a39      	ldr	r1, [r7, #32]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f93e 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e050      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fa:	893b      	ldrh	r3, [r7, #8]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004606:	6a39      	ldr	r1, [r7, #32]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f923 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e035      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2200      	movs	r2, #0
 8004648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f82b 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d103      	bne.n	8004670 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e013      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004674:	897b      	ldrh	r3, [r7, #10]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	4906      	ldr	r1, [pc, #24]	; (80046a4 <I2C_RequestMemoryRead+0x1cc>)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f863 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00010002 	.word	0x00010002

080046a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b8:	e025      	b.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d021      	beq.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fe fbc9 	bl	8002e58 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e023      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10d      	bne.n	800472c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	e00c      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d0b6      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004764:	e051      	b.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004774:	d123      	bne.n	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004784:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f043 0204 	orr.w	r2, r3, #4
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e046      	b.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d021      	beq.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c6:	f7fe fb47 	bl	8002e58 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e020      	b.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10c      	bne.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e00b      	b.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d18d      	bne.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004860:	e02d      	b.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f8ce 	bl	8004a04 <I2C_IsAcknowledgeFailed>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e02d      	b.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d021      	beq.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fe faed 	bl	8002e58 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e007      	b.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d1ca      	bne.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e2:	e02d      	b.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f88d 	bl	8004a04 <I2C_IsAcknowledgeFailed>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e02d      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d021      	beq.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fc:	f7fe faac 	bl	8002e58 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d116      	bne.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e007      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d1ca      	bne.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004964:	e042      	b.n	80049ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d119      	bne.n	80049a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0210 	mvn.w	r2, #16
 800497c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e029      	b.n	80049fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a8:	f7fe fa56 	bl	8002e58 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d116      	bne.n	80049ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e007      	b.n	80049fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d1b5      	bne.n	8004966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d11b      	bne.n	8004a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e26c      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8087 	beq.w	8004b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a80:	4b92      	ldr	r3, [pc, #584]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a8c:	4b8f      	ldr	r3, [pc, #572]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d112      	bne.n	8004abe <HAL_RCC_OscConfig+0x5e>
 8004a98:	4b8c      	ldr	r3, [pc, #560]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d10b      	bne.n	8004abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa6:	4b89      	ldr	r3, [pc, #548]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d06c      	beq.n	8004b8c <HAL_RCC_OscConfig+0x12c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d168      	bne.n	8004b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e246      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d106      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x76>
 8004ac8:	4b80      	ldr	r3, [pc, #512]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7f      	ldr	r2, [pc, #508]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e02e      	b.n	8004b34 <HAL_RCC_OscConfig+0xd4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x98>
 8004ade:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7a      	ldr	r2, [pc, #488]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b78      	ldr	r3, [pc, #480]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a77      	ldr	r2, [pc, #476]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e01d      	b.n	8004b34 <HAL_RCC_OscConfig+0xd4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0xbc>
 8004b02:	4b72      	ldr	r3, [pc, #456]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a71      	ldr	r2, [pc, #452]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a6e      	ldr	r2, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0xd4>
 8004b1c:	4b6b      	ldr	r3, [pc, #428]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a67      	ldr	r2, [pc, #412]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fe f98c 	bl	8002e58 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fe f988 	bl	8002e58 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e1fa      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b5d      	ldr	r3, [pc, #372]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0xe4>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe f978 	bl	8002e58 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fe f974 	bl	8002e58 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1e6      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	4b53      	ldr	r3, [pc, #332]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x10c>
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d063      	beq.n	8004c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b9a:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ba6:	4b49      	ldr	r3, [pc, #292]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d11c      	bne.n	8004bec <HAL_RCC_OscConfig+0x18c>
 8004bb2:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d116      	bne.n	8004bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbe:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x176>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e1ba      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4939      	ldr	r1, [pc, #228]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	e03a      	b.n	8004c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d020      	beq.n	8004c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf4:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fe f92d 	bl	8002e58 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fe f929 	bl	8002e58 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e19b      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4927      	ldr	r1, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
 8004c34:	e015      	b.n	8004c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c36:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <HAL_RCC_OscConfig+0x270>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fe f90c 	bl	8002e58 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c44:	f7fe f908 	bl	8002e58 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e17a      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03a      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d019      	beq.n	8004caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <HAL_RCC_OscConfig+0x274>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7c:	f7fe f8ec 	bl	8002e58 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fe f8e8 	bl	8002e58 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e15a      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f000 fad8 	bl	8005258 <RCC_Delay>
 8004ca8:	e01c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <HAL_RCC_OscConfig+0x274>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb0:	f7fe f8d2 	bl	8002e58 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb6:	e00f      	b.n	8004cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb8:	f7fe f8ce 	bl	8002e58 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d908      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e140      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	42420000 	.word	0x42420000
 8004cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd8:	4b9e      	ldr	r3, [pc, #632]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e9      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a6 	beq.w	8004e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf6:	4b97      	ldr	r3, [pc, #604]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	4b94      	ldr	r3, [pc, #592]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4a93      	ldr	r2, [pc, #588]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	61d3      	str	r3, [r2, #28]
 8004d0e:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b8e      	ldr	r3, [pc, #568]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b8b      	ldr	r3, [pc, #556]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a8a      	ldr	r2, [pc, #552]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fe f88f 	bl	8002e58 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fe f88b 	bl	8002e58 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0fd      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <HAL_RCC_OscConfig+0x312>
 8004d64:	4b7b      	ldr	r3, [pc, #492]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	4a7a      	ldr	r2, [pc, #488]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6213      	str	r3, [r2, #32]
 8004d70:	e02d      	b.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x334>
 8004d7a:	4b76      	ldr	r3, [pc, #472]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4a75      	ldr	r2, [pc, #468]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	6213      	str	r3, [r2, #32]
 8004d86:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4a72      	ldr	r2, [pc, #456]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	6213      	str	r3, [r2, #32]
 8004d92:	e01c      	b.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b05      	cmp	r3, #5
 8004d9a:	d10c      	bne.n	8004db6 <HAL_RCC_OscConfig+0x356>
 8004d9c:	4b6d      	ldr	r3, [pc, #436]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	4a6c      	ldr	r2, [pc, #432]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	6213      	str	r3, [r2, #32]
 8004da8:	4b6a      	ldr	r3, [pc, #424]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	4a69      	ldr	r2, [pc, #420]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6213      	str	r3, [r2, #32]
 8004db4:	e00b      	b.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004db6:	4b67      	ldr	r3, [pc, #412]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a66      	ldr	r2, [pc, #408]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6213      	str	r3, [r2, #32]
 8004dc2:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d015      	beq.n	8004e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fe f83f 	bl	8002e58 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fe f83b 	bl	8002e58 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0ab      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ee      	beq.n	8004dde <HAL_RCC_OscConfig+0x37e>
 8004e00:	e014      	b.n	8004e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e02:	f7fe f829 	bl	8002e58 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fe f825 	bl	8002e58 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e095      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	4b4c      	ldr	r3, [pc, #304]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ee      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e32:	4b48      	ldr	r3, [pc, #288]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	4a47      	ldr	r2, [pc, #284]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8081 	beq.w	8004f4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e48:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d061      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d146      	bne.n	8004eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_OscConfig+0x4fc>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fd fff9 	bl	8002e58 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd fff5 	bl	8002e58 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e067      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7c:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d108      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e92:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	492d      	ldr	r1, [pc, #180]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a19      	ldr	r1, [r3, #32]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	4927      	ldr	r1, [pc, #156]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b27      	ldr	r3, [pc, #156]	; (8004f5c <HAL_RCC_OscConfig+0x4fc>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fd ffc9 	bl	8002e58 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fd ffc5 	bl	8002e58 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e037      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004edc:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x46a>
 8004ee8:	e02f      	b.n	8004f4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eea:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <HAL_RCC_OscConfig+0x4fc>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fd ffb2 	bl	8002e58 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fd ffae 	bl	8002e58 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e020      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x498>
 8004f16:	e018      	b.n	8004f4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e013      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_OscConfig+0x4f4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42420060 	.word	0x42420060

08004f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0d0      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d910      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b67      	ldr	r3, [pc, #412]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 0207 	bic.w	r2, r3, #7
 8004f8a:	4965      	ldr	r1, [pc, #404]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b63      	ldr	r3, [pc, #396]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0b8      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fbc:	4b59      	ldr	r3, [pc, #356]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a58      	ldr	r2, [pc, #352]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd4:	4b53      	ldr	r3, [pc, #332]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a52      	ldr	r2, [pc, #328]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe0:	4b50      	ldr	r3, [pc, #320]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	494d      	ldr	r1, [pc, #308]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d040      	beq.n	8005080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b47      	ldr	r3, [pc, #284]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d115      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e07f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e073      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e06b      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503e:	4b39      	ldr	r3, [pc, #228]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f023 0203 	bic.w	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4936      	ldr	r1, [pc, #216]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005050:	f7fd ff02 	bl	8002e58 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	e00a      	b.n	800506e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005058:	f7fd fefe 	bl	8002e58 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	; 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e053      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 020c 	and.w	r2, r3, #12
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d1eb      	bne.n	8005058 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d210      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 0207 	bic.w	r2, r3, #7
 8005096:	4922      	ldr	r1, [pc, #136]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	4313      	orrs	r3, r2
 800509c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e032      	b.n	8005116 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4916      	ldr	r1, [pc, #88]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	490e      	ldr	r1, [pc, #56]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ee:	f000 f821 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	490a      	ldr	r1, [pc, #40]	; (8005128 <HAL_RCC_ClockConfig+0x1c8>)
 8005100:	5ccb      	ldrb	r3, [r1, r3]
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	4a09      	ldr	r2, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1cc>)
 8005108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_ClockConfig+0x1d0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fd fe60 	bl	8002dd4 <HAL_InitTick>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40022000 	.word	0x40022000
 8005124:	40021000 	.word	0x40021000
 8005128:	0800808c 	.word	0x0800808c
 800512c:	20000070 	.word	0x20000070
 8005130:	20000074 	.word	0x20000074

08005134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005134:	b490      	push	{r4, r7}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800513c:	1d3c      	adds	r4, r7, #4
 800513e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005144:	f240 2301 	movw	r3, #513	; 0x201
 8005148:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800515e:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 030c 	and.w	r3, r3, #12
 800516a:	2b04      	cmp	r3, #4
 800516c:	d002      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x40>
 800516e:	2b08      	cmp	r3, #8
 8005170:	d003      	beq.n	800517a <HAL_RCC_GetSysClockFreq+0x46>
 8005172:	e02d      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005176:	623b      	str	r3, [r7, #32]
      break;
 8005178:	e02d      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	0c9b      	lsrs	r3, r3, #18
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005186:	4413      	add	r3, r2
 8005188:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800518c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	0c5b      	lsrs	r3, r3, #17
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051a6:	4413      	add	r3, r2
 80051a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b2:	fb02 f203 	mul.w	r2, r2, r3
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	e004      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4a0b      	ldr	r2, [pc, #44]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051c4:	fb02 f303 	mul.w	r3, r2, r3
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	623b      	str	r3, [r7, #32]
      break;
 80051ce:	e002      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d2:	623b      	str	r3, [r7, #32]
      break;
 80051d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d6:	6a3b      	ldr	r3, [r7, #32]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc90      	pop	{r4, r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	08007e9c 	.word	0x08007e9c
 80051e8:	40021000 	.word	0x40021000
 80051ec:	007a1200 	.word	0x007a1200
 80051f0:	003d0900 	.word	0x003d0900

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <HAL_RCC_GetHCLKFreq+0x10>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000070 	.word	0x20000070

08005208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800520c:	f7ff fff2 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4903      	ldr	r1, [pc, #12]	; (800522c <HAL_RCC_GetPCLK1Freq+0x24>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40021000 	.word	0x40021000
 800522c:	0800809c 	.word	0x0800809c

08005230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005234:	f7ff ffde 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0adb      	lsrs	r3, r3, #11
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	0800809c 	.word	0x0800809c

08005258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <RCC_Delay+0x34>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <RCC_Delay+0x38>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005274:	bf00      	nop
  }
  while (Delay --);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	60fa      	str	r2, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f9      	bne.n	8005274 <RCC_Delay+0x1c>
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	20000070 	.word	0x20000070
 8005290:	10624dd3 	.word	0x10624dd3

08005294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d07d      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80052b0:	2300      	movs	r3, #0
 80052b2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b4:	4b4f      	ldr	r3, [pc, #316]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10d      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c0:	4b4c      	ldr	r3, [pc, #304]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	4a4b      	ldr	r2, [pc, #300]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ca:	61d3      	str	r3, [r2, #28]
 80052cc:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d8:	2301      	movs	r3, #1
 80052da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	4b46      	ldr	r3, [pc, #280]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d118      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e8:	4b43      	ldr	r3, [pc, #268]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a42      	ldr	r2, [pc, #264]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f4:	f7fd fdb0 	bl	8002e58 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fa:	e008      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fd fdac 	bl	8002e58 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	; 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e06d      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b3a      	ldr	r3, [pc, #232]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800531a:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d02e      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	429a      	cmp	r2, r3
 8005336:	d027      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005338:	4b2e      	ldr	r3, [pc, #184]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005348:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800534e:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535e:	f7fd fd7b 	bl	8002e58 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005364:	e00a      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005366:	f7fd fd77 	bl	8002e58 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	; 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e036      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ee      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4917      	ldr	r1, [pc, #92]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005396:	4313      	orrs	r3, r2
 8005398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	490b      	ldr	r1, [pc, #44]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4904      	ldr	r1, [pc, #16]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40007000 	.word	0x40007000
 80053fc:	42420440 	.word	0x42420440

08005400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e076      	b.n	8005500 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005422:	d009      	beq.n	8005438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
 800542a:	e005      	b.n	8005438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fb02 	bl	8002a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	ea42 0103 	orr.w	r1, r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	0c1a      	lsrs	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f002 0204 	and.w	r2, r2, #4
 80054de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_SPI_Transmit+0x22>
 8005526:	2302      	movs	r3, #2
 8005528:	e126      	b.n	8005778 <HAL_SPI_Transmit+0x270>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005532:	f7fd fc91 	bl	8002e58 <HAL_GetTick>
 8005536:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d002      	beq.n	800554e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005548:	2302      	movs	r3, #2
 800554a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800554c:	e10b      	b.n	8005766 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_Transmit+0x52>
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800555e:	e102      	b.n	8005766 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2203      	movs	r2, #3
 8005564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a6:	d10f      	bne.n	80055c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d007      	beq.n	80055e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d14b      	bne.n	8005688 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_SPI_Transmit+0xf6>
 80055f8:	8afb      	ldrh	r3, [r7, #22]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d13e      	bne.n	800567c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	881a      	ldrh	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005622:	e02b      	b.n	800567c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d112      	bne.n	8005658 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	1c9a      	adds	r2, r3, #2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	86da      	strh	r2, [r3, #54]	; 0x36
 8005656:	e011      	b.n	800567c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005658:	f7fd fbfe 	bl	8002e58 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d803      	bhi.n	8005670 <HAL_SPI_Transmit+0x168>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d102      	bne.n	8005676 <HAL_SPI_Transmit+0x16e>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800567a:	e074      	b.n	8005766 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ce      	bne.n	8005624 <HAL_SPI_Transmit+0x11c>
 8005686:	e04c      	b.n	8005722 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_SPI_Transmit+0x18e>
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d140      	bne.n	8005718 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	7812      	ldrb	r2, [r2, #0]
 80056a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056bc:	e02c      	b.n	8005718 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d113      	bne.n	80056f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80056f2:	e011      	b.n	8005718 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f4:	f7fd fbb0 	bl	8002e58 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d803      	bhi.n	800570c <HAL_SPI_Transmit+0x204>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d102      	bne.n	8005712 <HAL_SPI_Transmit+0x20a>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005716:	e026      	b.n	8005766 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1cd      	bne.n	80056be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f8b2 	bl	8005890 <SPI_EndRxTxTransaction>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e000      	b.n	8005766 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005776:	7ffb      	ldrb	r3, [r7, #31]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005790:	f7fd fb62 	bl	8002e58 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057a0:	f7fd fb5a 	bl	8002e58 <HAL_GetTick>
 80057a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057a6:	4b39      	ldr	r3, [pc, #228]	; (800588c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	015b      	lsls	r3, r3, #5
 80057ac:	0d1b      	lsrs	r3, r3, #20
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057b6:	e054      	b.n	8005862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d050      	beq.n	8005862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057c0:	f7fd fb4a 	bl	8002e58 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d902      	bls.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d13d      	bne.n	8005852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d111      	bne.n	8005814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f8:	d004      	beq.n	8005804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d107      	bne.n	8005814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581c:	d10f      	bne.n	800583e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e017      	b.n	8005882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	3b01      	subs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	429a      	cmp	r2, r3
 800587e:	d19b      	bne.n	80057b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000070 	.word	0x20000070

08005890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff6a 	bl	8005780 <SPI_WaitFlagStateUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e000      	b.n	80058c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e041      	b.n	8005962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fd f95c 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f000 fd58 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e03a      	b.n	80059fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIM_Base_Start_IT+0x98>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x58>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d009      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x58>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <HAL_TIM_Base_Start_IT+0x9c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x58>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_TIM_Base_Start_IT+0xa0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d111      	bne.n	80059e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b06      	cmp	r3, #6
 80059d4:	d010      	beq.n	80059f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e6:	e007      	b.n	80059f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800

08005a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e041      	b.n	8005aa6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f839 	bl	8005aae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f000 fcb6 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0x24>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e022      	b.n	8005b2a <HAL_TIM_PWM_Start+0x6a>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d109      	bne.n	8005afe <HAL_TIM_PWM_Start+0x3e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	e015      	b.n	8005b2a <HAL_TIM_PWM_Start+0x6a>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d109      	bne.n	8005b18 <HAL_TIM_PWM_Start+0x58>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e008      	b.n	8005b2a <HAL_TIM_PWM_Start+0x6a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e05e      	b.n	8005bf0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_PWM_Start+0x82>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b40:	e013      	b.n	8005b6a <HAL_TIM_PWM_Start+0xaa>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_PWM_Start+0x92>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b50:	e00b      	b.n	8005b6a <HAL_TIM_PWM_Start+0xaa>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xa2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b60:	e003      	b.n	8005b6a <HAL_TIM_PWM_Start+0xaa>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fea4 	bl	80068c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_TIM_PWM_Start+0x138>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIM_PWM_Start+0x138>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0xfa>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0xfa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_TIM_PWM_Start+0x13c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0xfa>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <HAL_TIM_PWM_Start+0x140>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d010      	beq.n	8005bee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	e007      	b.n	8005bee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800

08005c04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e093      	b.n	8005d40 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fc ff55 	bl	8002adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c48:	f023 0307 	bic.w	r3, r3, #7
 8005c4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f000 fbb1 	bl	80063c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	4313      	orrs	r3, r2
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ca4:	f023 030c 	bic.w	r3, r3, #12
 8005ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	031b      	lsls	r3, r3, #12
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d110      	bne.n	8005d9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d102      	bne.n	8005d84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d7e:	7b7b      	ldrb	r3, [r7, #13]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d001      	beq.n	8005d88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e069      	b.n	8005e5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d98:	e031      	b.n	8005dfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d110      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d102      	bne.n	8005dac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005da6:	7b3b      	ldrb	r3, [r7, #12]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d001      	beq.n	8005db0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e055      	b.n	8005e5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc0:	e01d      	b.n	8005dfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d108      	bne.n	8005dda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d105      	bne.n	8005dda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dce:	7b7b      	ldrb	r3, [r7, #13]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d102      	bne.n	8005dda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dd4:	7b3b      	ldrb	r3, [r7, #12]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d001      	beq.n	8005dde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e03e      	b.n	8005e5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_TIM_Encoder_Start+0xc4>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d008      	beq.n	8005e1c <HAL_TIM_Encoder_Start+0xd4>
 8005e0a:	e00f      	b.n	8005e2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2201      	movs	r2, #1
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fd53 	bl	80068c0 <TIM_CCxChannelCmd>
      break;
 8005e1a:	e016      	b.n	8005e4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	2104      	movs	r1, #4
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fd4b 	bl	80068c0 <TIM_CCxChannelCmd>
      break;
 8005e2a:	e00e      	b.n	8005e4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2201      	movs	r2, #1
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fd43 	bl	80068c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	2104      	movs	r1, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fd3c 	bl	80068c0 <TIM_CCxChannelCmd>
      break;
 8005e48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0202 	mvn.w	r2, #2
 8005e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa6f 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa62 	bl	8006378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa71 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0204 	mvn.w	r2, #4
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa45 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa38 	bl	8006378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa47 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0208 	mvn.w	r2, #8
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa1b 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa0e 	bl	8006378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa1d 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d122      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d11b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0210 	mvn.w	r2, #16
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2208      	movs	r2, #8
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9f1 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9e4 	bl	8006378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9f3 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0201 	mvn.w	r2, #1
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb f884 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fce1 	bl	80069d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9b7 	bl	80063ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b20      	cmp	r3, #32
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b20      	cmp	r3, #32
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0220 	mvn.w	r2, #32
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fcac 	bl	80069c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800608a:	2302      	movs	r3, #2
 800608c:	e0ac      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	f200 809f 	bhi.w	80061dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080061dd 	.word	0x080061dd
 80060ac:	080061dd 	.word	0x080061dd
 80060b0:	080061dd 	.word	0x080061dd
 80060b4:	08006119 	.word	0x08006119
 80060b8:	080061dd 	.word	0x080061dd
 80060bc:	080061dd 	.word	0x080061dd
 80060c0:	080061dd 	.word	0x080061dd
 80060c4:	0800615b 	.word	0x0800615b
 80060c8:	080061dd 	.word	0x080061dd
 80060cc:	080061dd 	.word	0x080061dd
 80060d0:	080061dd 	.word	0x080061dd
 80060d4:	0800619b 	.word	0x0800619b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f9d0 	bl	8006484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0208 	orr.w	r2, r2, #8
 80060f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	619a      	str	r2, [r3, #24]
      break;
 8006116:	e062      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fa16 	bl	8006550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6999      	ldr	r1, [r3, #24]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	021a      	lsls	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	619a      	str	r2, [r3, #24]
      break;
 8006158:	e041      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fa5f 	bl	8006624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0208 	orr.w	r2, r2, #8
 8006174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0204 	bic.w	r2, r2, #4
 8006184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
      break;
 8006198:	e021      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 faa9 	bl	80066f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69d9      	ldr	r1, [r3, #28]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	021a      	lsls	r2, r3, #8
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	61da      	str	r2, [r3, #28]
      break;
 80061da:	e000      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80061dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_TIM_ConfigClockSource+0x18>
 8006204:	2302      	movs	r3, #2
 8006206:	e0b3      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x180>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d03e      	beq.n	80062c0 <HAL_TIM_ConfigClockSource+0xd0>
 8006242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006246:	f200 8087 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x168>
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	f000 8085 	beq.w	800635c <HAL_TIM_ConfigClockSource+0x16c>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d87f      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006258:	2b70      	cmp	r3, #112	; 0x70
 800625a:	d01a      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0xa2>
 800625c:	2b70      	cmp	r3, #112	; 0x70
 800625e:	d87b      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006260:	2b60      	cmp	r3, #96	; 0x60
 8006262:	d050      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x116>
 8006264:	2b60      	cmp	r3, #96	; 0x60
 8006266:	d877      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006268:	2b50      	cmp	r3, #80	; 0x50
 800626a:	d03c      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0xf6>
 800626c:	2b50      	cmp	r3, #80	; 0x50
 800626e:	d873      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d058      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x136>
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d86f      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006278:	2b30      	cmp	r3, #48	; 0x30
 800627a:	d064      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x156>
 800627c:	2b30      	cmp	r3, #48	; 0x30
 800627e:	d86b      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006280:	2b20      	cmp	r3, #32
 8006282:	d060      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x156>
 8006284:	2b20      	cmp	r3, #32
 8006286:	d867      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05c      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x156>
 800628c:	2b10      	cmp	r3, #16
 800628e:	d05a      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006290:	e062      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6899      	ldr	r1, [r3, #8]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f000 faee 	bl	8006882 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	609a      	str	r2, [r3, #8]
      break;
 80062be:	e04e      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6899      	ldr	r1, [r3, #8]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f000 fad7 	bl	8006882 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e2:	609a      	str	r2, [r3, #8]
      break;
 80062e4:	e03b      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6859      	ldr	r1, [r3, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f000 fa4e 	bl	8006794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2150      	movs	r1, #80	; 0x50
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 faa5 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006304:	e02b      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	461a      	mov	r2, r3
 8006314:	f000 fa6c 	bl	80067f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2160      	movs	r1, #96	; 0x60
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fa95 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006324:	e01b      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	461a      	mov	r2, r3
 8006334:	f000 fa2e 	bl	8006794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2140      	movs	r1, #64	; 0x40
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fa85 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006344:	e00b      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f000 fa7c 	bl	800684e <TIM_ITRx_SetConfig>
        break;
 8006356:	e002      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800635c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a29      	ldr	r2, [pc, #164]	; (8006478 <TIM_Base_SetConfig+0xb8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00b      	beq.n	80063f0 <TIM_Base_SetConfig+0x30>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d007      	beq.n	80063f0 <TIM_Base_SetConfig+0x30>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a26      	ldr	r2, [pc, #152]	; (800647c <TIM_Base_SetConfig+0xbc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_Base_SetConfig+0x30>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a25      	ldr	r2, [pc, #148]	; (8006480 <TIM_Base_SetConfig+0xc0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <TIM_Base_SetConfig+0xb8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a19      	ldr	r2, [pc, #100]	; (800647c <TIM_Base_SetConfig+0xbc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x62>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a18      	ldr	r2, [pc, #96]	; (8006480 <TIM_Base_SetConfig+0xc0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a07      	ldr	r2, [pc, #28]	; (8006478 <TIM_Base_SetConfig+0xb8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	615a      	str	r2, [r3, #20]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800

08006484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 0302 	bic.w	r3, r3, #2
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1c      	ldr	r2, [pc, #112]	; (800654c <TIM_OC1_SetConfig+0xc8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10c      	bne.n	80064fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0308 	bic.w	r3, r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a13      	ldr	r2, [pc, #76]	; (800654c <TIM_OC1_SetConfig+0xc8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00

08006550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0210 	bic.w	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f023 0320 	bic.w	r3, r3, #32
 800659a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1d      	ldr	r2, [pc, #116]	; (8006620 <TIM_OC2_SetConfig+0xd0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10d      	bne.n	80065cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <TIM_OC2_SetConfig+0xd0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d113      	bne.n	80065fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr
 8006620:	40012c00 	.word	0x40012c00

08006624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800666c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <TIM_OC3_SetConfig+0xd0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d10d      	bne.n	800669e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800669c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <TIM_OC3_SetConfig+0xd0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d113      	bne.n	80066ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	621a      	str	r2, [r3, #32]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00

080066f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a0f      	ldr	r2, [pc, #60]	; (8006790 <TIM_OC4_SetConfig+0x98>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d109      	bne.n	800676c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00

08006794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f023 0201 	bic.w	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 030a 	bic.w	r3, r3, #10
 80067d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	f023 0210 	bic.w	r2, r3, #16
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800681a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	031b      	lsls	r3, r3, #12
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800682c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	f043 0307 	orr.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	021a      	lsls	r2, r3, #8
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	609a      	str	r2, [r3, #8]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2201      	movs	r2, #1
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800691c:	2302      	movs	r3, #2
 800691e:	e046      	b.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696c:	d009      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a10      	ldr	r2, [pc, #64]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10c      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4313      	orrs	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800

080069c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e03f      	b.n	8006a7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fc f926 	bl	8002c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2224      	movs	r2, #36	; 0x24
 8006a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f829 	bl	8006a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695a      	ldr	r2, [r3, #20]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006abe:	f023 030c 	bic.w	r3, r3, #12
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <UART_SetConfig+0x114>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d103      	bne.n	8006af4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006aec:	f7fe fba0 	bl	8005230 <HAL_RCC_GetPCLK2Freq>
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	e002      	b.n	8006afa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7fe fb88 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8006af8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009a      	lsls	r2, r3, #2
 8006b04:	441a      	add	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <UART_SetConfig+0x118>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	0119      	lsls	r1, r3, #4
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009a      	lsls	r2, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <UART_SetConfig+0x118>)
 8006b32:	fba3 0302 	umull	r0, r3, r3, r2
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	2064      	movs	r0, #100	; 0x64
 8006b3a:	fb00 f303 	mul.w	r3, r0, r3
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	3332      	adds	r3, #50	; 0x32
 8006b44:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <UART_SetConfig+0x118>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b50:	4419      	add	r1, r3
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009a      	lsls	r2, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b68:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <UART_SetConfig+0x118>)
 8006b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	2064      	movs	r0, #100	; 0x64
 8006b72:	fb00 f303 	mul.w	r3, r0, r3
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	3332      	adds	r3, #50	; 0x32
 8006b7c:	4a07      	ldr	r2, [pc, #28]	; (8006b9c <UART_SetConfig+0x118>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	51eb851f 	.word	0x51eb851f

08006ba0 <__errno>:
 8006ba0:	4b01      	ldr	r3, [pc, #4]	; (8006ba8 <__errno+0x8>)
 8006ba2:	6818      	ldr	r0, [r3, #0]
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	2000007c 	.word	0x2000007c

08006bac <__libc_init_array>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	2600      	movs	r6, #0
 8006bb0:	4d0c      	ldr	r5, [pc, #48]	; (8006be4 <__libc_init_array+0x38>)
 8006bb2:	4c0d      	ldr	r4, [pc, #52]	; (8006be8 <__libc_init_array+0x3c>)
 8006bb4:	1b64      	subs	r4, r4, r5
 8006bb6:	10a4      	asrs	r4, r4, #2
 8006bb8:	42a6      	cmp	r6, r4
 8006bba:	d109      	bne.n	8006bd0 <__libc_init_array+0x24>
 8006bbc:	f001 f93e 	bl	8007e3c <_init>
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	4d0a      	ldr	r5, [pc, #40]	; (8006bec <__libc_init_array+0x40>)
 8006bc4:	4c0a      	ldr	r4, [pc, #40]	; (8006bf0 <__libc_init_array+0x44>)
 8006bc6:	1b64      	subs	r4, r4, r5
 8006bc8:	10a4      	asrs	r4, r4, #2
 8006bca:	42a6      	cmp	r6, r4
 8006bcc:	d105      	bne.n	8006bda <__libc_init_array+0x2e>
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd4:	4798      	blx	r3
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	e7ee      	b.n	8006bb8 <__libc_init_array+0xc>
 8006bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bde:	4798      	blx	r3
 8006be0:	3601      	adds	r6, #1
 8006be2:	e7f2      	b.n	8006bca <__libc_init_array+0x1e>
 8006be4:	08008280 	.word	0x08008280
 8006be8:	08008280 	.word	0x08008280
 8006bec:	08008280 	.word	0x08008280
 8006bf0:	08008284 	.word	0x08008284

08006bf4 <memset>:
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4402      	add	r2, r0
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <memset+0xa>
 8006bfc:	4770      	bx	lr
 8006bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006c02:	e7f9      	b.n	8006bf8 <memset+0x4>

08006c04 <cos>:
 8006c04:	b530      	push	{r4, r5, lr}
 8006c06:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <cos+0x7c>)
 8006c08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	b087      	sub	sp, #28
 8006c10:	dc04      	bgt.n	8006c1c <cos+0x18>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	f000 fb47 	bl	80072a8 <__kernel_cos>
 8006c1a:	e006      	b.n	8006c2a <cos+0x26>
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <cos+0x80>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	dd05      	ble.n	8006c2e <cos+0x2a>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	f7f9 fb4b 	bl	80002c0 <__aeabi_dsub>
 8006c2a:	b007      	add	sp, #28
 8006c2c:	bd30      	pop	{r4, r5, pc}
 8006c2e:	aa02      	add	r2, sp, #8
 8006c30:	f000 f89e 	bl	8006d70 <__ieee754_rem_pio2>
 8006c34:	f000 0003 	and.w	r0, r0, #3
 8006c38:	2801      	cmp	r0, #1
 8006c3a:	d007      	beq.n	8006c4c <cos+0x48>
 8006c3c:	2802      	cmp	r0, #2
 8006c3e:	d00f      	beq.n	8006c60 <cos+0x5c>
 8006c40:	b9a8      	cbnz	r0, 8006c6e <cos+0x6a>
 8006c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c4a:	e7e4      	b.n	8006c16 <cos+0x12>
 8006c4c:	9000      	str	r0, [sp, #0]
 8006c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c56:	f000 ff2f 	bl	8007ab8 <__kernel_sin>
 8006c5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006c5e:	e7e4      	b.n	8006c2a <cos+0x26>
 8006c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c68:	f000 fb1e 	bl	80072a8 <__kernel_cos>
 8006c6c:	e7f5      	b.n	8006c5a <cos+0x56>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7a:	f000 ff1d 	bl	8007ab8 <__kernel_sin>
 8006c7e:	e7d4      	b.n	8006c2a <cos+0x26>
 8006c80:	3fe921fb 	.word	0x3fe921fb
 8006c84:	7fefffff 	.word	0x7fefffff

08006c88 <sin>:
 8006c88:	b530      	push	{r4, r5, lr}
 8006c8a:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <sin+0x84>)
 8006c8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c90:	4293      	cmp	r3, r2
 8006c92:	b087      	sub	sp, #28
 8006c94:	dc06      	bgt.n	8006ca4 <sin+0x1c>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f000 ff0b 	bl	8007ab8 <__kernel_sin>
 8006ca2:	e006      	b.n	8006cb2 <sin+0x2a>
 8006ca4:	4a1a      	ldr	r2, [pc, #104]	; (8006d10 <sin+0x88>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	dd05      	ble.n	8006cb6 <sin+0x2e>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	f7f9 fb07 	bl	80002c0 <__aeabi_dsub>
 8006cb2:	b007      	add	sp, #28
 8006cb4:	bd30      	pop	{r4, r5, pc}
 8006cb6:	aa02      	add	r2, sp, #8
 8006cb8:	f000 f85a 	bl	8006d70 <__ieee754_rem_pio2>
 8006cbc:	f000 0003 	and.w	r0, r0, #3
 8006cc0:	2801      	cmp	r0, #1
 8006cc2:	d009      	beq.n	8006cd8 <sin+0x50>
 8006cc4:	2802      	cmp	r0, #2
 8006cc6:	d00e      	beq.n	8006ce6 <sin+0x5e>
 8006cc8:	b9c0      	cbnz	r0, 8006cfc <sin+0x74>
 8006cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cce:	2301      	movs	r3, #1
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd6:	e7e2      	b.n	8006c9e <sin+0x16>
 8006cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce0:	f000 fae2 	bl	80072a8 <__kernel_cos>
 8006ce4:	e7e5      	b.n	8006cb2 <sin+0x2a>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf2:	f000 fee1 	bl	8007ab8 <__kernel_sin>
 8006cf6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006cfa:	e7da      	b.n	8006cb2 <sin+0x2a>
 8006cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d04:	f000 fad0 	bl	80072a8 <__kernel_cos>
 8006d08:	e7f5      	b.n	8006cf6 <sin+0x6e>
 8006d0a:	bf00      	nop
 8006d0c:	3fe921fb 	.word	0x3fe921fb
 8006d10:	7fefffff 	.word	0x7fefffff

08006d14 <sqrt>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	4606      	mov	r6, r0
 8006d18:	460f      	mov	r7, r1
 8006d1a:	f000 fa19 	bl	8007150 <__ieee754_sqrt>
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <sqrt+0x54>)
 8006d20:	4604      	mov	r4, r0
 8006d22:	f993 3000 	ldrsb.w	r3, [r3]
 8006d26:	460d      	mov	r5, r1
 8006d28:	3301      	adds	r3, #1
 8006d2a:	d019      	beq.n	8006d60 <sqrt+0x4c>
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	463b      	mov	r3, r7
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 ff16 	bl	8000b64 <__aeabi_dcmpun>
 8006d38:	b990      	cbnz	r0, 8006d60 <sqrt+0x4c>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4630      	mov	r0, r6
 8006d40:	4639      	mov	r1, r7
 8006d42:	f7f9 fee7 	bl	8000b14 <__aeabi_dcmplt>
 8006d46:	b158      	cbz	r0, 8006d60 <sqrt+0x4c>
 8006d48:	f7ff ff2a 	bl	8006ba0 <__errno>
 8006d4c:	2321      	movs	r3, #33	; 0x21
 8006d4e:	2200      	movs	r2, #0
 8006d50:	6003      	str	r3, [r0, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	f7f9 fd94 	bl	8000884 <__aeabi_ddiv>
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	460d      	mov	r5, r1
 8006d60:	4620      	mov	r0, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200000e0 	.word	0x200000e0
 8006d6c:	00000000 	.word	0x00000000

08006d70 <__ieee754_rem_pio2>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4614      	mov	r4, r2
 8006d76:	4ac4      	ldr	r2, [pc, #784]	; (8007088 <__ieee754_rem_pio2+0x318>)
 8006d78:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006d7c:	b08d      	sub	sp, #52	; 0x34
 8006d7e:	4592      	cmp	sl, r2
 8006d80:	9104      	str	r1, [sp, #16]
 8006d82:	dc07      	bgt.n	8006d94 <__ieee754_rem_pio2+0x24>
 8006d84:	2200      	movs	r2, #0
 8006d86:	2300      	movs	r3, #0
 8006d88:	e9c4 0100 	strd	r0, r1, [r4]
 8006d8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006d90:	2500      	movs	r5, #0
 8006d92:	e024      	b.n	8006dde <__ieee754_rem_pio2+0x6e>
 8006d94:	4abd      	ldr	r2, [pc, #756]	; (800708c <__ieee754_rem_pio2+0x31c>)
 8006d96:	4592      	cmp	sl, r2
 8006d98:	dc72      	bgt.n	8006e80 <__ieee754_rem_pio2+0x110>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	4dbc      	ldr	r5, [pc, #752]	; (8007090 <__ieee754_rem_pio2+0x320>)
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	a3ab      	add	r3, pc, #684	; (adr r3, 8007050 <__ieee754_rem_pio2+0x2e0>)
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	dd36      	ble.n	8006e16 <__ieee754_rem_pio2+0xa6>
 8006da8:	f7f9 fa8a 	bl	80002c0 <__aeabi_dsub>
 8006dac:	45aa      	cmp	sl, r5
 8006dae:	4606      	mov	r6, r0
 8006db0:	460f      	mov	r7, r1
 8006db2:	d018      	beq.n	8006de6 <__ieee754_rem_pio2+0x76>
 8006db4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007058 <__ieee754_rem_pio2+0x2e8>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fa81 	bl	80002c0 <__aeabi_dsub>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	e9c4 2300 	strd	r2, r3, [r4]
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 fa79 	bl	80002c0 <__aeabi_dsub>
 8006dce:	a3a2      	add	r3, pc, #648	; (adr r3, 8007058 <__ieee754_rem_pio2+0x2e8>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 fa74 	bl	80002c0 <__aeabi_dsub>
 8006dd8:	2501      	movs	r5, #1
 8006dda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006dde:	4628      	mov	r0, r5
 8006de0:	b00d      	add	sp, #52	; 0x34
 8006de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de6:	a39e      	add	r3, pc, #632	; (adr r3, 8007060 <__ieee754_rem_pio2+0x2f0>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fa68 	bl	80002c0 <__aeabi_dsub>
 8006df0:	a39d      	add	r3, pc, #628	; (adr r3, 8007068 <__ieee754_rem_pio2+0x2f8>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	4606      	mov	r6, r0
 8006df8:	460f      	mov	r7, r1
 8006dfa:	f7f9 fa61 	bl	80002c0 <__aeabi_dsub>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4630      	mov	r0, r6
 8006e04:	e9c4 2300 	strd	r2, r3, [r4]
 8006e08:	4639      	mov	r1, r7
 8006e0a:	f7f9 fa59 	bl	80002c0 <__aeabi_dsub>
 8006e0e:	a396      	add	r3, pc, #600	; (adr r3, 8007068 <__ieee754_rem_pio2+0x2f8>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	e7de      	b.n	8006dd4 <__ieee754_rem_pio2+0x64>
 8006e16:	f7f9 fa55 	bl	80002c4 <__adddf3>
 8006e1a:	45aa      	cmp	sl, r5
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	d016      	beq.n	8006e50 <__ieee754_rem_pio2+0xe0>
 8006e22:	a38d      	add	r3, pc, #564	; (adr r3, 8007058 <__ieee754_rem_pio2+0x2e8>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fa4c 	bl	80002c4 <__adddf3>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4630      	mov	r0, r6
 8006e32:	e9c4 2300 	strd	r2, r3, [r4]
 8006e36:	4639      	mov	r1, r7
 8006e38:	f7f9 fa42 	bl	80002c0 <__aeabi_dsub>
 8006e3c:	a386      	add	r3, pc, #536	; (adr r3, 8007058 <__ieee754_rem_pio2+0x2e8>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fa3f 	bl	80002c4 <__adddf3>
 8006e46:	f04f 35ff 	mov.w	r5, #4294967295
 8006e4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e4e:	e7c6      	b.n	8006dde <__ieee754_rem_pio2+0x6e>
 8006e50:	a383      	add	r3, pc, #524	; (adr r3, 8007060 <__ieee754_rem_pio2+0x2f0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fa35 	bl	80002c4 <__adddf3>
 8006e5a:	a383      	add	r3, pc, #524	; (adr r3, 8007068 <__ieee754_rem_pio2+0x2f8>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	4606      	mov	r6, r0
 8006e62:	460f      	mov	r7, r1
 8006e64:	f7f9 fa2e 	bl	80002c4 <__adddf3>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	e9c4 2300 	strd	r2, r3, [r4]
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 fa24 	bl	80002c0 <__aeabi_dsub>
 8006e78:	a37b      	add	r3, pc, #492	; (adr r3, 8007068 <__ieee754_rem_pio2+0x2f8>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	e7e0      	b.n	8006e42 <__ieee754_rem_pio2+0xd2>
 8006e80:	4a84      	ldr	r2, [pc, #528]	; (8007094 <__ieee754_rem_pio2+0x324>)
 8006e82:	4592      	cmp	sl, r2
 8006e84:	f300 80d5 	bgt.w	8007032 <__ieee754_rem_pio2+0x2c2>
 8006e88:	f000 fecc 	bl	8007c24 <fabs>
 8006e8c:	a378      	add	r3, pc, #480	; (adr r3, 8007070 <__ieee754_rem_pio2+0x300>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	f7f9 fbcb 	bl	8000630 <__aeabi_dmul>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	4b7e      	ldr	r3, [pc, #504]	; (8007098 <__ieee754_rem_pio2+0x328>)
 8006e9e:	f7f9 fa11 	bl	80002c4 <__adddf3>
 8006ea2:	f7f9 fe75 	bl	8000b90 <__aeabi_d2iz>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	f7f9 fb58 	bl	800055c <__aeabi_i2d>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eb4:	a366      	add	r3, pc, #408	; (adr r3, 8007050 <__ieee754_rem_pio2+0x2e0>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f7f9 fbb9 	bl	8000630 <__aeabi_dmul>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	f7f9 f9fb 	bl	80002c0 <__aeabi_dsub>
 8006eca:	a363      	add	r3, pc, #396	; (adr r3, 8007058 <__ieee754_rem_pio2+0x2e8>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4689      	mov	r9, r1
 8006ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed8:	f7f9 fbaa 	bl	8000630 <__aeabi_dmul>
 8006edc:	2d1f      	cmp	r5, #31
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	dc0e      	bgt.n	8006f02 <__ieee754_rem_pio2+0x192>
 8006ee4:	4b6d      	ldr	r3, [pc, #436]	; (800709c <__ieee754_rem_pio2+0x32c>)
 8006ee6:	1e6a      	subs	r2, r5, #1
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	4553      	cmp	r3, sl
 8006eee:	d008      	beq.n	8006f02 <__ieee754_rem_pio2+0x192>
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 f9e2 	bl	80002c0 <__aeabi_dsub>
 8006efc:	e9c4 0100 	strd	r0, r1, [r4]
 8006f00:	e013      	b.n	8006f2a <__ieee754_rem_pio2+0x1ba>
 8006f02:	463b      	mov	r3, r7
 8006f04:	4632      	mov	r2, r6
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 f9d9 	bl	80002c0 <__aeabi_dsub>
 8006f0e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f18:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8006f1c:	f1ba 0f10 	cmp.w	sl, #16
 8006f20:	dc1f      	bgt.n	8006f62 <__ieee754_rem_pio2+0x1f2>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	e9c4 2300 	strd	r2, r3, [r4]
 8006f2a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006f2e:	4640      	mov	r0, r8
 8006f30:	4653      	mov	r3, sl
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 f9c4 	bl	80002c0 <__aeabi_dsub>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	f7f9 f9c0 	bl	80002c0 <__aeabi_dsub>
 8006f40:	460b      	mov	r3, r1
 8006f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f46:	9904      	ldr	r1, [sp, #16]
 8006f48:	4602      	mov	r2, r0
 8006f4a:	2900      	cmp	r1, #0
 8006f4c:	f6bf af47 	bge.w	8006dde <__ieee754_rem_pio2+0x6e>
 8006f50:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006f54:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006f58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	60e3      	str	r3, [r4, #12]
 8006f5e:	426d      	negs	r5, r5
 8006f60:	e73d      	b.n	8006dde <__ieee754_rem_pio2+0x6e>
 8006f62:	a33f      	add	r3, pc, #252	; (adr r3, 8007060 <__ieee754_rem_pio2+0x2f0>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f6c:	f7f9 fb60 	bl	8000630 <__aeabi_dmul>
 8006f70:	4606      	mov	r6, r0
 8006f72:	460f      	mov	r7, r1
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	f7f9 f9a0 	bl	80002c0 <__aeabi_dsub>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4682      	mov	sl, r0
 8006f86:	468b      	mov	fp, r1
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 f998 	bl	80002c0 <__aeabi_dsub>
 8006f90:	4632      	mov	r2, r6
 8006f92:	463b      	mov	r3, r7
 8006f94:	f7f9 f994 	bl	80002c0 <__aeabi_dsub>
 8006f98:	a333      	add	r3, pc, #204	; (adr r3, 8007068 <__ieee754_rem_pio2+0x2f8>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa6:	f7f9 fb43 	bl	8000630 <__aeabi_dmul>
 8006faa:	4632      	mov	r2, r6
 8006fac:	463b      	mov	r3, r7
 8006fae:	f7f9 f987 	bl	80002c0 <__aeabi_dsub>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	4650      	mov	r0, sl
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	f7f9 f97f 	bl	80002c0 <__aeabi_dsub>
 8006fc2:	9a05      	ldr	r2, [sp, #20]
 8006fc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b31      	cmp	r3, #49	; 0x31
 8006fcc:	dc06      	bgt.n	8006fdc <__ieee754_rem_pio2+0x26c>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	46d0      	mov	r8, sl
 8006fd4:	46d9      	mov	r9, fp
 8006fd6:	e9c4 2300 	strd	r2, r3, [r4]
 8006fda:	e7a6      	b.n	8006f2a <__ieee754_rem_pio2+0x1ba>
 8006fdc:	a326      	add	r3, pc, #152	; (adr r3, 8007078 <__ieee754_rem_pio2+0x308>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe6:	f7f9 fb23 	bl	8000630 <__aeabi_dmul>
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	f7f9 f963 	bl	80002c0 <__aeabi_dsub>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4680      	mov	r8, r0
 8007000:	4689      	mov	r9, r1
 8007002:	4650      	mov	r0, sl
 8007004:	4659      	mov	r1, fp
 8007006:	f7f9 f95b 	bl	80002c0 <__aeabi_dsub>
 800700a:	4632      	mov	r2, r6
 800700c:	463b      	mov	r3, r7
 800700e:	f7f9 f957 	bl	80002c0 <__aeabi_dsub>
 8007012:	a31b      	add	r3, pc, #108	; (adr r3, 8007080 <__ieee754_rem_pio2+0x310>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	4606      	mov	r6, r0
 800701a:	460f      	mov	r7, r1
 800701c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007020:	f7f9 fb06 	bl	8000630 <__aeabi_dmul>
 8007024:	4632      	mov	r2, r6
 8007026:	463b      	mov	r3, r7
 8007028:	f7f9 f94a 	bl	80002c0 <__aeabi_dsub>
 800702c:	4606      	mov	r6, r0
 800702e:	460f      	mov	r7, r1
 8007030:	e75e      	b.n	8006ef0 <__ieee754_rem_pio2+0x180>
 8007032:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <__ieee754_rem_pio2+0x330>)
 8007034:	4592      	cmp	sl, r2
 8007036:	dd35      	ble.n	80070a4 <__ieee754_rem_pio2+0x334>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	f7f9 f940 	bl	80002c0 <__aeabi_dsub>
 8007040:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007044:	e9c4 0100 	strd	r0, r1, [r4]
 8007048:	e6a2      	b.n	8006d90 <__ieee754_rem_pio2+0x20>
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w
 8007050:	54400000 	.word	0x54400000
 8007054:	3ff921fb 	.word	0x3ff921fb
 8007058:	1a626331 	.word	0x1a626331
 800705c:	3dd0b461 	.word	0x3dd0b461
 8007060:	1a600000 	.word	0x1a600000
 8007064:	3dd0b461 	.word	0x3dd0b461
 8007068:	2e037073 	.word	0x2e037073
 800706c:	3ba3198a 	.word	0x3ba3198a
 8007070:	6dc9c883 	.word	0x6dc9c883
 8007074:	3fe45f30 	.word	0x3fe45f30
 8007078:	2e000000 	.word	0x2e000000
 800707c:	3ba3198a 	.word	0x3ba3198a
 8007080:	252049c1 	.word	0x252049c1
 8007084:	397b839a 	.word	0x397b839a
 8007088:	3fe921fb 	.word	0x3fe921fb
 800708c:	4002d97b 	.word	0x4002d97b
 8007090:	3ff921fb 	.word	0x3ff921fb
 8007094:	413921fb 	.word	0x413921fb
 8007098:	3fe00000 	.word	0x3fe00000
 800709c:	080080a4 	.word	0x080080a4
 80070a0:	7fefffff 	.word	0x7fefffff
 80070a4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80070a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80070ac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80070b0:	460f      	mov	r7, r1
 80070b2:	4606      	mov	r6, r0
 80070b4:	f7f9 fd6c 	bl	8000b90 <__aeabi_d2iz>
 80070b8:	f7f9 fa50 	bl	800055c <__aeabi_i2d>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070c8:	f7f9 f8fa 	bl	80002c0 <__aeabi_dsub>
 80070cc:	2200      	movs	r2, #0
 80070ce:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <__ieee754_rem_pio2+0x3d8>)
 80070d0:	f7f9 faae 	bl	8000630 <__aeabi_dmul>
 80070d4:	460f      	mov	r7, r1
 80070d6:	4606      	mov	r6, r0
 80070d8:	f7f9 fd5a 	bl	8000b90 <__aeabi_d2iz>
 80070dc:	f7f9 fa3e 	bl	800055c <__aeabi_i2d>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070ec:	f7f9 f8e8 	bl	80002c0 <__aeabi_dsub>
 80070f0:	2200      	movs	r2, #0
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <__ieee754_rem_pio2+0x3d8>)
 80070f4:	f7f9 fa9c 	bl	8000630 <__aeabi_dmul>
 80070f8:	f04f 0803 	mov.w	r8, #3
 80070fc:	2600      	movs	r6, #0
 80070fe:	2700      	movs	r7, #0
 8007100:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007104:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007108:	4632      	mov	r2, r6
 800710a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800710e:	463b      	mov	r3, r7
 8007110:	46c2      	mov	sl, r8
 8007112:	f108 38ff 	add.w	r8, r8, #4294967295
 8007116:	f7f9 fcf3 	bl	8000b00 <__aeabi_dcmpeq>
 800711a:	2800      	cmp	r0, #0
 800711c:	d1f4      	bne.n	8007108 <__ieee754_rem_pio2+0x398>
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <__ieee754_rem_pio2+0x3dc>)
 8007120:	462a      	mov	r2, r5
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	2302      	movs	r3, #2
 8007126:	4621      	mov	r1, r4
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	a806      	add	r0, sp, #24
 800712c:	4653      	mov	r3, sl
 800712e:	f000 f979 	bl	8007424 <__kernel_rem_pio2>
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	4605      	mov	r5, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	f6bf ae51 	bge.w	8006dde <__ieee754_rem_pio2+0x6e>
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	68e3      	ldr	r3, [r4, #12]
 8007146:	e707      	b.n	8006f58 <__ieee754_rem_pio2+0x1e8>
 8007148:	41700000 	.word	0x41700000
 800714c:	08008124 	.word	0x08008124

08007150 <__ieee754_sqrt>:
 8007150:	f8df c150 	ldr.w	ip, [pc, #336]	; 80072a4 <__ieee754_sqrt+0x154>
 8007154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007158:	ea3c 0c01 	bics.w	ip, ip, r1
 800715c:	460b      	mov	r3, r1
 800715e:	4606      	mov	r6, r0
 8007160:	460d      	mov	r5, r1
 8007162:	460a      	mov	r2, r1
 8007164:	4607      	mov	r7, r0
 8007166:	4604      	mov	r4, r0
 8007168:	d10e      	bne.n	8007188 <__ieee754_sqrt+0x38>
 800716a:	4602      	mov	r2, r0
 800716c:	f7f9 fa60 	bl	8000630 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4630      	mov	r0, r6
 8007176:	4629      	mov	r1, r5
 8007178:	f7f9 f8a4 	bl	80002c4 <__adddf3>
 800717c:	4606      	mov	r6, r0
 800717e:	460d      	mov	r5, r1
 8007180:	4630      	mov	r0, r6
 8007182:	4629      	mov	r1, r5
 8007184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007188:	2900      	cmp	r1, #0
 800718a:	dc0d      	bgt.n	80071a8 <__ieee754_sqrt+0x58>
 800718c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007190:	ea5c 0707 	orrs.w	r7, ip, r7
 8007194:	d0f4      	beq.n	8007180 <__ieee754_sqrt+0x30>
 8007196:	b139      	cbz	r1, 80071a8 <__ieee754_sqrt+0x58>
 8007198:	4602      	mov	r2, r0
 800719a:	f7f9 f891 	bl	80002c0 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	f7f9 fb6f 	bl	8000884 <__aeabi_ddiv>
 80071a6:	e7e9      	b.n	800717c <__ieee754_sqrt+0x2c>
 80071a8:	1512      	asrs	r2, r2, #20
 80071aa:	d074      	beq.n	8007296 <__ieee754_sqrt+0x146>
 80071ac:	2000      	movs	r0, #0
 80071ae:	07d5      	lsls	r5, r2, #31
 80071b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b4:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80071b8:	bf5e      	ittt	pl
 80071ba:	0fe3      	lsrpl	r3, r4, #31
 80071bc:	0064      	lslpl	r4, r4, #1
 80071be:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80071c2:	0fe3      	lsrs	r3, r4, #31
 80071c4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80071c8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80071cc:	2516      	movs	r5, #22
 80071ce:	4601      	mov	r1, r0
 80071d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071d4:	1076      	asrs	r6, r6, #1
 80071d6:	0064      	lsls	r4, r4, #1
 80071d8:	188f      	adds	r7, r1, r2
 80071da:	429f      	cmp	r7, r3
 80071dc:	bfde      	ittt	le
 80071de:	1bdb      	suble	r3, r3, r7
 80071e0:	18b9      	addle	r1, r7, r2
 80071e2:	1880      	addle	r0, r0, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	3d01      	subs	r5, #1
 80071e8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80071ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80071f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80071f4:	d1f0      	bne.n	80071d8 <__ieee754_sqrt+0x88>
 80071f6:	462a      	mov	r2, r5
 80071f8:	f04f 0e20 	mov.w	lr, #32
 80071fc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007200:	428b      	cmp	r3, r1
 8007202:	eb07 0c05 	add.w	ip, r7, r5
 8007206:	dc02      	bgt.n	800720e <__ieee754_sqrt+0xbe>
 8007208:	d113      	bne.n	8007232 <__ieee754_sqrt+0xe2>
 800720a:	45a4      	cmp	ip, r4
 800720c:	d811      	bhi.n	8007232 <__ieee754_sqrt+0xe2>
 800720e:	f1bc 0f00 	cmp.w	ip, #0
 8007212:	eb0c 0507 	add.w	r5, ip, r7
 8007216:	da43      	bge.n	80072a0 <__ieee754_sqrt+0x150>
 8007218:	2d00      	cmp	r5, #0
 800721a:	db41      	blt.n	80072a0 <__ieee754_sqrt+0x150>
 800721c:	f101 0801 	add.w	r8, r1, #1
 8007220:	1a5b      	subs	r3, r3, r1
 8007222:	4641      	mov	r1, r8
 8007224:	45a4      	cmp	ip, r4
 8007226:	bf88      	it	hi
 8007228:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800722c:	eba4 040c 	sub.w	r4, r4, ip
 8007230:	443a      	add	r2, r7
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	f1be 0e01 	subs.w	lr, lr, #1
 8007238:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800723c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007240:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007244:	d1dc      	bne.n	8007200 <__ieee754_sqrt+0xb0>
 8007246:	4323      	orrs	r3, r4
 8007248:	d006      	beq.n	8007258 <__ieee754_sqrt+0x108>
 800724a:	1c54      	adds	r4, r2, #1
 800724c:	bf0b      	itete	eq
 800724e:	4672      	moveq	r2, lr
 8007250:	3201      	addne	r2, #1
 8007252:	3001      	addeq	r0, #1
 8007254:	f022 0201 	bicne.w	r2, r2, #1
 8007258:	1043      	asrs	r3, r0, #1
 800725a:	07c1      	lsls	r1, r0, #31
 800725c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007260:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007264:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007268:	bf48      	it	mi
 800726a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800726e:	4610      	mov	r0, r2
 8007270:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007274:	e782      	b.n	800717c <__ieee754_sqrt+0x2c>
 8007276:	0ae3      	lsrs	r3, r4, #11
 8007278:	3915      	subs	r1, #21
 800727a:	0564      	lsls	r4, r4, #21
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0fa      	beq.n	8007276 <__ieee754_sqrt+0x126>
 8007280:	02de      	lsls	r6, r3, #11
 8007282:	d50a      	bpl.n	800729a <__ieee754_sqrt+0x14a>
 8007284:	f1c2 0020 	rsb	r0, r2, #32
 8007288:	fa24 f000 	lsr.w	r0, r4, r0
 800728c:	1e55      	subs	r5, r2, #1
 800728e:	4094      	lsls	r4, r2
 8007290:	4303      	orrs	r3, r0
 8007292:	1b4a      	subs	r2, r1, r5
 8007294:	e78a      	b.n	80071ac <__ieee754_sqrt+0x5c>
 8007296:	4611      	mov	r1, r2
 8007298:	e7f0      	b.n	800727c <__ieee754_sqrt+0x12c>
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	3201      	adds	r2, #1
 800729e:	e7ef      	b.n	8007280 <__ieee754_sqrt+0x130>
 80072a0:	4688      	mov	r8, r1
 80072a2:	e7bd      	b.n	8007220 <__ieee754_sqrt+0xd0>
 80072a4:	7ff00000 	.word	0x7ff00000

080072a8 <__kernel_cos>:
 80072a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80072b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80072b4:	4680      	mov	r8, r0
 80072b6:	460f      	mov	r7, r1
 80072b8:	e9cd 2300 	strd	r2, r3, [sp]
 80072bc:	da04      	bge.n	80072c8 <__kernel_cos+0x20>
 80072be:	f7f9 fc67 	bl	8000b90 <__aeabi_d2iz>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	f000 8086 	beq.w	80073d4 <__kernel_cos+0x12c>
 80072c8:	4642      	mov	r2, r8
 80072ca:	463b      	mov	r3, r7
 80072cc:	4640      	mov	r0, r8
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f9 f9ae 	bl	8000630 <__aeabi_dmul>
 80072d4:	2200      	movs	r2, #0
 80072d6:	4b4e      	ldr	r3, [pc, #312]	; (8007410 <__kernel_cos+0x168>)
 80072d8:	4604      	mov	r4, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	f7f9 f9a8 	bl	8000630 <__aeabi_dmul>
 80072e0:	a33f      	add	r3, pc, #252	; (adr r3, 80073e0 <__kernel_cos+0x138>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	4682      	mov	sl, r0
 80072e8:	468b      	mov	fp, r1
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 f99f 	bl	8000630 <__aeabi_dmul>
 80072f2:	a33d      	add	r3, pc, #244	; (adr r3, 80073e8 <__kernel_cos+0x140>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f7f8 ffe4 	bl	80002c4 <__adddf3>
 80072fc:	4622      	mov	r2, r4
 80072fe:	462b      	mov	r3, r5
 8007300:	f7f9 f996 	bl	8000630 <__aeabi_dmul>
 8007304:	a33a      	add	r3, pc, #232	; (adr r3, 80073f0 <__kernel_cos+0x148>)
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	f7f8 ffd9 	bl	80002c0 <__aeabi_dsub>
 800730e:	4622      	mov	r2, r4
 8007310:	462b      	mov	r3, r5
 8007312:	f7f9 f98d 	bl	8000630 <__aeabi_dmul>
 8007316:	a338      	add	r3, pc, #224	; (adr r3, 80073f8 <__kernel_cos+0x150>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f7f8 ffd2 	bl	80002c4 <__adddf3>
 8007320:	4622      	mov	r2, r4
 8007322:	462b      	mov	r3, r5
 8007324:	f7f9 f984 	bl	8000630 <__aeabi_dmul>
 8007328:	a335      	add	r3, pc, #212	; (adr r3, 8007400 <__kernel_cos+0x158>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f8 ffc7 	bl	80002c0 <__aeabi_dsub>
 8007332:	4622      	mov	r2, r4
 8007334:	462b      	mov	r3, r5
 8007336:	f7f9 f97b 	bl	8000630 <__aeabi_dmul>
 800733a:	a333      	add	r3, pc, #204	; (adr r3, 8007408 <__kernel_cos+0x160>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f7f8 ffc0 	bl	80002c4 <__adddf3>
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	f7f9 f972 	bl	8000630 <__aeabi_dmul>
 800734c:	4622      	mov	r2, r4
 800734e:	462b      	mov	r3, r5
 8007350:	f7f9 f96e 	bl	8000630 <__aeabi_dmul>
 8007354:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	4640      	mov	r0, r8
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 f966 	bl	8000630 <__aeabi_dmul>
 8007364:	460b      	mov	r3, r1
 8007366:	4602      	mov	r2, r0
 8007368:	4629      	mov	r1, r5
 800736a:	4620      	mov	r0, r4
 800736c:	f7f8 ffa8 	bl	80002c0 <__aeabi_dsub>
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <__kernel_cos+0x16c>)
 8007372:	4680      	mov	r8, r0
 8007374:	429e      	cmp	r6, r3
 8007376:	4689      	mov	r9, r1
 8007378:	dc0e      	bgt.n	8007398 <__kernel_cos+0xf0>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4650      	mov	r0, sl
 8007380:	4659      	mov	r1, fp
 8007382:	f7f8 ff9d 	bl	80002c0 <__aeabi_dsub>
 8007386:	4602      	mov	r2, r0
 8007388:	2000      	movs	r0, #0
 800738a:	460b      	mov	r3, r1
 800738c:	4922      	ldr	r1, [pc, #136]	; (8007418 <__kernel_cos+0x170>)
 800738e:	f7f8 ff97 	bl	80002c0 <__aeabi_dsub>
 8007392:	b003      	add	sp, #12
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	2400      	movs	r4, #0
 800739a:	4b20      	ldr	r3, [pc, #128]	; (800741c <__kernel_cos+0x174>)
 800739c:	4622      	mov	r2, r4
 800739e:	429e      	cmp	r6, r3
 80073a0:	bfcc      	ite	gt
 80073a2:	4d1f      	ldrgt	r5, [pc, #124]	; (8007420 <__kernel_cos+0x178>)
 80073a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80073a8:	462b      	mov	r3, r5
 80073aa:	2000      	movs	r0, #0
 80073ac:	491a      	ldr	r1, [pc, #104]	; (8007418 <__kernel_cos+0x170>)
 80073ae:	f7f8 ff87 	bl	80002c0 <__aeabi_dsub>
 80073b2:	4622      	mov	r2, r4
 80073b4:	4606      	mov	r6, r0
 80073b6:	460f      	mov	r7, r1
 80073b8:	462b      	mov	r3, r5
 80073ba:	4650      	mov	r0, sl
 80073bc:	4659      	mov	r1, fp
 80073be:	f7f8 ff7f 	bl	80002c0 <__aeabi_dsub>
 80073c2:	4642      	mov	r2, r8
 80073c4:	464b      	mov	r3, r9
 80073c6:	f7f8 ff7b 	bl	80002c0 <__aeabi_dsub>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	e7dc      	b.n	800738e <__kernel_cos+0xe6>
 80073d4:	2000      	movs	r0, #0
 80073d6:	4910      	ldr	r1, [pc, #64]	; (8007418 <__kernel_cos+0x170>)
 80073d8:	e7db      	b.n	8007392 <__kernel_cos+0xea>
 80073da:	bf00      	nop
 80073dc:	f3af 8000 	nop.w
 80073e0:	be8838d4 	.word	0xbe8838d4
 80073e4:	bda8fae9 	.word	0xbda8fae9
 80073e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80073ec:	3e21ee9e 	.word	0x3e21ee9e
 80073f0:	809c52ad 	.word	0x809c52ad
 80073f4:	3e927e4f 	.word	0x3e927e4f
 80073f8:	19cb1590 	.word	0x19cb1590
 80073fc:	3efa01a0 	.word	0x3efa01a0
 8007400:	16c15177 	.word	0x16c15177
 8007404:	3f56c16c 	.word	0x3f56c16c
 8007408:	5555554c 	.word	0x5555554c
 800740c:	3fa55555 	.word	0x3fa55555
 8007410:	3fe00000 	.word	0x3fe00000
 8007414:	3fd33332 	.word	0x3fd33332
 8007418:	3ff00000 	.word	0x3ff00000
 800741c:	3fe90000 	.word	0x3fe90000
 8007420:	3fd20000 	.word	0x3fd20000

08007424 <__kernel_rem_pio2>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800742c:	9308      	str	r3, [sp, #32]
 800742e:	9101      	str	r1, [sp, #4]
 8007430:	4bc0      	ldr	r3, [pc, #768]	; (8007734 <__kernel_rem_pio2+0x310>)
 8007432:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007434:	f112 0f14 	cmn.w	r2, #20
 8007438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800743c:	bfa8      	it	ge
 800743e:	1ed4      	subge	r4, r2, #3
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	9b08      	ldr	r3, [sp, #32]
 8007444:	bfb8      	it	lt
 8007446:	2400      	movlt	r4, #0
 8007448:	f103 33ff 	add.w	r3, r3, #4294967295
 800744c:	9306      	str	r3, [sp, #24]
 800744e:	bfa4      	itt	ge
 8007450:	2318      	movge	r3, #24
 8007452:	fb94 f4f3 	sdivge	r4, r4, r3
 8007456:	f06f 0317 	mvn.w	r3, #23
 800745a:	fb04 3303 	mla	r3, r4, r3, r3
 800745e:	eb03 0a02 	add.w	sl, r3, r2
 8007462:	9a06      	ldr	r2, [sp, #24]
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	1aa7      	subs	r7, r4, r2
 8007468:	eb03 0802 	add.w	r8, r3, r2
 800746c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800746e:	2500      	movs	r5, #0
 8007470:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	9009      	str	r0, [sp, #36]	; 0x24
 800747a:	ae20      	add	r6, sp, #128	; 0x80
 800747c:	4545      	cmp	r5, r8
 800747e:	dd19      	ble.n	80074b4 <__kernel_rem_pio2+0x90>
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	aa20      	add	r2, sp, #128	; 0x80
 8007484:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007488:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800748c:	f1c3 0301 	rsb	r3, r3, #1
 8007490:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	9a04      	ldr	r2, [sp, #16]
 800749a:	4443      	add	r3, r8
 800749c:	429a      	cmp	r2, r3
 800749e:	db35      	blt.n	800750c <__kernel_rem_pio2+0xe8>
 80074a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	f1a3 0908 	sub.w	r9, r3, #8
 80074a8:	2300      	movs	r3, #0
 80074aa:	462f      	mov	r7, r5
 80074ac:	2600      	movs	r6, #0
 80074ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074b2:	e01f      	b.n	80074f4 <__kernel_rem_pio2+0xd0>
 80074b4:	42ef      	cmn	r7, r5
 80074b6:	d40b      	bmi.n	80074d0 <__kernel_rem_pio2+0xac>
 80074b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80074bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074c0:	f7f9 f84c 	bl	800055c <__aeabi_i2d>
 80074c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80074cc:	3501      	adds	r5, #1
 80074ce:	e7d5      	b.n	800747c <__kernel_rem_pio2+0x58>
 80074d0:	4610      	mov	r0, r2
 80074d2:	4619      	mov	r1, r3
 80074d4:	e7f8      	b.n	80074c8 <__kernel_rem_pio2+0xa4>
 80074d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074da:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80074de:	f7f9 f8a7 	bl	8000630 <__aeabi_dmul>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ea:	f7f8 feeb 	bl	80002c4 <__adddf3>
 80074ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f2:	3601      	adds	r6, #1
 80074f4:	9b06      	ldr	r3, [sp, #24]
 80074f6:	3f08      	subs	r7, #8
 80074f8:	429e      	cmp	r6, r3
 80074fa:	ddec      	ble.n	80074d6 <__kernel_rem_pio2+0xb2>
 80074fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007500:	3508      	adds	r5, #8
 8007502:	e8eb 2302 	strd	r2, r3, [fp], #8
 8007506:	f108 0801 	add.w	r8, r8, #1
 800750a:	e7c4      	b.n	8007496 <__kernel_rem_pio2+0x72>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	aa0c      	add	r2, sp, #48	; 0x30
 8007510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007514:	930b      	str	r3, [sp, #44]	; 0x2c
 8007516:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007518:	9f04      	ldr	r7, [sp, #16]
 800751a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800751e:	930a      	str	r3, [sp, #40]	; 0x28
 8007520:	463e      	mov	r6, r7
 8007522:	ab98      	add	r3, sp, #608	; 0x260
 8007524:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007528:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800752c:	f8cd b008 	str.w	fp, [sp, #8]
 8007530:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007534:	2e00      	cmp	r6, #0
 8007536:	dc71      	bgt.n	800761c <__kernel_rem_pio2+0x1f8>
 8007538:	4652      	mov	r2, sl
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f000 fbf7 	bl	8007d30 <scalbn>
 8007542:	2200      	movs	r2, #0
 8007544:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	f7f9 f870 	bl	8000630 <__aeabi_dmul>
 8007550:	f000 fb6e 	bl	8007c30 <floor>
 8007554:	2200      	movs	r2, #0
 8007556:	4b78      	ldr	r3, [pc, #480]	; (8007738 <__kernel_rem_pio2+0x314>)
 8007558:	f7f9 f86a 	bl	8000630 <__aeabi_dmul>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	f7f8 feac 	bl	80002c0 <__aeabi_dsub>
 8007568:	460d      	mov	r5, r1
 800756a:	4604      	mov	r4, r0
 800756c:	f7f9 fb10 	bl	8000b90 <__aeabi_d2iz>
 8007570:	9007      	str	r0, [sp, #28]
 8007572:	f7f8 fff3 	bl	800055c <__aeabi_i2d>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f7f8 fe9f 	bl	80002c0 <__aeabi_dsub>
 8007582:	f1ba 0f00 	cmp.w	sl, #0
 8007586:	4680      	mov	r8, r0
 8007588:	4689      	mov	r9, r1
 800758a:	dd70      	ble.n	800766e <__kernel_rem_pio2+0x24a>
 800758c:	1e7a      	subs	r2, r7, #1
 800758e:	ab0c      	add	r3, sp, #48	; 0x30
 8007590:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007594:	9c07      	ldr	r4, [sp, #28]
 8007596:	f1ca 0118 	rsb	r1, sl, #24
 800759a:	fa40 f301 	asr.w	r3, r0, r1
 800759e:	441c      	add	r4, r3
 80075a0:	408b      	lsls	r3, r1
 80075a2:	1ac0      	subs	r0, r0, r3
 80075a4:	ab0c      	add	r3, sp, #48	; 0x30
 80075a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80075aa:	f1ca 0317 	rsb	r3, sl, #23
 80075ae:	9407      	str	r4, [sp, #28]
 80075b0:	fa40 f303 	asr.w	r3, r0, r3
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dd66      	ble.n	800768a <__kernel_rem_pio2+0x266>
 80075bc:	2200      	movs	r2, #0
 80075be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80075c2:	4614      	mov	r4, r2
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	3301      	adds	r3, #1
 80075c8:	9307      	str	r3, [sp, #28]
 80075ca:	4297      	cmp	r7, r2
 80075cc:	f300 809f 	bgt.w	800770e <__kernel_rem_pio2+0x2ea>
 80075d0:	f1ba 0f00 	cmp.w	sl, #0
 80075d4:	dd07      	ble.n	80075e6 <__kernel_rem_pio2+0x1c2>
 80075d6:	f1ba 0f01 	cmp.w	sl, #1
 80075da:	f000 80b9 	beq.w	8007750 <__kernel_rem_pio2+0x32c>
 80075de:	f1ba 0f02 	cmp.w	sl, #2
 80075e2:	f000 80bf 	beq.w	8007764 <__kernel_rem_pio2+0x340>
 80075e6:	9b02      	ldr	r3, [sp, #8]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d14e      	bne.n	800768a <__kernel_rem_pio2+0x266>
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	2000      	movs	r0, #0
 80075f2:	4952      	ldr	r1, [pc, #328]	; (800773c <__kernel_rem_pio2+0x318>)
 80075f4:	f7f8 fe64 	bl	80002c0 <__aeabi_dsub>
 80075f8:	4680      	mov	r8, r0
 80075fa:	4689      	mov	r9, r1
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	d044      	beq.n	800768a <__kernel_rem_pio2+0x266>
 8007600:	4652      	mov	r2, sl
 8007602:	2000      	movs	r0, #0
 8007604:	494d      	ldr	r1, [pc, #308]	; (800773c <__kernel_rem_pio2+0x318>)
 8007606:	f000 fb93 	bl	8007d30 <scalbn>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f8 fe55 	bl	80002c0 <__aeabi_dsub>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	e036      	b.n	800768a <__kernel_rem_pio2+0x266>
 800761c:	2200      	movs	r2, #0
 800761e:	4b48      	ldr	r3, [pc, #288]	; (8007740 <__kernel_rem_pio2+0x31c>)
 8007620:	4620      	mov	r0, r4
 8007622:	4629      	mov	r1, r5
 8007624:	f7f9 f804 	bl	8000630 <__aeabi_dmul>
 8007628:	f7f9 fab2 	bl	8000b90 <__aeabi_d2iz>
 800762c:	f7f8 ff96 	bl	800055c <__aeabi_i2d>
 8007630:	2200      	movs	r2, #0
 8007632:	4b44      	ldr	r3, [pc, #272]	; (8007744 <__kernel_rem_pio2+0x320>)
 8007634:	4680      	mov	r8, r0
 8007636:	4689      	mov	r9, r1
 8007638:	f7f8 fffa 	bl	8000630 <__aeabi_dmul>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	f7f8 fe3c 	bl	80002c0 <__aeabi_dsub>
 8007648:	f7f9 faa2 	bl	8000b90 <__aeabi_d2iz>
 800764c:	9b02      	ldr	r3, [sp, #8]
 800764e:	3e01      	subs	r6, #1
 8007650:	f843 0b04 	str.w	r0, [r3], #4
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	ab70      	add	r3, sp, #448	; 0x1c0
 8007658:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800765c:	4640      	mov	r0, r8
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	4649      	mov	r1, r9
 8007664:	f7f8 fe2e 	bl	80002c4 <__adddf3>
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	e762      	b.n	8007534 <__kernel_rem_pio2+0x110>
 800766e:	d105      	bne.n	800767c <__kernel_rem_pio2+0x258>
 8007670:	1e7b      	subs	r3, r7, #1
 8007672:	aa0c      	add	r2, sp, #48	; 0x30
 8007674:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007678:	15c3      	asrs	r3, r0, #23
 800767a:	e79b      	b.n	80075b4 <__kernel_rem_pio2+0x190>
 800767c:	2200      	movs	r2, #0
 800767e:	4b32      	ldr	r3, [pc, #200]	; (8007748 <__kernel_rem_pio2+0x324>)
 8007680:	f7f9 fa5c 	bl	8000b3c <__aeabi_dcmpge>
 8007684:	2800      	cmp	r0, #0
 8007686:	d13f      	bne.n	8007708 <__kernel_rem_pio2+0x2e4>
 8007688:	9002      	str	r0, [sp, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	2300      	movs	r3, #0
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	f7f9 fa35 	bl	8000b00 <__aeabi_dcmpeq>
 8007696:	2800      	cmp	r0, #0
 8007698:	f000 80b5 	beq.w	8007806 <__kernel_rem_pio2+0x3e2>
 800769c:	1e7c      	subs	r4, r7, #1
 800769e:	4623      	mov	r3, r4
 80076a0:	2200      	movs	r2, #0
 80076a2:	9904      	ldr	r1, [sp, #16]
 80076a4:	428b      	cmp	r3, r1
 80076a6:	da64      	bge.n	8007772 <__kernel_rem_pio2+0x34e>
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	d078      	beq.n	800779e <__kernel_rem_pio2+0x37a>
 80076ac:	ab0c      	add	r3, sp, #48	; 0x30
 80076ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80076b2:	f1aa 0a18 	sub.w	sl, sl, #24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80a3 	beq.w	8007802 <__kernel_rem_pio2+0x3de>
 80076bc:	4652      	mov	r2, sl
 80076be:	2000      	movs	r0, #0
 80076c0:	491e      	ldr	r1, [pc, #120]	; (800773c <__kernel_rem_pio2+0x318>)
 80076c2:	f000 fb35 	bl	8007d30 <scalbn>
 80076c6:	46a2      	mov	sl, r4
 80076c8:	4606      	mov	r6, r0
 80076ca:	460f      	mov	r7, r1
 80076cc:	f04f 0800 	mov.w	r8, #0
 80076d0:	00e3      	lsls	r3, r4, #3
 80076d2:	9306      	str	r3, [sp, #24]
 80076d4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8007740 <__kernel_rem_pio2+0x31c>
 80076d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80076da:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80076de:	f1ba 0f00 	cmp.w	sl, #0
 80076e2:	f280 80c6 	bge.w	8007872 <__kernel_rem_pio2+0x44e>
 80076e6:	4627      	mov	r7, r4
 80076e8:	f04f 0800 	mov.w	r8, #0
 80076ec:	2f00      	cmp	r7, #0
 80076ee:	f2c0 80f3 	blt.w	80078d8 <__kernel_rem_pio2+0x4b4>
 80076f2:	4b16      	ldr	r3, [pc, #88]	; (800774c <__kernel_rem_pio2+0x328>)
 80076f4:	f04f 0a00 	mov.w	sl, #0
 80076f8:	461d      	mov	r5, r3
 80076fa:	ab70      	add	r3, sp, #448	; 0x1c0
 80076fc:	f04f 0b00 	mov.w	fp, #0
 8007700:	2600      	movs	r6, #0
 8007702:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007706:	e0d9      	b.n	80078bc <__kernel_rem_pio2+0x498>
 8007708:	2302      	movs	r3, #2
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	e756      	b.n	80075bc <__kernel_rem_pio2+0x198>
 800770e:	f8db 3000 	ldr.w	r3, [fp]
 8007712:	b954      	cbnz	r4, 800772a <__kernel_rem_pio2+0x306>
 8007714:	b123      	cbz	r3, 8007720 <__kernel_rem_pio2+0x2fc>
 8007716:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800771a:	f8cb 3000 	str.w	r3, [fp]
 800771e:	2301      	movs	r3, #1
 8007720:	461c      	mov	r4, r3
 8007722:	3201      	adds	r2, #1
 8007724:	f10b 0b04 	add.w	fp, fp, #4
 8007728:	e74f      	b.n	80075ca <__kernel_rem_pio2+0x1a6>
 800772a:	1acb      	subs	r3, r1, r3
 800772c:	f8cb 3000 	str.w	r3, [fp]
 8007730:	4623      	mov	r3, r4
 8007732:	e7f5      	b.n	8007720 <__kernel_rem_pio2+0x2fc>
 8007734:	08008270 	.word	0x08008270
 8007738:	40200000 	.word	0x40200000
 800773c:	3ff00000 	.word	0x3ff00000
 8007740:	3e700000 	.word	0x3e700000
 8007744:	41700000 	.word	0x41700000
 8007748:	3fe00000 	.word	0x3fe00000
 800774c:	08008230 	.word	0x08008230
 8007750:	1e7a      	subs	r2, r7, #1
 8007752:	ab0c      	add	r3, sp, #48	; 0x30
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800775c:	a90c      	add	r1, sp, #48	; 0x30
 800775e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007762:	e740      	b.n	80075e6 <__kernel_rem_pio2+0x1c2>
 8007764:	1e7a      	subs	r2, r7, #1
 8007766:	ab0c      	add	r3, sp, #48	; 0x30
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007770:	e7f4      	b.n	800775c <__kernel_rem_pio2+0x338>
 8007772:	a90c      	add	r1, sp, #48	; 0x30
 8007774:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007778:	3b01      	subs	r3, #1
 800777a:	430a      	orrs	r2, r1
 800777c:	e791      	b.n	80076a2 <__kernel_rem_pio2+0x27e>
 800777e:	3401      	adds	r4, #1
 8007780:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007784:	2a00      	cmp	r2, #0
 8007786:	d0fa      	beq.n	800777e <__kernel_rem_pio2+0x35a>
 8007788:	9b08      	ldr	r3, [sp, #32]
 800778a:	1c7e      	adds	r6, r7, #1
 800778c:	18fd      	adds	r5, r7, r3
 800778e:	ab20      	add	r3, sp, #128	; 0x80
 8007790:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007794:	443c      	add	r4, r7
 8007796:	42b4      	cmp	r4, r6
 8007798:	da04      	bge.n	80077a4 <__kernel_rem_pio2+0x380>
 800779a:	4627      	mov	r7, r4
 800779c:	e6c0      	b.n	8007520 <__kernel_rem_pio2+0xfc>
 800779e:	2401      	movs	r4, #1
 80077a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a2:	e7ed      	b.n	8007780 <__kernel_rem_pio2+0x35c>
 80077a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a6:	462f      	mov	r7, r5
 80077a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80077ac:	f7f8 fed6 	bl	800055c <__aeabi_i2d>
 80077b0:	f04f 0b00 	mov.w	fp, #0
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077be:	e8e7 0102 	strd	r0, r1, [r7], #8
 80077c2:	3b08      	subs	r3, #8
 80077c4:	9302      	str	r3, [sp, #8]
 80077c6:	9b06      	ldr	r3, [sp, #24]
 80077c8:	459b      	cmp	fp, r3
 80077ca:	dd07      	ble.n	80077dc <__kernel_rem_pio2+0x3b8>
 80077cc:	ab70      	add	r3, sp, #448	; 0x1c0
 80077ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077d2:	463d      	mov	r5, r7
 80077d4:	e9c3 8900 	strd	r8, r9, [r3]
 80077d8:	3601      	adds	r6, #1
 80077da:	e7dc      	b.n	8007796 <__kernel_rem_pio2+0x372>
 80077dc:	9902      	ldr	r1, [sp, #8]
 80077de:	f10b 0b01 	add.w	fp, fp, #1
 80077e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80077e6:	9102      	str	r1, [sp, #8]
 80077e8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80077ec:	f7f8 ff20 	bl	8000630 <__aeabi_dmul>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4640      	mov	r0, r8
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7f8 fd64 	bl	80002c4 <__adddf3>
 80077fc:	4680      	mov	r8, r0
 80077fe:	4689      	mov	r9, r1
 8007800:	e7e1      	b.n	80077c6 <__kernel_rem_pio2+0x3a2>
 8007802:	3c01      	subs	r4, #1
 8007804:	e752      	b.n	80076ac <__kernel_rem_pio2+0x288>
 8007806:	f1ca 0200 	rsb	r2, sl, #0
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f000 fa8f 	bl	8007d30 <scalbn>
 8007812:	2200      	movs	r2, #0
 8007814:	4ba5      	ldr	r3, [pc, #660]	; (8007aac <__kernel_rem_pio2+0x688>)
 8007816:	4604      	mov	r4, r0
 8007818:	460d      	mov	r5, r1
 800781a:	f7f9 f98f 	bl	8000b3c <__aeabi_dcmpge>
 800781e:	b1f8      	cbz	r0, 8007860 <__kernel_rem_pio2+0x43c>
 8007820:	2200      	movs	r2, #0
 8007822:	4ba3      	ldr	r3, [pc, #652]	; (8007ab0 <__kernel_rem_pio2+0x68c>)
 8007824:	4620      	mov	r0, r4
 8007826:	4629      	mov	r1, r5
 8007828:	f7f8 ff02 	bl	8000630 <__aeabi_dmul>
 800782c:	f7f9 f9b0 	bl	8000b90 <__aeabi_d2iz>
 8007830:	4606      	mov	r6, r0
 8007832:	f7f8 fe93 	bl	800055c <__aeabi_i2d>
 8007836:	2200      	movs	r2, #0
 8007838:	4b9c      	ldr	r3, [pc, #624]	; (8007aac <__kernel_rem_pio2+0x688>)
 800783a:	f7f8 fef9 	bl	8000630 <__aeabi_dmul>
 800783e:	460b      	mov	r3, r1
 8007840:	4602      	mov	r2, r0
 8007842:	4629      	mov	r1, r5
 8007844:	4620      	mov	r0, r4
 8007846:	f7f8 fd3b 	bl	80002c0 <__aeabi_dsub>
 800784a:	f7f9 f9a1 	bl	8000b90 <__aeabi_d2iz>
 800784e:	1c7c      	adds	r4, r7, #1
 8007850:	ab0c      	add	r3, sp, #48	; 0x30
 8007852:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007856:	f10a 0a18 	add.w	sl, sl, #24
 800785a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800785e:	e72d      	b.n	80076bc <__kernel_rem_pio2+0x298>
 8007860:	4620      	mov	r0, r4
 8007862:	4629      	mov	r1, r5
 8007864:	f7f9 f994 	bl	8000b90 <__aeabi_d2iz>
 8007868:	ab0c      	add	r3, sp, #48	; 0x30
 800786a:	463c      	mov	r4, r7
 800786c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007870:	e724      	b.n	80076bc <__kernel_rem_pio2+0x298>
 8007872:	ab0c      	add	r3, sp, #48	; 0x30
 8007874:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007878:	f7f8 fe70 	bl	800055c <__aeabi_i2d>
 800787c:	4632      	mov	r2, r6
 800787e:	463b      	mov	r3, r7
 8007880:	f7f8 fed6 	bl	8000630 <__aeabi_dmul>
 8007884:	4642      	mov	r2, r8
 8007886:	e86b 0102 	strd	r0, r1, [fp], #-8
 800788a:	464b      	mov	r3, r9
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f8 fece 	bl	8000630 <__aeabi_dmul>
 8007894:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007898:	4606      	mov	r6, r0
 800789a:	460f      	mov	r7, r1
 800789c:	e71f      	b.n	80076de <__kernel_rem_pio2+0x2ba>
 800789e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80078a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80078a6:	f7f8 fec3 	bl	8000630 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4650      	mov	r0, sl
 80078b0:	4659      	mov	r1, fp
 80078b2:	f7f8 fd07 	bl	80002c4 <__adddf3>
 80078b6:	4682      	mov	sl, r0
 80078b8:	468b      	mov	fp, r1
 80078ba:	3601      	adds	r6, #1
 80078bc:	9b04      	ldr	r3, [sp, #16]
 80078be:	429e      	cmp	r6, r3
 80078c0:	dc01      	bgt.n	80078c6 <__kernel_rem_pio2+0x4a2>
 80078c2:	45b0      	cmp	r8, r6
 80078c4:	daeb      	bge.n	800789e <__kernel_rem_pio2+0x47a>
 80078c6:	ab48      	add	r3, sp, #288	; 0x120
 80078c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80078cc:	e9c3 ab00 	strd	sl, fp, [r3]
 80078d0:	3f01      	subs	r7, #1
 80078d2:	f108 0801 	add.w	r8, r8, #1
 80078d6:	e709      	b.n	80076ec <__kernel_rem_pio2+0x2c8>
 80078d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80078da:	2b02      	cmp	r3, #2
 80078dc:	dc09      	bgt.n	80078f2 <__kernel_rem_pio2+0x4ce>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dc34      	bgt.n	800794c <__kernel_rem_pio2+0x528>
 80078e2:	d05e      	beq.n	80079a2 <__kernel_rem_pio2+0x57e>
 80078e4:	9b07      	ldr	r3, [sp, #28]
 80078e6:	f003 0007 	and.w	r0, r3, #7
 80078ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d1f5      	bne.n	80078e4 <__kernel_rem_pio2+0x4c0>
 80078f8:	9a06      	ldr	r2, [sp, #24]
 80078fa:	ab48      	add	r3, sp, #288	; 0x120
 80078fc:	441a      	add	r2, r3
 80078fe:	4615      	mov	r5, r2
 8007900:	4692      	mov	sl, r2
 8007902:	46a3      	mov	fp, r4
 8007904:	f1bb 0f00 	cmp.w	fp, #0
 8007908:	dc7a      	bgt.n	8007a00 <__kernel_rem_pio2+0x5dc>
 800790a:	46aa      	mov	sl, r5
 800790c:	46a3      	mov	fp, r4
 800790e:	f1bb 0f01 	cmp.w	fp, #1
 8007912:	f300 8094 	bgt.w	8007a3e <__kernel_rem_pio2+0x61a>
 8007916:	2700      	movs	r7, #0
 8007918:	463e      	mov	r6, r7
 800791a:	2c01      	cmp	r4, #1
 800791c:	f300 80ae 	bgt.w	8007a7c <__kernel_rem_pio2+0x658>
 8007920:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007924:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007928:	9b02      	ldr	r3, [sp, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 80b0 	bne.w	8007a90 <__kernel_rem_pio2+0x66c>
 8007930:	4603      	mov	r3, r0
 8007932:	462a      	mov	r2, r5
 8007934:	9801      	ldr	r0, [sp, #4]
 8007936:	e9c0 2300 	strd	r2, r3, [r0]
 800793a:	4622      	mov	r2, r4
 800793c:	460b      	mov	r3, r1
 800793e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007942:	463a      	mov	r2, r7
 8007944:	4633      	mov	r3, r6
 8007946:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800794a:	e7cb      	b.n	80078e4 <__kernel_rem_pio2+0x4c0>
 800794c:	2000      	movs	r0, #0
 800794e:	9a06      	ldr	r2, [sp, #24]
 8007950:	ab48      	add	r3, sp, #288	; 0x120
 8007952:	441a      	add	r2, r3
 8007954:	4615      	mov	r5, r2
 8007956:	46a0      	mov	r8, r4
 8007958:	4601      	mov	r1, r0
 800795a:	f1b8 0f00 	cmp.w	r8, #0
 800795e:	da3c      	bge.n	80079da <__kernel_rem_pio2+0x5b6>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d040      	beq.n	80079e8 <__kernel_rem_pio2+0x5c4>
 8007966:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800796a:	4602      	mov	r2, r0
 800796c:	462b      	mov	r3, r5
 800796e:	9d01      	ldr	r5, [sp, #4]
 8007970:	2601      	movs	r6, #1
 8007972:	e9c5 2300 	strd	r2, r3, [r5]
 8007976:	460b      	mov	r3, r1
 8007978:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800797c:	f7f8 fca0 	bl	80002c0 <__aeabi_dsub>
 8007980:	4684      	mov	ip, r0
 8007982:	460f      	mov	r7, r1
 8007984:	ad48      	add	r5, sp, #288	; 0x120
 8007986:	42b4      	cmp	r4, r6
 8007988:	f105 0508 	add.w	r5, r5, #8
 800798c:	da2e      	bge.n	80079ec <__kernel_rem_pio2+0x5c8>
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	b10b      	cbz	r3, 8007996 <__kernel_rem_pio2+0x572>
 8007992:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007996:	4662      	mov	r2, ip
 8007998:	463b      	mov	r3, r7
 800799a:	9901      	ldr	r1, [sp, #4]
 800799c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80079a0:	e7a0      	b.n	80078e4 <__kernel_rem_pio2+0x4c0>
 80079a2:	9a06      	ldr	r2, [sp, #24]
 80079a4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80079a6:	ab48      	add	r3, sp, #288	; 0x120
 80079a8:	441a      	add	r2, r3
 80079aa:	4615      	mov	r5, r2
 80079ac:	4637      	mov	r7, r6
 80079ae:	2c00      	cmp	r4, #0
 80079b0:	da09      	bge.n	80079c6 <__kernel_rem_pio2+0x5a2>
 80079b2:	9b02      	ldr	r3, [sp, #8]
 80079b4:	b10b      	cbz	r3, 80079ba <__kernel_rem_pio2+0x596>
 80079b6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80079ba:	4632      	mov	r2, r6
 80079bc:	463b      	mov	r3, r7
 80079be:	9901      	ldr	r1, [sp, #4]
 80079c0:	e9c1 2300 	strd	r2, r3, [r1]
 80079c4:	e78e      	b.n	80078e4 <__kernel_rem_pio2+0x4c0>
 80079c6:	4630      	mov	r0, r6
 80079c8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fc79 	bl	80002c4 <__adddf3>
 80079d2:	3c01      	subs	r4, #1
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	e7e9      	b.n	80079ae <__kernel_rem_pio2+0x58a>
 80079da:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80079de:	f7f8 fc71 	bl	80002c4 <__adddf3>
 80079e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80079e6:	e7b8      	b.n	800795a <__kernel_rem_pio2+0x536>
 80079e8:	460d      	mov	r5, r1
 80079ea:	e7be      	b.n	800796a <__kernel_rem_pio2+0x546>
 80079ec:	4660      	mov	r0, ip
 80079ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 fc66 	bl	80002c4 <__adddf3>
 80079f8:	3601      	adds	r6, #1
 80079fa:	4684      	mov	ip, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	e7c2      	b.n	8007986 <__kernel_rem_pio2+0x562>
 8007a00:	e9da 6700 	ldrd	r6, r7, [sl]
 8007a04:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007a08:	4632      	mov	r2, r6
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	4649      	mov	r1, r9
 8007a10:	f7f8 fc58 	bl	80002c4 <__adddf3>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	4649      	mov	r1, r9
 8007a20:	f7f8 fc4e 	bl	80002c0 <__aeabi_dsub>
 8007a24:	4632      	mov	r2, r6
 8007a26:	463b      	mov	r3, r7
 8007a28:	f7f8 fc4c 	bl	80002c4 <__adddf3>
 8007a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a30:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007a34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a38:	e9ca 2300 	strd	r2, r3, [sl]
 8007a3c:	e762      	b.n	8007904 <__kernel_rem_pio2+0x4e0>
 8007a3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a42:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fc39 	bl	80002c4 <__adddf3>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7f8 fc2f 	bl	80002c0 <__aeabi_dsub>
 8007a62:	4642      	mov	r2, r8
 8007a64:	464b      	mov	r3, r9
 8007a66:	f7f8 fc2d 	bl	80002c4 <__adddf3>
 8007a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a6e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a76:	e9ca 2300 	strd	r2, r3, [sl]
 8007a7a:	e748      	b.n	800790e <__kernel_rem_pio2+0x4ea>
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007a82:	4631      	mov	r1, r6
 8007a84:	f7f8 fc1e 	bl	80002c4 <__adddf3>
 8007a88:	3c01      	subs	r4, #1
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	460e      	mov	r6, r1
 8007a8e:	e744      	b.n	800791a <__kernel_rem_pio2+0x4f6>
 8007a90:	9b01      	ldr	r3, [sp, #4]
 8007a92:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007a96:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007a9a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007a9e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007aa2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007aa6:	601d      	str	r5, [r3, #0]
 8007aa8:	615e      	str	r6, [r3, #20]
 8007aaa:	e71b      	b.n	80078e4 <__kernel_rem_pio2+0x4c0>
 8007aac:	41700000 	.word	0x41700000
 8007ab0:	3e700000 	.word	0x3e700000
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <__kernel_sin>:
 8007ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	e9cd 2300 	strd	r2, r3, [sp]
 8007ac2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ac6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007aca:	4682      	mov	sl, r0
 8007acc:	460c      	mov	r4, r1
 8007ace:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007ad0:	da03      	bge.n	8007ada <__kernel_sin+0x22>
 8007ad2:	f7f9 f85d 	bl	8000b90 <__aeabi_d2iz>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d050      	beq.n	8007b7c <__kernel_sin+0xc4>
 8007ada:	4652      	mov	r2, sl
 8007adc:	4623      	mov	r3, r4
 8007ade:	4650      	mov	r0, sl
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	f7f8 fda5 	bl	8000630 <__aeabi_dmul>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4650      	mov	r0, sl
 8007af0:	4621      	mov	r1, r4
 8007af2:	f7f8 fd9d 	bl	8000630 <__aeabi_dmul>
 8007af6:	a33e      	add	r3, pc, #248	; (adr r3, 8007bf0 <__kernel_sin+0x138>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 fd94 	bl	8000630 <__aeabi_dmul>
 8007b08:	a33b      	add	r3, pc, #236	; (adr r3, 8007bf8 <__kernel_sin+0x140>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fbd7 	bl	80002c0 <__aeabi_dsub>
 8007b12:	4632      	mov	r2, r6
 8007b14:	463b      	mov	r3, r7
 8007b16:	f7f8 fd8b 	bl	8000630 <__aeabi_dmul>
 8007b1a:	a339      	add	r3, pc, #228	; (adr r3, 8007c00 <__kernel_sin+0x148>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fbd0 	bl	80002c4 <__adddf3>
 8007b24:	4632      	mov	r2, r6
 8007b26:	463b      	mov	r3, r7
 8007b28:	f7f8 fd82 	bl	8000630 <__aeabi_dmul>
 8007b2c:	a336      	add	r3, pc, #216	; (adr r3, 8007c08 <__kernel_sin+0x150>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f7f8 fbc5 	bl	80002c0 <__aeabi_dsub>
 8007b36:	4632      	mov	r2, r6
 8007b38:	463b      	mov	r3, r7
 8007b3a:	f7f8 fd79 	bl	8000630 <__aeabi_dmul>
 8007b3e:	a334      	add	r3, pc, #208	; (adr r3, 8007c10 <__kernel_sin+0x158>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f7f8 fbbe 	bl	80002c4 <__adddf3>
 8007b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4c:	b9dd      	cbnz	r5, 8007b86 <__kernel_sin+0xce>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f8 fd6b 	bl	8000630 <__aeabi_dmul>
 8007b5a:	a32f      	add	r3, pc, #188	; (adr r3, 8007c18 <__kernel_sin+0x160>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fbae 	bl	80002c0 <__aeabi_dsub>
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	f7f8 fd62 	bl	8000630 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4650      	mov	r0, sl
 8007b72:	4621      	mov	r1, r4
 8007b74:	f7f8 fba6 	bl	80002c4 <__adddf3>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	4621      	mov	r1, r4
 8007b80:	b006      	add	sp, #24
 8007b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b86:	2200      	movs	r2, #0
 8007b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b8c:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <__kernel_sin+0x168>)
 8007b8e:	f7f8 fd4f 	bl	8000630 <__aeabi_dmul>
 8007b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	f7f8 fd47 	bl	8000630 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007baa:	f7f8 fb89 	bl	80002c0 <__aeabi_dsub>
 8007bae:	4632      	mov	r2, r6
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	f7f8 fd3d 	bl	8000630 <__aeabi_dmul>
 8007bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bba:	f7f8 fb81 	bl	80002c0 <__aeabi_dsub>
 8007bbe:	a316      	add	r3, pc, #88	; (adr r3, 8007c18 <__kernel_sin+0x160>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	f7f8 fd30 	bl	8000630 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	f7f8 fb74 	bl	80002c4 <__adddf3>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4650      	mov	r0, sl
 8007be2:	4621      	mov	r1, r4
 8007be4:	f7f8 fb6c 	bl	80002c0 <__aeabi_dsub>
 8007be8:	e7c6      	b.n	8007b78 <__kernel_sin+0xc0>
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	5acfd57c 	.word	0x5acfd57c
 8007bf4:	3de5d93a 	.word	0x3de5d93a
 8007bf8:	8a2b9ceb 	.word	0x8a2b9ceb
 8007bfc:	3e5ae5e6 	.word	0x3e5ae5e6
 8007c00:	57b1fe7d 	.word	0x57b1fe7d
 8007c04:	3ec71de3 	.word	0x3ec71de3
 8007c08:	19c161d5 	.word	0x19c161d5
 8007c0c:	3f2a01a0 	.word	0x3f2a01a0
 8007c10:	1110f8a6 	.word	0x1110f8a6
 8007c14:	3f811111 	.word	0x3f811111
 8007c18:	55555549 	.word	0x55555549
 8007c1c:	3fc55555 	.word	0x3fc55555
 8007c20:	3fe00000 	.word	0x3fe00000

08007c24 <fabs>:
 8007c24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c28:	4770      	bx	lr
 8007c2a:	0000      	movs	r0, r0
 8007c2c:	0000      	movs	r0, r0
	...

08007c30 <floor>:
 8007c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c34:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007c38:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007c3c:	2e13      	cmp	r6, #19
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4607      	mov	r7, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	4605      	mov	r5, r0
 8007c48:	dc34      	bgt.n	8007cb4 <floor+0x84>
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	da15      	bge.n	8007c7a <floor+0x4a>
 8007c4e:	a334      	add	r3, pc, #208	; (adr r3, 8007d20 <floor+0xf0>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 fb36 	bl	80002c4 <__adddf3>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f7f8 ff78 	bl	8000b50 <__aeabi_dcmpgt>
 8007c60:	b140      	cbz	r0, 8007c74 <floor+0x44>
 8007c62:	2c00      	cmp	r4, #0
 8007c64:	da59      	bge.n	8007d1a <floor+0xea>
 8007c66:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007c6a:	ea57 0503 	orrs.w	r5, r7, r3
 8007c6e:	d001      	beq.n	8007c74 <floor+0x44>
 8007c70:	2500      	movs	r5, #0
 8007c72:	4c2d      	ldr	r4, [pc, #180]	; (8007d28 <floor+0xf8>)
 8007c74:	4623      	mov	r3, r4
 8007c76:	462f      	mov	r7, r5
 8007c78:	e025      	b.n	8007cc6 <floor+0x96>
 8007c7a:	4a2c      	ldr	r2, [pc, #176]	; (8007d2c <floor+0xfc>)
 8007c7c:	fa42 f806 	asr.w	r8, r2, r6
 8007c80:	ea01 0208 	and.w	r2, r1, r8
 8007c84:	4302      	orrs	r2, r0
 8007c86:	d01e      	beq.n	8007cc6 <floor+0x96>
 8007c88:	a325      	add	r3, pc, #148	; (adr r3, 8007d20 <floor+0xf0>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 fb19 	bl	80002c4 <__adddf3>
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	f7f8 ff5b 	bl	8000b50 <__aeabi_dcmpgt>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d0ea      	beq.n	8007c74 <floor+0x44>
 8007c9e:	2c00      	cmp	r4, #0
 8007ca0:	bfbe      	ittt	lt
 8007ca2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ca6:	fa43 f606 	asrlt.w	r6, r3, r6
 8007caa:	19a4      	addlt	r4, r4, r6
 8007cac:	2500      	movs	r5, #0
 8007cae:	ea24 0408 	bic.w	r4, r4, r8
 8007cb2:	e7df      	b.n	8007c74 <floor+0x44>
 8007cb4:	2e33      	cmp	r6, #51	; 0x33
 8007cb6:	dd0a      	ble.n	8007cce <floor+0x9e>
 8007cb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007cbc:	d103      	bne.n	8007cc6 <floor+0x96>
 8007cbe:	f7f8 fb01 	bl	80002c4 <__adddf3>
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	4619      	mov	r1, r3
 8007cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007cd6:	fa22 f808 	lsr.w	r8, r2, r8
 8007cda:	ea18 0f00 	tst.w	r8, r0
 8007cde:	d0f2      	beq.n	8007cc6 <floor+0x96>
 8007ce0:	a30f      	add	r3, pc, #60	; (adr r3, 8007d20 <floor+0xf0>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 faed 	bl	80002c4 <__adddf3>
 8007cea:	2200      	movs	r2, #0
 8007cec:	2300      	movs	r3, #0
 8007cee:	f7f8 ff2f 	bl	8000b50 <__aeabi_dcmpgt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d0be      	beq.n	8007c74 <floor+0x44>
 8007cf6:	2c00      	cmp	r4, #0
 8007cf8:	da02      	bge.n	8007d00 <floor+0xd0>
 8007cfa:	2e14      	cmp	r6, #20
 8007cfc:	d103      	bne.n	8007d06 <floor+0xd6>
 8007cfe:	3401      	adds	r4, #1
 8007d00:	ea25 0508 	bic.w	r5, r5, r8
 8007d04:	e7b6      	b.n	8007c74 <floor+0x44>
 8007d06:	2301      	movs	r3, #1
 8007d08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007d0c:	fa03 f606 	lsl.w	r6, r3, r6
 8007d10:	4435      	add	r5, r6
 8007d12:	42bd      	cmp	r5, r7
 8007d14:	bf38      	it	cc
 8007d16:	18e4      	addcc	r4, r4, r3
 8007d18:	e7f2      	b.n	8007d00 <floor+0xd0>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	462c      	mov	r4, r5
 8007d1e:	e7a9      	b.n	8007c74 <floor+0x44>
 8007d20:	8800759c 	.word	0x8800759c
 8007d24:	7e37e43c 	.word	0x7e37e43c
 8007d28:	bff00000 	.word	0xbff00000
 8007d2c:	000fffff 	.word	0x000fffff

08007d30 <scalbn>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	4617      	mov	r7, r2
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	b996      	cbnz	r6, 8007d66 <scalbn+0x36>
 8007d40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d44:	4303      	orrs	r3, r0
 8007d46:	d039      	beq.n	8007dbc <scalbn+0x8c>
 8007d48:	4b35      	ldr	r3, [pc, #212]	; (8007e20 <scalbn+0xf0>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f7f8 fc70 	bl	8000630 <__aeabi_dmul>
 8007d50:	4b34      	ldr	r3, [pc, #208]	; (8007e24 <scalbn+0xf4>)
 8007d52:	4604      	mov	r4, r0
 8007d54:	429f      	cmp	r7, r3
 8007d56:	460d      	mov	r5, r1
 8007d58:	da0f      	bge.n	8007d7a <scalbn+0x4a>
 8007d5a:	a32d      	add	r3, pc, #180	; (adr r3, 8007e10 <scalbn+0xe0>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fc66 	bl	8000630 <__aeabi_dmul>
 8007d64:	e006      	b.n	8007d74 <scalbn+0x44>
 8007d66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007d6a:	4296      	cmp	r6, r2
 8007d6c:	d10a      	bne.n	8007d84 <scalbn+0x54>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	f7f8 faa8 	bl	80002c4 <__adddf3>
 8007d74:	4604      	mov	r4, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	e020      	b.n	8007dbc <scalbn+0x8c>
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007d80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007d84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007d88:	19b9      	adds	r1, r7, r6
 8007d8a:	4291      	cmp	r1, r2
 8007d8c:	dd0e      	ble.n	8007dac <scalbn+0x7c>
 8007d8e:	a322      	add	r3, pc, #136	; (adr r3, 8007e18 <scalbn+0xe8>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007d98:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007d9c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007da0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007da4:	4820      	ldr	r0, [pc, #128]	; (8007e28 <scalbn+0xf8>)
 8007da6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007daa:	e7d9      	b.n	8007d60 <scalbn+0x30>
 8007dac:	2900      	cmp	r1, #0
 8007dae:	dd08      	ble.n	8007dc2 <scalbn+0x92>
 8007db0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007db8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007dc6:	da16      	bge.n	8007df6 <scalbn+0xc6>
 8007dc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007dcc:	429f      	cmp	r7, r3
 8007dce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007dd2:	dd08      	ble.n	8007de6 <scalbn+0xb6>
 8007dd4:	4c15      	ldr	r4, [pc, #84]	; (8007e2c <scalbn+0xfc>)
 8007dd6:	4814      	ldr	r0, [pc, #80]	; (8007e28 <scalbn+0xf8>)
 8007dd8:	f363 74df 	bfi	r4, r3, #31, #1
 8007ddc:	a30e      	add	r3, pc, #56	; (adr r3, 8007e18 <scalbn+0xe8>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	4621      	mov	r1, r4
 8007de4:	e7bc      	b.n	8007d60 <scalbn+0x30>
 8007de6:	4c12      	ldr	r4, [pc, #72]	; (8007e30 <scalbn+0x100>)
 8007de8:	4812      	ldr	r0, [pc, #72]	; (8007e34 <scalbn+0x104>)
 8007dea:	f363 74df 	bfi	r4, r3, #31, #1
 8007dee:	a308      	add	r3, pc, #32	; (adr r3, 8007e10 <scalbn+0xe0>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	e7f5      	b.n	8007de2 <scalbn+0xb2>
 8007df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dfa:	3136      	adds	r1, #54	; 0x36
 8007dfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <scalbn+0x108>)
 8007e0c:	e7a8      	b.n	8007d60 <scalbn+0x30>
 8007e0e:	bf00      	nop
 8007e10:	c2f8f359 	.word	0xc2f8f359
 8007e14:	01a56e1f 	.word	0x01a56e1f
 8007e18:	8800759c 	.word	0x8800759c
 8007e1c:	7e37e43c 	.word	0x7e37e43c
 8007e20:	43500000 	.word	0x43500000
 8007e24:	ffff3cb0 	.word	0xffff3cb0
 8007e28:	8800759c 	.word	0x8800759c
 8007e2c:	7e37e43c 	.word	0x7e37e43c
 8007e30:	01a56e1f 	.word	0x01a56e1f
 8007e34:	c2f8f359 	.word	0xc2f8f359
 8007e38:	3c900000 	.word	0x3c900000

08007e3c <_init>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr

08007e48 <_fini>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	bf00      	nop
 8007e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4e:	bc08      	pop	{r3}
 8007e50:	469e      	mov	lr, r3
 8007e52:	4770      	bx	lr
